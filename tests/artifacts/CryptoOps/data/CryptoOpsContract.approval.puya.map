{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA4EK;;AAAA;AAAA;AAAA;;AAAA;AA5EL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA4EK;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAvEL;;;AAAA;;;AAuEK;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAlEL;;;AAAA;;;AAkEK;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAxDL;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAwDK;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAjDL;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAiDK;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3CL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA2CK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AArCL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAqCK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA/BL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA+BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAyBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAnBL;;;AAAA;;;AAAA;;;AAAA;AAmBK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAbL;;;AAAA;;;AAAA;;;AAAA;AAaK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAPL;;;AAAA;;;AAAA;;;AAAA;AAOK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;AACK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAEY;;AAAA;AAAJ;;AAAI;;AAAJ;;AACS;AACT;AAER;;;AAEY;;AAAA;AAAJ;;AAAI;;AAAJ;;AACS;AACT;AAER;;;AAEY;;AAAA;AAAJ;;AAAI;;AAAJ;;AACS;AACT;AAER;;;AAEY;;AAAA;AAAJ;;AAAI;;AAAJ;;AACS;AACT;AAER;;;AAEsB;;;AAAM;AAApB;;;AACA;;AAAA;;AAAA;;AAAS;AACF;AAAA;AAAA;;AAAA;AAAP;AAER;;;AAEsB;;;AAAM;AAApB;;;AACA;;AAAA;;AAAA;;AAAS;AACF;AAAA;AAAA;;AAAA;AAAP;AAER;;;AAEsB;AAAM;AAApB;;;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAY;;AACZ;AAER;;;AAEsB;AAAM;AAApB;;;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAY;;AACZ;AAER;;;AAIsB;AAAM;AAApB;;;AACO;;AAAA;;AAAA;;AAAA;;AAAA;;AAAP;AAER;;;AAOsB;AAAM;AAApB;;;AACO;;AAAA;;AAAA;;AAAA;;AAAA;;AAAP;AAER;;;AAEsB;;;AAAK;AAAnB;;;AACO;;AAAA;;AAAP;AAER;;;AAEsB;;;AAAK;AAAnB;;;AACO;;AAAA;;AAAP;AAER;;;AAEsB;;;AAAM;AAApB;;;AACA;;AAAA;;AAAA;;AAAS;;AACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 3000"
    },
    "8": {
      "op": "bytecblock 0x151f7c75 0x00 0x0004 0x068101"
    },
    "24": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "26": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "29": {
      "op": "pushbytess 0x3456c4c3 0xe8442b84 0x65f567aa 0x258455b1 0x35af0f38 0x6582c997 0x6298ffbb 0x3885b54f 0x2164e0bf 0x755b79a5 0xf06bb077 0x133f8ccc 0x2f7c68a9 // method \"verify_sha256(byte[],uint64)byte[]\", method \"verify_sha3_256(byte[],uint64)byte[]\", method \"verify_keccak_256(byte[],uint64)byte[]\", method \"verify_sha512_256(byte[],uint64)byte[]\", method \"verify_ed25519verify(byte[],byte[],byte[])bool\", method \"verify_ed25519verify_bare(byte[],byte[],byte[])bool\", method \"verify_ecdsa_verify_k1(byte[],byte[],byte[],byte[],byte[])bool\", method \"verify_ecdsa_verify_r1(byte[],byte[],byte[],byte[],byte[])bool\", method \"verify_ecdsa_recover_k1(byte[],uint64,byte[],byte[])(byte[],byte[])\", method \"verify_ecdsa_recover_r1(byte[],uint64,byte[],byte[])(byte[],byte[])\", method \"verify_ecdsa_decompress_k1(byte[])(byte[],byte[])\", method \"verify_ecdsa_decompress_r1(byte[])(byte[],byte[])\", method \"verify_vrf_verify(byte[],byte[],byte[])(byte[],bool)\""
    },
    "96": {
      "op": "txna ApplicationArgs 0"
    },
    "99": {
      "op": "match main_verify_sha256_route@3 main_verify_sha3_256_route@4 main_verify_keccak_256_route@5 main_verify_sha512_256_route@6 main_verify_ed25519verify_route@7 main_verify_ed25519verify_bare_route@8 main_verify_ecdsa_verify_k1_route@9 main_verify_ecdsa_verify_r1_route@10 main_verify_ecdsa_recover_k1_route@11 main_verify_ecdsa_recover_r1_route@12 main_verify_ecdsa_decompress_k1_route@13 main_verify_ecdsa_decompress_r1_route@14 main_verify_vrf_verify_route@15"
    },
    "127": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "128": {
      "op": "return"
    },
    "129": {
      "block": "main_verify_vrf_verify_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "131": {
      "op": "!",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "132": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "133": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "135": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "136": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "139": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "142": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%138#0",
        "tmp%139#0"
      ]
    },
    "145": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%138#0",
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%138#0",
        "tmp%140#0"
      ]
    },
    "148": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%138#0",
        "tmp%140#0",
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%138#0",
        "tmp%140#0",
        "tmp%141#0"
      ]
    },
    "151": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%138#0",
        "tmp%140#0",
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%138#0",
        "tmp%140#0",
        "tmp%142#0"
      ]
    },
    "154": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_vrf_verify",
      "op": "callsub verify_vrf_verify",
      "defined_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ]
    },
    "157": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%8#0 (copy)",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%8#0 (copy)"
      ]
    },
    "159": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "length%12#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "length%12#0"
      ]
    },
    "160": {
      "op": "itob",
      "defined_out": [
        "as_bytes%20#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "as_bytes%20#0"
      ]
    },
    "161": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "length_uint16%12#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "length_uint16%12#0"
      ]
    },
    "164": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%9#0",
        "length_uint16%12#0",
        "elements_to_encode%8#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%9#0",
        "encoded_value%12#0"
      ],
      "stack_out": [
        "elements_to_encode%9#0",
        "encoded_value%12#0"
      ]
    },
    "167": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%9#0",
        "encoded_value%12#0"
      ],
      "stack_out": [
        "elements_to_encode%9#0",
        "encoded_value%12#0",
        "0x00"
      ]
    },
    "168": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%9#0",
        "encoded_value%12#0"
      ],
      "stack_out": [
        "elements_to_encode%9#0",
        "encoded_value%12#0",
        "0x00",
        "0"
      ]
    },
    "169": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%12#0",
        "0x00",
        "0",
        "elements_to_encode%9#0"
      ]
    },
    "171": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0",
        "encoded_value%12#0"
      ],
      "stack_out": [
        "encoded_value%12#0",
        "encoded_bool%2#0"
      ]
    },
    "172": {
      "op": "pushbytes 0x0003",
      "defined_out": [
        "0x0003",
        "encoded_bool%2#0",
        "encoded_value%12#0"
      ],
      "stack_out": [
        "encoded_value%12#0",
        "encoded_bool%2#0",
        "0x0003"
      ]
    },
    "176": {
      "op": "swap",
      "stack_out": [
        "encoded_value%12#0",
        "0x0003",
        "encoded_bool%2#0"
      ]
    },
    "177": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_value%12#0"
      ],
      "stack_out": [
        "encoded_value%12#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "178": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%22#0",
        "encoded_value%12#0"
      ]
    },
    "179": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%23#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%23#0"
      ]
    },
    "180": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%23#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%23#0",
        "0x151f7c75"
      ]
    },
    "181": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%23#0"
      ]
    },
    "182": {
      "op": "concat",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "183": {
      "op": "log",
      "stack_out": []
    },
    "184": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "185": {
      "op": "return"
    },
    "186": {
      "block": "main_verify_ecdsa_decompress_r1_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "188": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "189": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "190": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "192": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "193": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "196": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "199": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_decompress_r1",
      "op": "callsub verify_ecdsa_decompress_r1",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "202": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%6#0 (copy)",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%6#0 (copy)"
      ]
    },
    "204": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "length%10#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "length%10#0"
      ]
    },
    "205": {
      "op": "itob",
      "defined_out": [
        "as_bytes%16#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "as_bytes%16#0"
      ]
    },
    "206": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "length_uint16%10#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "length_uint16%10#0"
      ]
    },
    "209": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "length_uint16%10#0",
        "elements_to_encode%6#0"
      ]
    },
    "211": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_value%10#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_value%10#0"
      ]
    },
    "212": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%7#0 (copy)",
        "encoded_value%10#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_value%10#0",
        "elements_to_encode%7#0 (copy)"
      ]
    },
    "214": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_value%10#0",
        "length%11#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_value%10#0",
        "length%11#0"
      ]
    },
    "215": {
      "op": "itob",
      "defined_out": [
        "as_bytes%17#0",
        "elements_to_encode%7#0",
        "encoded_value%10#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_value%10#0",
        "as_bytes%17#0"
      ]
    },
    "216": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_value%10#0",
        "length_uint16%11#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_value%10#0",
        "length_uint16%11#0"
      ]
    },
    "219": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%10#0",
        "length_uint16%11#0",
        "elements_to_encode%7#0"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "encoded_value%10#0",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "encoded_value%11#0"
      ]
    },
    "222": {
      "op": "dig 1",
      "defined_out": [
        "encoded_value%10#0",
        "encoded_value%10#0 (copy)",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "encoded_value%11#0",
        "encoded_value%10#0 (copy)"
      ]
    },
    "224": {
      "op": "len",
      "defined_out": [
        "data_length%6#0",
        "encoded_value%10#0",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "encoded_value%11#0",
        "data_length%6#0"
      ]
    },
    "225": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "data_length%6#0",
        "encoded_value%10#0",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "encoded_value%11#0",
        "data_length%6#0",
        "4"
      ]
    },
    "226": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%10#0",
        "encoded_value%10#0",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "encoded_value%11#0",
        "current_tail_offset%10#0"
      ]
    },
    "227": {
      "op": "itob",
      "defined_out": [
        "as_bytes%19#0",
        "encoded_value%10#0",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "encoded_value%11#0",
        "as_bytes%19#0"
      ]
    },
    "228": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%10#0",
        "encoded_value%11#0",
        "offset_as_uint16%7#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "encoded_value%11#0",
        "offset_as_uint16%7#0"
      ]
    },
    "231": {
      "op": "bytec_2 // 0x0004",
      "defined_out": [
        "0x0004",
        "encoded_value%10#0",
        "encoded_value%11#0",
        "offset_as_uint16%7#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "encoded_value%11#0",
        "offset_as_uint16%7#0",
        "0x0004"
      ]
    },
    "232": {
      "op": "swap",
      "stack_out": [
        "encoded_value%10#0",
        "encoded_value%11#0",
        "0x0004",
        "offset_as_uint16%7#0"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0",
        "encoded_value%10#0",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "encoded_value%11#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "234": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%11#0",
        "encoded_tuple_buffer%17#0",
        "encoded_value%10#0"
      ]
    },
    "236": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%11#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%18#0",
        "encoded_value%11#0"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0"
      ]
    },
    "239": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "0x151f7c75"
      ]
    },
    "240": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "241": {
      "op": "concat",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "242": {
      "op": "log",
      "stack_out": []
    },
    "243": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "244": {
      "op": "return"
    },
    "245": {
      "block": "main_verify_ecdsa_decompress_k1_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "247": {
      "op": "!",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "248": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "249": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "251": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "252": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "255": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "258": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_decompress_k1",
      "op": "callsub verify_ecdsa_decompress_k1",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "261": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "263": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%8#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%8#0"
      ]
    },
    "264": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "as_bytes%12#0"
      ]
    },
    "265": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%8#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%8#0"
      ]
    },
    "268": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "length_uint16%8#0",
        "elements_to_encode%4#0"
      ]
    },
    "270": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%8#0"
      ]
    },
    "271": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%5#0 (copy)",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%8#0",
        "elements_to_encode%5#0 (copy)"
      ]
    },
    "273": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%8#0",
        "length%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%8#0",
        "length%9#0"
      ]
    },
    "274": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "elements_to_encode%5#0",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%8#0",
        "as_bytes%13#0"
      ]
    },
    "275": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%8#0",
        "length_uint16%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%8#0",
        "length_uint16%9#0"
      ]
    },
    "278": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%8#0",
        "length_uint16%9#0",
        "elements_to_encode%5#0"
      ]
    },
    "280": {
      "op": "concat",
      "defined_out": [
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0"
      ]
    },
    "281": {
      "op": "dig 1",
      "defined_out": [
        "encoded_value%8#0",
        "encoded_value%8#0 (copy)",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_value%8#0 (copy)"
      ]
    },
    "283": {
      "op": "len",
      "defined_out": [
        "data_length%4#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "data_length%4#0"
      ]
    },
    "284": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "data_length%4#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "data_length%4#0",
        "4"
      ]
    },
    "285": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%7#0"
      ]
    },
    "286": {
      "op": "itob",
      "defined_out": [
        "as_bytes%15#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "as_bytes%15#0"
      ]
    },
    "287": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%5#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%5#0"
      ]
    },
    "290": {
      "op": "bytec_2 // 0x0004",
      "defined_out": [
        "0x0004",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%5#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%5#0",
        "0x0004"
      ]
    },
    "291": {
      "op": "swap",
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "0x0004",
        "offset_as_uint16%5#0"
      ]
    },
    "292": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "293": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%9#0",
        "encoded_tuple_buffer%12#0",
        "encoded_value%8#0"
      ]
    },
    "295": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "296": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%9#0"
      ]
    },
    "297": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%14#0"
      ]
    },
    "298": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%14#0",
        "0x151f7c75"
      ]
    },
    "299": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "300": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "301": {
      "op": "log",
      "stack_out": []
    },
    "302": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "303": {
      "op": "return"
    },
    "304": {
      "block": "main_verify_ecdsa_recover_r1_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "306": {
      "op": "!",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "307": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "308": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "310": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "311": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "314": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "317": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0"
      ]
    },
    "320": {
      "op": "btoi",
      "defined_out": [
        "tmp%111#0",
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%113#0"
      ]
    },
    "321": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%111#0",
        "tmp%113#0",
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%113#0",
        "tmp%114#0"
      ]
    },
    "324": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%111#0",
        "tmp%113#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%113#0",
        "tmp%115#0"
      ]
    },
    "327": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%111#0",
        "tmp%113#0",
        "tmp%115#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%113#0",
        "tmp%115#0",
        "tmp%116#0"
      ]
    },
    "330": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%111#0",
        "tmp%113#0",
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%113#0",
        "tmp%115#0",
        "tmp%117#0"
      ]
    },
    "333": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_recover_r1",
      "op": "callsub verify_ecdsa_recover_r1",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "336": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "338": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%6#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%6#0"
      ]
    },
    "339": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "as_bytes%8#0"
      ]
    },
    "340": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%6#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%6#0"
      ]
    },
    "343": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "length_uint16%6#0",
        "elements_to_encode%2#0"
      ]
    },
    "345": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%6#0"
      ]
    },
    "346": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%6#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "348": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%6#0",
        "length%7#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%6#0",
        "length%7#0"
      ]
    },
    "349": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "elements_to_encode%3#0",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%6#0",
        "as_bytes%9#0"
      ]
    },
    "350": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%6#0",
        "length_uint16%7#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%6#0",
        "length_uint16%7#0"
      ]
    },
    "353": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%6#0",
        "length_uint16%7#0",
        "elements_to_encode%3#0"
      ]
    },
    "355": {
      "op": "concat",
      "defined_out": [
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0"
      ]
    },
    "356": {
      "op": "dig 1",
      "defined_out": [
        "encoded_value%6#0",
        "encoded_value%6#0 (copy)",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%6#0 (copy)"
      ]
    },
    "358": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "data_length%2#0"
      ]
    },
    "359": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "data_length%2#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "data_length%2#0",
        "4"
      ]
    },
    "360": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "current_tail_offset%4#0"
      ]
    },
    "361": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "as_bytes%11#0"
      ]
    },
    "362": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "offset_as_uint16%3#0"
      ]
    },
    "365": {
      "op": "bytec_2 // 0x0004",
      "defined_out": [
        "0x0004",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "offset_as_uint16%3#0",
        "0x0004"
      ]
    },
    "366": {
      "op": "swap",
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "0x0004",
        "offset_as_uint16%3#0"
      ]
    },
    "367": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "368": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%7#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%6#0"
      ]
    },
    "370": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "371": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%7#0"
      ]
    },
    "372": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0"
      ]
    },
    "373": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "0x151f7c75"
      ]
    },
    "374": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "375": {
      "op": "concat",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "376": {
      "op": "log",
      "stack_out": []
    },
    "377": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "378": {
      "op": "return"
    },
    "379": {
      "block": "main_verify_ecdsa_recover_k1_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "381": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "382": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "383": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "385": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "386": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "389": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "392": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "tmp%99#0"
      ]
    },
    "395": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "tmp%100#0"
      ]
    },
    "396": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%100#0",
        "tmp%101#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "399": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%100#0",
        "tmp%102#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "tmp%100#0",
        "tmp%102#0"
      ]
    },
    "402": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%100#0",
        "tmp%102#0",
        "tmp%103#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "tmp%100#0",
        "tmp%102#0",
        "tmp%103#0"
      ]
    },
    "405": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%100#0",
        "tmp%102#0",
        "tmp%104#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "tmp%100#0",
        "tmp%102#0",
        "tmp%104#0"
      ]
    },
    "408": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_recover_k1",
      "op": "callsub verify_ecdsa_recover_k1",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "411": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0 (copy)"
      ]
    },
    "413": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "length%4#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "length%4#0"
      ]
    },
    "414": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "as_bytes%4#0"
      ]
    },
    "415": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "length_uint16%4#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "length_uint16%4#0"
      ]
    },
    "418": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%1#0",
        "length_uint16%4#0",
        "elements_to_encode%0#0"
      ]
    },
    "420": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "encoded_value%4#0"
      ]
    },
    "421": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "encoded_value%4#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "423": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "encoded_value%4#0",
        "length%5#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "encoded_value%4#0",
        "length%5#0"
      ]
    },
    "424": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "elements_to_encode%1#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "encoded_value%4#0",
        "as_bytes%5#0"
      ]
    },
    "425": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "encoded_value%4#0",
        "length_uint16%5#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "encoded_value%4#0",
        "length_uint16%5#0"
      ]
    },
    "428": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%4#0",
        "length_uint16%5#0",
        "elements_to_encode%1#0"
      ]
    },
    "430": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0"
      ]
    },
    "431": {
      "op": "dig 1",
      "defined_out": [
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "encoded_value%4#0 (copy)"
      ]
    },
    "433": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "data_length%0#0"
      ]
    },
    "434": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "data_length%0#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "data_length%0#0",
        "4"
      ]
    },
    "435": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "current_tail_offset%1#0"
      ]
    },
    "436": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "as_bytes%7#0"
      ]
    },
    "437": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "offset_as_uint16%1#0"
      ]
    },
    "440": {
      "op": "bytec_2 // 0x0004",
      "defined_out": [
        "0x0004",
        "encoded_value%4#0",
        "encoded_value%5#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "offset_as_uint16%1#0",
        "0x0004"
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "0x0004",
        "offset_as_uint16%1#0"
      ]
    },
    "442": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%4#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "443": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%4#0"
      ]
    },
    "445": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "446": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%5#0"
      ]
    },
    "447": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "448": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x151f7c75"
      ]
    },
    "449": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "450": {
      "op": "concat",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "451": {
      "op": "log",
      "stack_out": []
    },
    "452": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "453": {
      "op": "return"
    },
    "454": {
      "block": "main_verify_ecdsa_verify_r1_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "456": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "457": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "458": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "460": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "461": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "464": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "467": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "tmp%84#0"
      ]
    },
    "470": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%83#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "tmp%85#0"
      ]
    },
    "473": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%86#0"
      ]
    },
    "476": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%87#0"
      ]
    },
    "479": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%87#0",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%87#0",
        "tmp%88#0"
      ]
    },
    "482": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%87#0",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%87#0",
        "tmp%89#0"
      ]
    },
    "485": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%90#0"
      ]
    },
    "488": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "tmp%85#0",
        "tmp%87#0",
        "tmp%89#0",
        "tmp%91#0"
      ]
    },
    "491": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_verify_r1",
      "op": "callsub verify_ecdsa_verify_r1",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "494": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00"
      ]
    },
    "495": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00",
        "0"
      ]
    },
    "496": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%5#0"
      ]
    },
    "498": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "499": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "500": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "501": {
      "op": "concat",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "502": {
      "op": "log",
      "stack_out": []
    },
    "503": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "504": {
      "op": "return"
    },
    "505": {
      "block": "main_verify_ecdsa_verify_k1_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "507": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "508": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "509": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "511": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "512": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "515": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "518": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%68#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0"
      ]
    },
    "521": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%68#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%70#0"
      ]
    },
    "524": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%71#0"
      ]
    },
    "527": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%72#0"
      ]
    },
    "530": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%72#0",
        "tmp%73#0"
      ]
    },
    "533": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%72#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%72#0",
        "tmp%74#0"
      ]
    },
    "536": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%72#0",
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%72#0",
        "tmp%74#0",
        "tmp%75#0"
      ]
    },
    "539": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%72#0",
        "tmp%74#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%70#0",
        "tmp%72#0",
        "tmp%74#0",
        "tmp%76#0"
      ]
    },
    "542": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_verify_k1",
      "op": "callsub verify_ecdsa_verify_k1",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "545": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "546": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "547": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "549": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "550": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "551": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "552": {
      "op": "concat",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "553": {
      "op": "log",
      "stack_out": []
    },
    "554": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "555": {
      "op": "return"
    },
    "556": {
      "block": "main_verify_ed25519verify_bare_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "558": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "559": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "560": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "562": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "563": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "566": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "569": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%57#0"
      ]
    },
    "572": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%56#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%58#0"
      ]
    },
    "575": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%56#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%58#0",
        "tmp%59#0"
      ]
    },
    "578": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%56#0",
        "tmp%58#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%56#0",
        "tmp%58#0",
        "tmp%60#0"
      ]
    },
    "581": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ed25519verify_bare",
      "op": "callsub verify_ed25519verify_bare",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "584": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "0x151f7c75"
      ]
    },
    "585": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%61#0"
      ]
    },
    "586": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "587": {
      "op": "log",
      "stack_out": []
    },
    "588": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "589": {
      "op": "return"
    },
    "590": {
      "block": "main_verify_ed25519verify_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "592": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "593": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "594": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "596": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "597": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "600": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "603": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "606": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%44#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0"
      ]
    },
    "609": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "612": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0",
        "tmp%48#0"
      ]
    },
    "615": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ed25519verify",
      "op": "callsub verify_ed25519verify",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "618": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "0x151f7c75"
      ]
    },
    "619": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%49#0"
      ]
    },
    "620": {
      "op": "concat",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "621": {
      "op": "log",
      "stack_out": []
    },
    "622": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "623": {
      "op": "return"
    },
    "624": {
      "block": "main_verify_sha512_256_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "626": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "627": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "628": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "630": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "631": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "634": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "637": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "640": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%37#0"
      ]
    },
    "641": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_sha512_256",
      "op": "callsub verify_sha512_256",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "644": {
      "op": "dup",
      "defined_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "645": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length%3#0"
      ]
    },
    "646": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "as_bytes%3#0"
      ]
    },
    "647": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length_uint16%3#0"
      ]
    },
    "650": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%3#0"
      ]
    },
    "651": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "652": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "653": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "654": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "655": {
      "op": "log",
      "stack_out": []
    },
    "656": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "657": {
      "op": "return"
    },
    "658": {
      "block": "main_verify_keccak_256_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "660": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "661": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "662": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "664": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "665": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "668": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "671": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "674": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "675": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_keccak_256",
      "op": "callsub verify_keccak_256",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "678": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "679": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%2#0"
      ]
    },
    "680": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%2#0"
      ]
    },
    "681": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%2#0"
      ]
    },
    "684": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ]
    },
    "685": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "686": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "687": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "688": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "689": {
      "op": "log",
      "stack_out": []
    },
    "690": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "691": {
      "op": "return"
    },
    "692": {
      "block": "main_verify_sha3_256_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "694": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "695": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "696": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "698": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "699": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "702": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "705": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "708": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "709": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_sha3_256",
      "op": "callsub verify_sha3_256",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "712": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "713": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "714": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "715": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "718": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "719": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "720": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "721": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "722": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "723": {
      "op": "log",
      "stack_out": []
    },
    "724": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "725": {
      "op": "return"
    },
    "726": {
      "block": "main_verify_sha256_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "728": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "729": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "730": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "732": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "733": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "736": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "739": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "742": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "743": {
      "callsub": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_sha256",
      "op": "callsub verify_sha256",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "746": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "747": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "748": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "749": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "752": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "753": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "754": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "755": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "756": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "757": {
      "op": "log",
      "stack_out": []
    },
    "758": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "759": {
      "op": "return"
    },
    "760": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "762": {
      "op": "bnz main_after_if_else@22",
      "stack_out": []
    },
    "765": {
      "op": "txn ApplicationID"
    },
    "767": {
      "op": "!"
    },
    "768": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "769": {
      "op": "intc_1 // 1"
    },
    "770": {
      "op": "return"
    },
    "771": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_sha256",
      "params": {
        "a#0": "bytes",
        "pad_size#0": "uint64"
      },
      "block": "verify_sha256",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "774": {
      "op": "frame_dig -1",
      "defined_out": [
        "pad_size#0 (copy)"
      ],
      "stack_out": [
        "pad_size#0 (copy)"
      ]
    },
    "776": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "777": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "779": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "780": {
      "op": "dup"
    },
    "781": {
      "op": "frame_bury -2",
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "783": {
      "op": "sha256",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "784": {
      "retsub": true,
      "op": "retsub"
    },
    "785": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_sha3_256",
      "params": {
        "a#0": "bytes",
        "pad_size#0": "uint64"
      },
      "block": "verify_sha3_256",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "788": {
      "op": "frame_dig -1",
      "defined_out": [
        "pad_size#0 (copy)"
      ],
      "stack_out": [
        "pad_size#0 (copy)"
      ]
    },
    "790": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "791": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "793": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "794": {
      "op": "dup"
    },
    "795": {
      "op": "frame_bury -2",
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "797": {
      "op": "sha3_256",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "798": {
      "retsub": true,
      "op": "retsub"
    },
    "799": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_keccak_256",
      "params": {
        "a#0": "bytes",
        "pad_size#0": "uint64"
      },
      "block": "verify_keccak_256",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "802": {
      "op": "frame_dig -1",
      "defined_out": [
        "pad_size#0 (copy)"
      ],
      "stack_out": [
        "pad_size#0 (copy)"
      ]
    },
    "804": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "805": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "807": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "808": {
      "op": "dup"
    },
    "809": {
      "op": "frame_bury -2",
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "811": {
      "op": "keccak256",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "812": {
      "retsub": true,
      "op": "retsub"
    },
    "813": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_sha512_256",
      "params": {
        "a#0": "bytes",
        "pad_size#0": "uint64"
      },
      "block": "verify_sha512_256",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "816": {
      "op": "frame_dig -1",
      "defined_out": [
        "pad_size#0 (copy)"
      ],
      "stack_out": [
        "pad_size#0 (copy)"
      ]
    },
    "818": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "819": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "821": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "822": {
      "op": "dup"
    },
    "823": {
      "op": "frame_bury -2",
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "825": {
      "op": "sha512_256",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "826": {
      "retsub": true,
      "op": "retsub"
    },
    "827": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ed25519verify",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes"
      },
      "block": "verify_ed25519verify",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "830": {
      "op": "pushint 1900 // 1900",
      "defined_out": [
        "1900"
      ],
      "stack_out": [
        "1900"
      ]
    },
    "833": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "1900"
      ],
      "stack_out": [
        "1900",
        "0"
      ]
    },
    "834": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "837": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "839": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "841": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "843": {
      "op": "ed25519verify",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "844": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x00"
      ]
    },
    "845": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "0x00",
        "0"
      ]
    },
    "846": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "result#0"
      ]
    },
    "848": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "849": {
      "retsub": true,
      "op": "retsub"
    },
    "850": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ed25519verify_bare",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes"
      },
      "block": "verify_ed25519verify_bare",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "853": {
      "op": "pushint 1900 // 1900",
      "defined_out": [
        "1900"
      ],
      "stack_out": [
        "1900"
      ]
    },
    "856": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "1900"
      ],
      "stack_out": [
        "1900",
        "0"
      ]
    },
    "857": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "860": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "862": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "864": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "866": {
      "op": "ed25519verify_bare",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "867": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x00"
      ]
    },
    "868": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "0x00",
        "0"
      ]
    },
    "869": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "result#0"
      ]
    },
    "871": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "872": {
      "retsub": true,
      "op": "retsub"
    },
    "873": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_verify_k1",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes",
        "e#0": "bytes"
      },
      "block": "verify_ecdsa_verify_k1",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "876": {
      "op": "intc_3 // 3000",
      "defined_out": [
        "3000"
      ],
      "stack_out": [
        "3000"
      ]
    },
    "877": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "3000"
      ],
      "stack_out": [
        "3000",
        "0"
      ]
    },
    "878": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "881": {
      "op": "frame_dig -5",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "883": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "885": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "887": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "889": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)",
        "e#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)",
        "e#0 (copy)"
      ]
    },
    "891": {
      "op": "ecdsa_verify Secp256k1",
      "defined_out": [
        "result_k1#0"
      ],
      "stack_out": [
        "result_k1#0"
      ]
    },
    "893": {
      "retsub": true,
      "op": "retsub"
    },
    "894": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_verify_r1",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes",
        "e#0": "bytes"
      },
      "block": "verify_ecdsa_verify_r1",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "897": {
      "op": "intc_3 // 3000",
      "defined_out": [
        "3000"
      ],
      "stack_out": [
        "3000"
      ]
    },
    "898": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "3000"
      ],
      "stack_out": [
        "3000",
        "0"
      ]
    },
    "899": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "902": {
      "op": "frame_dig -5",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "904": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "906": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "908": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "910": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)",
        "e#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)",
        "e#0 (copy)"
      ]
    },
    "912": {
      "op": "ecdsa_verify Secp256r1",
      "defined_out": [
        "result_r1#0"
      ],
      "stack_out": [
        "result_r1#0"
      ]
    },
    "914": {
      "retsub": true,
      "op": "retsub"
    },
    "915": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_recover_k1",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "verify_ecdsa_recover_k1",
      "stack_in": [],
      "op": "proto 4 2"
    },
    "918": {
      "op": "intc_3 // 3000",
      "defined_out": [
        "3000"
      ],
      "stack_out": [
        "3000"
      ]
    },
    "919": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "3000"
      ],
      "stack_out": [
        "3000",
        "0"
      ]
    },
    "920": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "923": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "925": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "927": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "929": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "931": {
      "op": "ecdsa_pk_recover Secp256k1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "933": {
      "retsub": true,
      "op": "retsub"
    },
    "934": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_recover_r1",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "verify_ecdsa_recover_r1",
      "stack_in": [],
      "op": "proto 4 2"
    },
    "937": {
      "op": "intc_3 // 3000",
      "defined_out": [
        "3000"
      ],
      "stack_out": [
        "3000"
      ]
    },
    "938": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "3000"
      ],
      "stack_out": [
        "3000",
        "0"
      ]
    },
    "939": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "942": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "944": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "946": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "948": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "950": {
      "op": "ecdsa_pk_recover Secp256r1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "952": {
      "retsub": true,
      "op": "retsub"
    },
    "953": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_decompress_k1",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_ecdsa_decompress_k1",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "956": {
      "op": "pushint 700 // 700",
      "defined_out": [
        "700"
      ],
      "stack_out": [
        "700"
      ]
    },
    "959": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "700"
      ],
      "stack_out": [
        "700",
        "0"
      ]
    },
    "960": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "963": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "965": {
      "op": "ecdsa_pk_decompress Secp256k1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "967": {
      "retsub": true,
      "op": "retsub"
    },
    "968": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_ecdsa_decompress_r1",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_ecdsa_decompress_r1",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "971": {
      "op": "pushint 700 // 700",
      "defined_out": [
        "700"
      ],
      "stack_out": [
        "700"
      ]
    },
    "974": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "700"
      ],
      "stack_out": [
        "700",
        "0"
      ]
    },
    "975": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "978": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "980": {
      "op": "ecdsa_pk_decompress Secp256r1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "982": {
      "retsub": true,
      "op": "retsub"
    },
    "983": {
      "subroutine": "tests.artifacts.CryptoOps.contract.CryptoOpsContract.verify_vrf_verify",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes"
      },
      "block": "verify_vrf_verify",
      "stack_in": [],
      "op": "proto 3 2"
    },
    "986": {
      "op": "pushint 5700 // 5700",
      "defined_out": [
        "5700"
      ],
      "stack_out": [
        "5700"
      ]
    },
    "989": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "5700"
      ],
      "stack_out": [
        "5700",
        "0"
      ]
    },
    "990": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "993": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "995": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "997": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "999": {
      "op": "vrf_verify VrfAlgorand",
      "defined_out": [
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0"
      ]
    },
    "1001": {
      "retsub": true,
      "op": "retsub"
    },
    "1002": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1005": {
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "1007": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "1009": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "1010": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "frame_dig 0"
    },
    "1012": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "1014": {
      "op": ">",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "1015": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "1018": {
      "op": "itxn_begin"
    },
    "1019": {
      "op": "pushint 6 // appl"
    },
    "1021": {
      "op": "itxn_field TypeEnum"
    },
    "1023": {
      "op": "pushint 5 // DeleteApplication"
    },
    "1025": {
      "op": "itxn_field OnCompletion"
    },
    "1027": {
      "op": "bytec_3 // 0x068101"
    },
    "1028": {
      "op": "itxn_field ApprovalProgram"
    },
    "1030": {
      "op": "bytec_3 // 0x068101"
    },
    "1031": {
      "op": "itxn_field ClearStateProgram"
    },
    "1033": {
      "op": "frame_dig -1"
    },
    "1035": {
      "op": "switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4"
    },
    "1041": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "1042": {
      "op": "b ensure_budget_while_top@1"
    },
    "1045": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "1047": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "1049": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "1052": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "1053": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "1055": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "1058": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    }
  }
}