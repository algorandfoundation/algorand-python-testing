#pragma version 10
#pragma typetrack false

// tests.artifacts.StateMutations.statemutations.StateMutations.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock "box" "no_proxy" 0x0000 "glob_assign" "glob" "loc" 0x00020000000000000001000a000362617a 0x00086d6f646966696564 "map"
    txn ApplicationID
    bnz main_after_if_else@2
    // tests/artifacts/StateMutations/statemutations.py:24
    // self.no_proxy = MyArray()
    bytec_1 // "no_proxy"
    bytec_2 // 0x0000
    app_global_put

main_after_if_else@2:
    // tests/artifacts/StateMutations/statemutations.py:22
    // class StateMutations(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0x526e8bbf 0x95fef13d 0x0c29444b // method "append()void", method "modify()void", method "get()(uint64,string)[]"
    txna ApplicationArgs 0
    match main_append_route@5 main_modify_route@6 main_get_route@7

main_after_if_else@11:
    // tests/artifacts/StateMutations/statemutations.py:22
    // class StateMutations(ARC4Contract):
    intc_0 // 0
    return

main_get_route@7:
    // tests/artifacts/StateMutations/statemutations.py:66
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_modify_route@6:
    // tests/artifacts/StateMutations/statemutations.py:52
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub modify
    intc_1 // 1
    return

main_append_route@5:
    // tests/artifacts/StateMutations/statemutations.py:39
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub append
    intc_1 // 1
    return

main_bare_routing@8:
    // tests/artifacts/StateMutations/statemutations.py:22
    // class StateMutations(ARC4Contract):
    txn OnCompletion
    switch main___algopy_default_create@10 main_opt_in@9
    b main_after_if_else@11

main_opt_in@9:
    // tests/artifacts/StateMutations/statemutations.py:31
    // @arc4.baremethod(allow_actions=["OptIn"])
    txn ApplicationID
    assert // can only call when not creating
    callsub opt_in
    intc_1 // 1
    return

main___algopy_default_create@10:
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
dynamic_array_concat_dynamic_element:
    proto 4 1
    pushbytes ""
    dup
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -4
    intc_2 // 2
    *
    intc_0 // 0

dynamic_array_concat_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz dynamic_array_concat_dynamic_element_after_for@4
    frame_dig -3
    frame_dig 4
    dup
    cover 2
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1
    intc_2 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_after_for@4:
    frame_dig -3
    len
    frame_bury 0
    intc_0 // 0
    frame_bury 4

dynamic_array_concat_dynamic_element_for_header@5:
    frame_dig 4
    frame_dig 2
    <
    bz dynamic_array_concat_dynamic_element_after_for@8
    frame_dig -1
    frame_dig 4
    dup
    cover 2
    extract_uint16
    frame_dig 0
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1
    intc_2 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_after_for@8:
    frame_dig -4
    frame_dig -2
    +
    itob
    extract 6 2
    frame_dig 1
    concat
    frame_dig -3
    frame_dig 3
    frame_dig 0
    substring3
    concat
    frame_dig -1
    len
    frame_dig -1
    frame_dig 2
    uncover 2
    substring3
    concat
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
dynamic_array_replace_dynamic_element:
    proto 3 1
    frame_dig -3
    substring 0 2
    dup
    btoi
    frame_dig -3
    extract 2 0
    frame_dig -1
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    frame_dig -1
    intc_1 // 1
    +
    intc_2 // 2
    *
    dup
    cover 4
    dig 2
    swap
    extract_uint16
    dig 2
    len
    dig 4
    frame_dig -1
    -
    intc_1 // 1
    -
    dig 1
    uncover 3
    uncover 2
    select
    dup
    dig 3
    -
    cover 5
    frame_dig -2
    len
    cover 5
    dig 3
    intc_0 // 0
    uncover 4
    substring3
    frame_dig -2
    concat
    uncover 3
    uncover 2
    uncover 3
    substring3
    concat
    swap
    intc_2 // 2
    *

dynamic_array_replace_dynamic_element_for_header@2:
    frame_dig 1
    frame_dig 5
    <
    bz dynamic_array_replace_dynamic_element_after_for@5
    frame_dig 4
    dup
    frame_dig 1
    dup
    cover 3
    extract_uint16
    frame_dig 3
    +
    frame_dig 2
    -
    itob
    extract 6 2
    dig 2
    swap
    replace3
    frame_bury 4
    intc_2 // 2
    +
    frame_bury 1
    b dynamic_array_replace_dynamic_element_for_header@2

dynamic_array_replace_dynamic_element_after_for@5:
    frame_dig 0
    frame_dig 4
    concat
    frame_bury 0
    retsub


// tests.artifacts.StateMutations.statemutations.StateMutations.opt_in() -> void:
opt_in:
    // tests/artifacts/StateMutations/statemutations.py:33
    // self.glob_assign.value = MyArray()
    bytec_3 // "glob_assign"
    bytec_2 // 0x0000
    app_global_put
    // tests/artifacts/StateMutations/statemutations.py:34
    // self.glob.value = MyArray()
    bytec 4 // "glob"
    bytec_2 // 0x0000
    app_global_put
    // tests/artifacts/StateMutations/statemutations.py:35
    // self.box.value = MyArray()
    bytec_0 // "box"
    box_del
    pop
    bytec_0 // "box"
    bytec_2 // 0x0000
    box_put
    // tests/artifacts/StateMutations/statemutations.py:36
    // self.loc[Txn.sender] = MyArray()
    txn Sender
    bytec 5 // "loc"
    bytec_2 // 0x0000
    app_local_put
    // tests/artifacts/StateMutations/statemutations.py:37
    // self.map[Txn.sender] = MyArray()
    bytec 8 // "map"
    txn Sender
    concat
    dup
    box_del
    pop
    bytec_2 // 0x0000
    box_put
    retsub


// tests.artifacts.StateMutations.statemutations.StateMutations.append() -> void:
append:
    // tests/artifacts/StateMutations/statemutations.py:42
    // arr = self.glob_assign.value.copy()
    intc_0 // 0
    bytec_3 // "glob_assign"
    app_global_get_ex
    assert // check self.glob_assign exists
    // tests/artifacts/StateMutations/statemutations.py:43
    // arr.append(struct.copy())
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    intc_1 // 1
    bytec 6 // 0x00020000000000000001000a000362617a
    callsub dynamic_array_concat_dynamic_element
    // tests/artifacts/StateMutations/statemutations.py:45
    // self.glob_assign.value = arr.copy()
    bytec_3 // "glob_assign"
    swap
    app_global_put
    // tests/artifacts/StateMutations/statemutations.py:46
    // self.no_proxy.append(struct.copy())
    intc_0 // 0
    bytec_1 // "no_proxy"
    app_global_get_ex
    assert // check self.no_proxy exists
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    intc_1 // 1
    bytec 6 // 0x00020000000000000001000a000362617a
    callsub dynamic_array_concat_dynamic_element
    bytec_1 // "no_proxy"
    swap
    app_global_put
    // tests/artifacts/StateMutations/statemutations.py:47
    // self.glob.value.append(struct.copy())
    intc_0 // 0
    bytec 4 // "glob"
    app_global_get_ex
    assert // check self.glob exists
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    intc_1 // 1
    bytec 6 // 0x00020000000000000001000a000362617a
    callsub dynamic_array_concat_dynamic_element
    bytec 4 // "glob"
    swap
    app_global_put
    // tests/artifacts/StateMutations/statemutations.py:48
    // self.loc[Txn.sender].append(struct.copy())
    txn Sender
    dup
    intc_0 // 0
    bytec 5 // "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    intc_1 // 1
    bytec 6 // 0x00020000000000000001000a000362617a
    callsub dynamic_array_concat_dynamic_element
    bytec 5 // "loc"
    swap
    app_local_put
    // tests/artifacts/StateMutations/statemutations.py:49
    // self.box.value.append(struct.copy())
    bytec_0 // "box"
    box_get
    assert // check self.box exists
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    intc_1 // 1
    bytec 6 // 0x00020000000000000001000a000362617a
    callsub dynamic_array_concat_dynamic_element
    bytec_0 // "box"
    box_del
    pop
    bytec_0 // "box"
    swap
    box_put
    // tests/artifacts/StateMutations/statemutations.py:50
    // self.map[Txn.sender].append(struct.copy())
    bytec 8 // "map"
    txn Sender
    concat
    dup
    box_get
    assert // check self.map entry exists
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    intc_1 // 1
    bytec 6 // 0x00020000000000000001000a000362617a
    callsub dynamic_array_concat_dynamic_element
    dig 1
    box_del
    pop
    box_put
    retsub


// tests.artifacts.StateMutations.statemutations.StateMutations.modify() -> void:
modify:
    // tests/artifacts/StateMutations/statemutations.py:56
    // arr = self.glob_assign.value.copy()
    intc_0 // 0
    bytec_3 // "glob_assign"
    app_global_get_ex
    assert // check self.glob_assign exists
    // tests/artifacts/StateMutations/statemutations.py:57
    // arr[0].baz = modified
    dup
    extract 2 0
    dup
    intc_0 // 0
    extract_uint16
    dig 2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    - // on error: Index access is out of bounds
    dig 2
    len
    dig 3
    intc_2 // 2
    extract_uint16
    uncover 2
    select
    substring3
    dup
    intc_3 // 8
    extract_uint16
    intc_0 // 0
    swap
    extract3
    // tests/artifacts/StateMutations/statemutations.py:54
    // modified = arc4.String("modified")
    bytec 7 // 0x00086d6f646966696564
    // tests/artifacts/StateMutations/statemutations.py:57
    // arr[0].baz = modified
    concat
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    // tests/artifacts/StateMutations/statemutations.py:58
    // self.glob_assign.value = arr.copy()
    bytec_3 // "glob_assign"
    swap
    app_global_put
    // tests/artifacts/StateMutations/statemutations.py:60
    // self.no_proxy[0].baz = modified
    intc_0 // 0
    bytec_1 // "no_proxy"
    app_global_get_ex
    assert // check self.no_proxy exists
    dup
    extract 2 0
    dup
    intc_0 // 0
    extract_uint16
    dig 2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    - // on error: Index access is out of bounds
    dig 2
    len
    dig 3
    intc_2 // 2
    extract_uint16
    uncover 2
    select
    substring3
    dup
    intc_3 // 8
    extract_uint16
    intc_0 // 0
    swap
    extract3
    // tests/artifacts/StateMutations/statemutations.py:54
    // modified = arc4.String("modified")
    bytec 7 // 0x00086d6f646966696564
    // tests/artifacts/StateMutations/statemutations.py:60
    // self.no_proxy[0].baz = modified
    concat
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    bytec_1 // "no_proxy"
    swap
    app_global_put
    // tests/artifacts/StateMutations/statemutations.py:61
    // self.glob.value[0].baz = modified
    intc_0 // 0
    bytec 4 // "glob"
    app_global_get_ex
    assert // check self.glob exists
    dup
    extract 2 0
    dup
    intc_0 // 0
    extract_uint16
    dig 2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    - // on error: Index access is out of bounds
    dig 2
    len
    dig 3
    intc_2 // 2
    extract_uint16
    uncover 2
    select
    substring3
    dup
    intc_3 // 8
    extract_uint16
    intc_0 // 0
    swap
    extract3
    // tests/artifacts/StateMutations/statemutations.py:54
    // modified = arc4.String("modified")
    bytec 7 // 0x00086d6f646966696564
    // tests/artifacts/StateMutations/statemutations.py:61
    // self.glob.value[0].baz = modified
    concat
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    bytec 4 // "glob"
    swap
    app_global_put
    // tests/artifacts/StateMutations/statemutations.py:62
    // self.loc[Txn.sender][0].baz = modified
    txn Sender
    dup
    intc_0 // 0
    bytec 5 // "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    dup
    extract 2 0
    dup
    intc_0 // 0
    extract_uint16
    dig 2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    - // on error: Index access is out of bounds
    dig 2
    len
    dig 3
    intc_2 // 2
    extract_uint16
    uncover 2
    select
    substring3
    dup
    intc_3 // 8
    extract_uint16
    intc_0 // 0
    swap
    extract3
    // tests/artifacts/StateMutations/statemutations.py:54
    // modified = arc4.String("modified")
    bytec 7 // 0x00086d6f646966696564
    // tests/artifacts/StateMutations/statemutations.py:62
    // self.loc[Txn.sender][0].baz = modified
    concat
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    bytec 5 // "loc"
    swap
    app_local_put
    // tests/artifacts/StateMutations/statemutations.py:63
    // self.box.value[0].baz = modified
    bytec_0 // "box"
    box_get
    assert // check self.box exists
    dup
    extract 2 0
    dup
    intc_0 // 0
    extract_uint16
    dig 2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    - // on error: Index access is out of bounds
    dig 2
    len
    dig 3
    intc_2 // 2
    extract_uint16
    uncover 2
    select
    substring3
    dup
    intc_3 // 8
    extract_uint16
    intc_0 // 0
    swap
    extract3
    // tests/artifacts/StateMutations/statemutations.py:54
    // modified = arc4.String("modified")
    bytec 7 // 0x00086d6f646966696564
    // tests/artifacts/StateMutations/statemutations.py:63
    // self.box.value[0].baz = modified
    concat
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    bytec_0 // "box"
    box_del
    pop
    bytec_0 // "box"
    swap
    box_put
    // tests/artifacts/StateMutations/statemutations.py:64
    // self.map[Txn.sender][0].baz = modified
    bytec 8 // "map"
    txn Sender
    concat
    dup
    box_get
    assert // check self.map entry exists
    dup
    extract 2 0
    dup
    intc_0 // 0
    extract_uint16
    dig 2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    - // on error: Index access is out of bounds
    dig 2
    len
    dig 3
    intc_2 // 2
    extract_uint16
    uncover 2
    select
    substring3
    dup
    intc_3 // 8
    extract_uint16
    intc_0 // 0
    swap
    extract3
    // tests/artifacts/StateMutations/statemutations.py:54
    // modified = arc4.String("modified")
    bytec 7 // 0x00086d6f646966696564
    // tests/artifacts/StateMutations/statemutations.py:64
    // self.map[Txn.sender][0].baz = modified
    concat
    intc_0 // 0
    callsub dynamic_array_replace_dynamic_element
    dig 1
    box_del
    pop
    box_put
    retsub


// tests.artifacts.StateMutations.statemutations.StateMutations.get() -> bytes:
get:
    // tests/artifacts/StateMutations/statemutations.py:68
    // a0 = self.no_proxy.copy()
    intc_0 // 0
    bytec_1 // "no_proxy"
    app_global_get_ex
    assert // check self.no_proxy exists
    // tests/artifacts/StateMutations/statemutations.py:69
    // a1 = self.glob_assign.value.copy()
    intc_0 // 0
    bytec_3 // "glob_assign"
    app_global_get_ex
    assert // check self.glob_assign exists
    // tests/artifacts/StateMutations/statemutations.py:70
    // a2 = self.glob.value.copy()
    intc_0 // 0
    bytec 4 // "glob"
    app_global_get_ex
    assert // check self.glob exists
    // tests/artifacts/StateMutations/statemutations.py:71
    // a3 = self.loc[Txn.sender].copy()
    txn Sender
    intc_0 // 0
    bytec 5 // "loc"
    app_local_get_ex
    assert // check self.loc exists for account
    // tests/artifacts/StateMutations/statemutations.py:72
    // a4 = self.box.value.copy()
    bytec_0 // "box"
    box_get
    assert // check self.box exists
    // tests/artifacts/StateMutations/statemutations.py:73
    // a5 = self.map[Txn.sender].copy()
    bytec 8 // "map"
    txn Sender
    concat
    box_get
    assert // check self.map entry exists
    // tests/artifacts/StateMutations/statemutations.py:75
    // assert a0 == a1, "expected global assign == no_proxy"
    dig 5
    uncover 5
    ==
    assert // expected global assign == no_proxy
    // tests/artifacts/StateMutations/statemutations.py:76
    // assert a0 == a2, "expected global == no_proxy"
    dig 4
    uncover 4
    ==
    assert // expected global == no_proxy
    // tests/artifacts/StateMutations/statemutations.py:77
    // assert a0 == a3, "expected local == no_proxy"
    dig 3
    uncover 3
    ==
    assert // expected local == no_proxy
    // tests/artifacts/StateMutations/statemutations.py:78
    // assert a0 == a4, "expected box == no_proxy"
    dig 2
    uncover 2
    ==
    assert // expected box == no_proxy
    // tests/artifacts/StateMutations/statemutations.py:79
    // assert a0 == a5, "expected map == no_proxy"
    dig 1
    ==
    assert // expected map == no_proxy
    // tests/artifacts/StateMutations/statemutations.py:80
    // return a0
    retsub
