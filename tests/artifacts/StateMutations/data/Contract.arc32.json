{
    "hints": {
        "append()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "modify()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get()(uint64,string)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0cy5hcnRpZmFjdHMuU3RhdGVNdXRhdGlvbnMuY29udHJhY3QuQ29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHRlc3RzL2FydGlmYWN0cy9TdGF0ZU11dGF0aW9ucy9jb250cmFjdC5weToyMgogICAgLy8gY2xhc3MgQ29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "glob": {
                    "type": "bytes",
                    "key": "glob"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "loc": {
                    "type": "bytes",
                    "key": "loc"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "Contract",
        "methods": [
            {
                "name": "append",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "modify",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,string)[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "opt_in": "CALL",
        "no_op": "CREATE"
    }
}