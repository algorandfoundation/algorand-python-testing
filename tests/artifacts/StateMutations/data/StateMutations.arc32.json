{
    "hints": {
        "append()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "modify()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get()(uint64,string)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "glob": {
                    "type": "bytes",
                    "key": "glob"
                },
                "glob_assign": {
                    "type": "bytes",
                    "key": "glob_assign"
                },
                "no_proxy": {
                    "type": "bytes",
                    "key": "no_proxy"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "loc": {
                    "type": "bytes",
                    "key": "loc"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "StateMutations",
        "methods": [
            {
                "name": "append",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "modify",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,string)[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "opt_in": "CALL",
        "no_op": "CREATE"
    }
}