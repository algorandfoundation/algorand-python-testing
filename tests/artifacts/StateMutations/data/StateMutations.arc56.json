{
    "name": "StateMutations",
    "structs": {},
    "methods": [
        {
            "name": "append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "modify",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get",
            "args": [],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "no_proxy": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "bm9fcHJveHk="
                },
                "glob_assign": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Z2xvYl9hc3NpZ24="
                },
                "glob": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Z2xvYg=="
                }
            },
            "local": {
                "loc": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "bG9j"
                }
            },
            "box": {
                "box": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Ym94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "map": {
                    "keyType": "address",
                    "valueType": "(uint64,string)[]",
                    "prefix": "bWFw"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "OptIn"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        95
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        174
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        139
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        528,
                        797,
                        933
                    ],
                    "errorMessage": "check self.box exists"
                },
                {
                    "pc": [
                        483,
                        686,
                        923
                    ],
                    "errorMessage": "check self.glob exists"
                },
                {
                    "pc": [
                        442,
                        579,
                        918
                    ],
                    "errorMessage": "check self.glob_assign exists"
                },
                {
                    "pc": [
                        508,
                        744,
                        930
                    ],
                    "errorMessage": "check self.loc exists for account"
                },
                {
                    "pc": [
                        555,
                        857,
                        940
                    ],
                    "errorMessage": "check self.map entry exists"
                },
                {
                    "pc": [
                        462,
                        632,
                        914
                    ],
                    "errorMessage": "check self.no_proxy exists"
                },
                {
                    "pc": [
                        964
                    ],
                    "errorMessage": "expected box == no_proxy"
                },
                {
                    "pc": [
                        952
                    ],
                    "errorMessage": "expected global == no_proxy"
                },
                {
                    "pc": [
                        946
                    ],
                    "errorMessage": "expected global assign == no_proxy"
                },
                {
                    "pc": [
                        958
                    ],
                    "errorMessage": "expected local == no_proxy"
                },
                {
                    "pc": [
                        968
                    ],
                    "errorMessage": "expected map == no_proxy"
                },
                {
                    "pc": [
                        595,
                        621,
                        648,
                        674,
                        702,
                        728,
                        760,
                        786,
                        813,
                        839,
                        873,
                        899
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        587,
                        640,
                        694,
                        752,
                        805,
                        865
                    ],
                    "errorMessage": "invalid array length header"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAECCCYJA2JveAhub19wcm94eQIAAAtnbG9iX2Fzc2lnbgRnbG9iA2xvYxEAAgAAAAAAAAABAAoAA2JhegoACG1vZGlmaWVkA21hcDEYQAADKSpnMRtBACQxGRREMRhEggMEUm6LvwSV/vE9BAwpREs2GgCOAwE4AcEDEAAxGY0CACMAAQAxGEQrKmcnBCpnKLxIKCq/MQAnBSpmJwgxAFBJvEgqvyNDMRgURCNDigQBgABJi/4kC4v8JAsiiwSLAwxBAByL/YsESU4CWYsCCBZXBgKLAUxQjAEkCIwEQv/ci/0VjAAijASLBIsCDEEAHIv/iwRJTgJZiwAIFlcGAosBTFCMASQIjARC/9yL/Iv+CBZXBgKLAVCL/YsDiwBSUIv/FYv/iwJPAlJQjACJigMBi/1RAAJJF4v9VwIAi/8kC0sBTFmL/yMIJAtLAksBWUsDFUsFi/8JIwlLAU8DTwJNSUsECU4Gi/4VTgZLBCJPBVKL/lBPBE8CTwNSUE4CTCQLTIsFiwQMQQAgiwNJiwVJTgNZiwIIiwEJFlcGAksCTF2MAyQIjAVC/9iLAIsDUIwAiSIrZURJIllMVwIAIycGiP7pK0xnIillREkiWUxXAgAjJwaI/tUpTGciJwRlREkiWUxXAgAjJwaI/sAnBExnMQBJIicFY0RJIllMVwIAIycGiP6nJwVMZii+REkiWUxXAgAjJwaI/pMovEgoTL8nCDEAUEm+REkiWUxXAgAjJwaI/nhLAbxIvyNDIitlRElXAgBLASJZSwEiWUsBIwlLAxVLBCRZTwJNTwNOAlJJJVkiTFgnB1BMRCKI/sArTGciKWVESVcCAEsBIllLASJZSwEjCUsDFUsEJFlPAk1PA04CUkklWSJMWCcHUExEIoj+iylMZyInBGVESVcCAEsBIllLASJZSwEjCUsDFUsEJFlPAk1PA04CUkklWSJMWCcHUExEIoj+VScETGcxAEkiJwVjRElXAgBLASJZSwEiWUsBIwlLAxVLBCRZTwJNTwNOAlJJJVkiTFgnB1BMRCKI/hsnBUxmKL5ESVcCAEsBIllLASJZSwEjCUsDFUsEJFlPAk1PA04CUkklWSJMWCcHUExEIoj95ii8SChMvycIMQBQSb5ESVcCAEsBIllLASJZSwEjCUsDFUsEJFlPAk1PA04CUkklWSJMWCcHUExEIoj9qksBvEi/I0MiKWVEIitlRCInBGVEMQAiJwVjRCi+RCcIMQBQvkRLBU8FEkRLBE8EEkRLA08DEkRLAk8CEkRLARJEgAQVH3x1TFCwI0M=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}