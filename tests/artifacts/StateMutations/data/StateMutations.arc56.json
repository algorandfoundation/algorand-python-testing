{
    "name": "StateMutations",
    "structs": {},
    "methods": [
        {
            "name": "append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "modify",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get",
            "args": [],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "no_proxy": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "bm9fcHJveHk="
                },
                "glob_assign": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Z2xvYl9hc3NpZ24="
                },
                "glob": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Z2xvYg=="
                }
            },
            "local": {
                "loc": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "bG9j"
                }
            },
            "box": {
                "box": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Ym94"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "map": {
                    "keyType": "address",
                    "valueType": "(uint64,string)[]",
                    "prefix": "bWFw"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "OptIn"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        95
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        174
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        139
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        525,
                        794,
                        930
                    ],
                    "errorMessage": "check self.box exists"
                },
                {
                    "pc": [
                        480,
                        683,
                        920
                    ],
                    "errorMessage": "check self.glob exists"
                },
                {
                    "pc": [
                        439,
                        576,
                        915
                    ],
                    "errorMessage": "check self.glob_assign exists"
                },
                {
                    "pc": [
                        505,
                        741,
                        927
                    ],
                    "errorMessage": "check self.loc exists for account"
                },
                {
                    "pc": [
                        552,
                        854,
                        937
                    ],
                    "errorMessage": "check self.map entry exists"
                },
                {
                    "pc": [
                        459,
                        629,
                        911
                    ],
                    "errorMessage": "check self.no_proxy exists"
                },
                {
                    "pc": [
                        961
                    ],
                    "errorMessage": "expected box == no_proxy"
                },
                {
                    "pc": [
                        949
                    ],
                    "errorMessage": "expected global == no_proxy"
                },
                {
                    "pc": [
                        943
                    ],
                    "errorMessage": "expected global assign == no_proxy"
                },
                {
                    "pc": [
                        955
                    ],
                    "errorMessage": "expected local == no_proxy"
                },
                {
                    "pc": [
                        965
                    ],
                    "errorMessage": "expected map == no_proxy"
                },
                {
                    "pc": [
                        592,
                        618,
                        645,
                        671,
                        699,
                        725,
                        757,
                        783,
                        810,
                        836,
                        870,
                        896
                    ],
                    "errorMessage": "index access is out of bounds"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAECCCYJA2JveAhub19wcm94eQIAAAtnbG9iX2Fzc2lnbgRnbG9iA2xvYxEAAgAAAAAAAAABAAoAA2JhegoACG1vZGlmaWVkA21hcDEYQAADKSpnMRtBACQxGRREMRhEggMEUm6LvwSV/vE9BAwpREs2GgCOAwE1Ab4DDQAxGY0CACMAAQAxGEQrKmcnBCpnKLxIKCq/MQAnBSpmJwgxAFBJvEgqvyNDMRgUQ4oEAYAASYv+JAuL/CQLIosEiwMMQQAci/2LBElOAlmLAggWVwYCiwFMUIwBJAiMBEL/3Iv9FYwAIowEiwSLAgxBAByL/4sESU4CWYsACBZXBgKLAUxQjAEkCIwEQv/ci/yL/ggWVwYCiwFQi/2LA4sAUlCL/xWL/4sCTwJSUIwAiYoDAYv9UQACSReL/VcCAIv/JAtLAUxZi/8jCCQLSU4ESwJMWUsCFUsEi/8JIwlLAU8DTwJNSUsDCU4Fi/4VTgVLAyJPBFKL/lBPA08CTwNSUEwkC4sBiwUMQQAgiwRJiwFJTgNZiwMIiwIJFlcGAksCTF2MBCQIjAFC/9iLAIsEUIwAiSIrZURJIllMVwIAIycGiP7qK0xnIillREkiWUxXAgAjJwaI/tYpTGciJwRlREkiWUxXAgAjJwaI/sEnBExnMQBJIicFY0RJIllMVwIAIycGiP6oJwVMZii+REkiWUxXAgAjJwaI/pQovEgoTL8nCDEAUEm+REkiWUxXAgAjJwaI/nlLAbxIvyNDIitlRElXAgBLASJZSwEiWUsBIwlLAxVLBCRZTwJNTwNOAlJJJVkiTFgnB1BMRCKI/sErTGciKWVESVcCAEsBIllLASJZSwEjCUsDFUsEJFlPAk1PA04CUkklWSJMWCcHUExEIoj+jClMZyInBGVESVcCAEsBIllLASJZSwEjCUsDFUsEJFlPAk1PA04CUkklWSJMWCcHUExEIoj+VicETGcxAEkiJwVjRElXAgBLASJZSwEiWUsBIwlLAxVLBCRZTwJNTwNOAlJJJVkiTFgnB1BMRCKI/hwnBUxmKL5ESVcCAEsBIllLASJZSwEjCUsDFUsEJFlPAk1PA04CUkklWSJMWCcHUExEIoj95yi8SChMvycIMQBQSb5ESVcCAEsBIllLASJZSwEjCUsDFUsEJFlPAk1PA04CUkklWSJMWCcHUExEIoj9q0sBvEi/I0MiKWVEIitlRCInBGVEMQAiJwVjRCi+RCcIMQBQvkRLBU8FEkRLBE8EEkRLA08DEkRLAk8CEkRLARJEgAQVH3x1TFCwI0M=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}