#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 6 123
    bytecblock 0x0000 0x151f7c75 0x0000000000000001 0x000132
    // tests/artifacts/Arc4ABIMethod/contract.py:25
    // class SignaturesContract(ARC4Contract):
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@13
    pushbytess 0xe18922d8 0x3b05cf17 0x0658dcc3 0x5b6447de 0x061f4e77 0xeaa89139 0x510e72a4 0xd6c2ac7f 0x48142d5e // method "sink(string,uint8[])void", method "alias(string,uint8[])void", method "with_txn(string,pay,uint8[])void", method "with_asset(string,asset,uint8[])void", method "with_app(string,application,uint64,uint8[])void", method "with_acc(string,account,uint8[])void", method "complex_sig(((uint64,string),(uint64,string),uint128,uint128),txn,account,uint8[])((uint64,string),((uint64,string),(uint64,string),uint128,uint128))", method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)", method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)"
    txna ApplicationArgs 0
    match sink sink2 with_txn with_asset with_app with_acc complex_sig echo_resource_by_index echo_resource_by_value
    err

main_create_NoOp@13:
    // tests/artifacts/Arc4ABIMethod/contract.py:25
    // class SignaturesContract(ARC4Contract):
    pushbytes 0x4c5c61ba // method "create()void"
    txna ApplicationArgs 0
    match create
    err


// tests.artifacts.Arc4ABIMethod.contract.SignaturesContract.create[routing]() -> void:
create:
    // tests/artifacts/Arc4ABIMethod/contract.py:28
    // app_txn = gtxn.ApplicationCallTransaction(0)
    intc_1 // 0
    gtxns TypeEnum
    intc_2 // appl
    ==
    assert // transaction type is appl
    // tests/artifacts/Arc4ABIMethod/contract.py:29
    // assert op.Global.current_application_id != 0, "expected global to have app id"
    global CurrentApplicationID
    assert // expected global to have app id
    // tests/artifacts/Arc4ABIMethod/contract.py:31
    // op.Global.current_application_address != op.Global.zero_address
    global CurrentApplicationAddress
    global ZeroAddress
    !=
    // tests/artifacts/Arc4ABIMethod/contract.py:30-32
    // assert (
    //     op.Global.current_application_address != op.Global.zero_address
    // ), "expected global to have app address"
    assert // expected global to have app address
    // tests/artifacts/Arc4ABIMethod/contract.py:28
    // app_txn = gtxn.ApplicationCallTransaction(0)
    intc_1 // 0
    // tests/artifacts/Arc4ABIMethod/contract.py:33
    // assert app_txn.app_id == 0, "expected txn to have 0"
    gtxns ApplicationID
    !
    assert // expected txn to have 0
    // tests/artifacts/Arc4ABIMethod/contract.py:34
    // assert Txn.application_id == 0, "expected txn to have 0"
    txn ApplicationID
    !
    // tests/artifacts/Arc4ABIMethod/contract.py:26
    // @arc4.abimethod(create="require")
    return // on error: expected txn to have 0


// tests.artifacts.Arc4ABIMethod.contract.SignaturesContract.sink[routing]() -> void:
sink:
    // tests/artifacts/Arc4ABIMethod/contract.py:36
    // @arc4.abimethod
    txna ApplicationArgs 2
    txna ApplicationArgs 1
    // tests/artifacts/Arc4ABIMethod/contract.py:38
    // assert value
    bytec_0 // 0x0000
    !=
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:39
    // assert arr
    bytec_0 // 0x0000
    !=
    // tests/artifacts/Arc4ABIMethod/contract.py:36
    // @arc4.abimethod
    return


// tests.artifacts.Arc4ABIMethod.contract.SignaturesContract.sink2[routing]() -> void:
sink2:
    // tests/artifacts/Arc4ABIMethod/contract.py:41
    // @arc4.abimethod(name="alias")
    txna ApplicationArgs 2
    txna ApplicationArgs 1
    // tests/artifacts/Arc4ABIMethod/contract.py:43
    // assert value
    bytec_0 // 0x0000
    !=
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:44
    // assert arr
    bytec_0 // 0x0000
    !=
    // tests/artifacts/Arc4ABIMethod/contract.py:41
    // @arc4.abimethod(name="alias")
    return


// tests.artifacts.Arc4ABIMethod.contract.SignaturesContract.with_txn[routing]() -> void:
with_txn:
    // tests/artifacts/Arc4ABIMethod/contract.py:46
    // @arc4.abimethod
    txna ApplicationArgs 1
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 2
    // tests/artifacts/Arc4ABIMethod/contract.py:48
    // assert value
    uncover 2
    bytec_0 // 0x0000
    !=
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:49
    // assert arr
    bytec_0 // 0x0000
    !=
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:50
    // assert pay.group_index == 0
    dup
    gtxns GroupIndex
    !
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:51
    // assert Txn.group_index == 1
    txn GroupIndex
    intc_0 // 1
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:52
    // assert pay.amount == 123
    gtxns Amount
    intc_3 // 123
    ==
    // tests/artifacts/Arc4ABIMethod/contract.py:46
    // @arc4.abimethod
    return


// tests.artifacts.Arc4ABIMethod.contract.SignaturesContract.with_asset[routing]() -> void:
with_asset:
    // tests/artifacts/Arc4ABIMethod/contract.py:54
    // @arc4.abimethod(resource_encoding="index")
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    // tests/artifacts/Arc4ABIMethod/contract.py:56
    // assert value
    uncover 2
    bytec_0 // 0x0000
    !=
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:57
    // assert arr
    bytec_0 // 0x0000
    !=
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:58
    // assert asset.total == 123
    dup
    asset_params_get AssetTotal
    assert // asset exists
    intc_3 // 123
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:59
    // assert Txn.assets(0) == asset
    txna Assets 0
    ==
    // tests/artifacts/Arc4ABIMethod/contract.py:54
    // @arc4.abimethod(resource_encoding="index")
    return


// tests.artifacts.Arc4ABIMethod.contract.SignaturesContract.with_app[routing]() -> void:
with_app:
    // tests/artifacts/Arc4ABIMethod/contract.py:61
    // @arc4.abimethod(resource_encoding="index")
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txnas Applications
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // tests/artifacts/Arc4ABIMethod/contract.py:65
    // assert value
    uncover 3
    bytec_0 // 0x0000
    !=
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:66
    // assert arr
    bytec_0 // 0x0000
    !=
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:67
    // assert app.id == app_id, "expected app id to match provided app id"
    dig 1
    itob
    b==
    assert // expected app id to match provided app id
    // tests/artifacts/Arc4ABIMethod/contract.py:68
    // assert app.creator == op.Global.creator_address, "expected other app to have same creator"
    dup
    app_params_get AppCreator
    assert // application exists
    global CreatorAddress
    ==
    assert // expected other app to have same creator
    // tests/artifacts/Arc4ABIMethod/contract.py:69
    // app_txn = gtxn.ApplicationCallTransaction(0)
    intc_1 // 0
    gtxns TypeEnum
    intc_2 // appl
    ==
    assert // transaction type is appl
    intc_1 // 0
    // tests/artifacts/Arc4ABIMethod/contract.py:70
    // assert app_txn.apps(0) == op.Global.current_application_id
    dup
    gtxnsas Applications
    global CurrentApplicationID
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:71
    // assert Txn.applications(0) == op.Global.current_application_id
    txna Applications 0
    global CurrentApplicationID
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:69
    // app_txn = gtxn.ApplicationCallTransaction(0)
    intc_1 // 0
    // tests/artifacts/Arc4ABIMethod/contract.py:72
    // assert app_txn.apps(1) == app
    intc_0 // 1
    gtxnsas Applications
    dig 1
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:73
    // assert Txn.applications(1) == app
    txna Applications 1
    ==
    // tests/artifacts/Arc4ABIMethod/contract.py:61
    // @arc4.abimethod(resource_encoding="index")
    return


// tests.artifacts.Arc4ABIMethod.contract.SignaturesContract.with_acc[routing]() -> void:
with_acc:
    // tests/artifacts/Arc4ABIMethod/contract.py:75
    // @arc4.abimethod(resource_encoding="index")
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    // tests/artifacts/Arc4ABIMethod/contract.py:77
    // assert value
    uncover 2
    bytec_0 // 0x0000
    !=
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:78
    // assert arr
    bytec_0 // 0x0000
    !=
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:79
    // assert acc.balance == acc.min_balance + 1234
    dup
    acct_params_get AcctBalance
    assert // account funded
    dig 1
    acct_params_get AcctMinBalance
    assert // account funded
    pushint 1234 // 1234
    +
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:80
    // assert Txn.accounts(0) == Txn.sender
    txna Accounts 0
    txn Sender
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:81
    // assert Txn.accounts(1) == acc
    txna Accounts 1
    ==
    // tests/artifacts/Arc4ABIMethod/contract.py:75
    // @arc4.abimethod(resource_encoding="index")
    return


// tests.artifacts.Arc4ABIMethod.contract.SignaturesContract.complex_sig[routing]() -> void:
complex_sig:
    // tests/artifacts/Arc4ABIMethod/contract.py:83
    // @arc4.abimethod(resource_encoding="index")
    txna ApplicationArgs 1
    txn GroupIndex
    intc_0 // 1
    -
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    // tests/artifacts/Arc4ABIMethod/contract.py:87
    // assert Txn.num_app_args == 4
    txn NumAppArgs
    pushint 4 // 4
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:88-89
    // # struct
    // assert struct1.another_struct.one == 1
    dig 3
    intc_1 // 0
    extract_uint16
    dig 4
    pushint 2 // 2
    extract_uint16
    dig 5
    uncover 2
    dig 2
    substring3
    dup
    extract 0 8
    bytec_2 // 0x0000000000000001
    b==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:88-90
    // # struct
    // assert struct1.another_struct.one == 1
    // assert struct1.another_struct.two == "2"
    dup
    pushint 8 // 8
    extract_uint16
    dig 1
    len
    dig 2
    uncover 2
    dig 2
    substring3
    // tests/artifacts/Arc4ABIMethod/contract.py:90
    // assert struct1.another_struct.two == "2"
    bytec_3 // 0x000132
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:91
    // assert struct1.another_struct_alias.one == 1
    dig 6
    len
    dig 7
    uncover 4
    uncover 2
    substring3
    dup
    extract 0 8
    bytec_2 // 0x0000000000000001
    b==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:91-92
    // assert struct1.another_struct_alias.one == 1
    // assert struct1.another_struct_alias.two == "2"
    dup
    pushint 8 // 8
    extract_uint16
    dig 1
    len
    substring3
    // tests/artifacts/Arc4ABIMethod/contract.py:90
    // assert struct1.another_struct.two == "2"
    bytec_3 // 0x000132
    // tests/artifacts/Arc4ABIMethod/contract.py:92
    // assert struct1.another_struct_alias.two == "2"
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:93
    // assert struct1.three == 3
    dig 5
    extract 4 16
    pushbytes 0x00000000000000000000000000000003
    b==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:94
    // assert struct1.four == 4
    dig 5
    extract 20 16
    pushbytes 0x00000000000000000000000000000004
    b==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:96-97
    // # txn
    // assert txn.group_index == Txn.group_index - 1
    uncover 4
    gtxns GroupIndex
    txn GroupIndex
    intc_0 // 1
    -
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:99-100
    // # acc
    // assert Txn.application_args(2) == arc4.UInt8(1).bytes  # acc array ref
    txna ApplicationArgs 2
    pushbytes 0x01
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:101
    // assert acc.balance == acc.min_balance + 1234
    dig 3
    acct_params_get AcctBalance
    assert // account funded
    uncover 4
    acct_params_get AcctMinBalance
    assert // account funded
    pushint 1234 // 1234
    +
    ==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:102
    // assert five[0] == 5
    uncover 2
    extract 2 1
    pushbytes 0x05
    b==
    assert
    // tests/artifacts/Arc4ABIMethod/contract.py:83
    // @arc4.abimethod(resource_encoding="index")
    pushint 4 // 4
    +
    itob
    extract 6 2
    pushbytes 0x0004
    swap
    concat
    swap
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.Arc4ABIMethod.contract.SignaturesContract.echo_resource_by_index[routing]() -> void:
echo_resource_by_index:
    // tests/artifacts/Arc4ABIMethod/contract.py:106-108
    // @arc4.abimethod(
    //     resource_encoding="index",
    // )
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Applications
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    // tests/artifacts/Arc4ABIMethod/contract.py:112
    // asset_idx = op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/Arc4ABIMethod/contract.py:113
    // assert asset == Txn.assets(asset_idx), "expected asset to be passed by index"
    txnas Assets
    dig 3
    ==
    assert // expected asset to be passed by index
    // tests/artifacts/Arc4ABIMethod/contract.py:114
    // app_idx = op.btoi(Txn.application_args(2))
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/Arc4ABIMethod/contract.py:115
    // assert app == Txn.applications(app_idx), "expected application to be passed by index"
    txnas Applications
    dig 2
    ==
    assert // expected application to be passed by index
    // tests/artifacts/Arc4ABIMethod/contract.py:116
    // acc_idx = op.btoi(Txn.application_args(3))
    txna ApplicationArgs 3
    btoi
    // tests/artifacts/Arc4ABIMethod/contract.py:117
    // assert acc == Txn.accounts(acc_idx), "expected account to be passed by index"
    txnas Accounts
    dig 1
    ==
    assert // expected account to be passed by index
    // tests/artifacts/Arc4ABIMethod/contract.py:106-108
    // @arc4.abimethod(
    //     resource_encoding="index",
    // )
    uncover 2
    itob
    uncover 2
    itob
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.Arc4ABIMethod.contract.SignaturesContract.echo_resource_by_value[routing]() -> void:
echo_resource_by_value:
    // tests/artifacts/Arc4ABIMethod/contract.py:120-122
    // @arc4.abimethod(
    //     resource_encoding="value",
    // )
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    // tests/artifacts/Arc4ABIMethod/contract.py:126
    // asset_id = op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/Arc4ABIMethod/contract.py:127
    // assert asset.id == asset_id, "expected asset to be passed by value"
    dig 3
    ==
    assert // expected asset to be passed by value
    // tests/artifacts/Arc4ABIMethod/contract.py:128
    // app_id = op.btoi(Txn.application_args(2))
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/Arc4ABIMethod/contract.py:129
    // assert app.id == app_id, "expected application to be passed by value"
    dig 2
    ==
    assert // expected application to be passed by value
    // tests/artifacts/Arc4ABIMethod/contract.py:131
    // assert acc.bytes == address, "expected account to be passed by value"
    dup
    // tests/artifacts/Arc4ABIMethod/contract.py:130
    // address = Txn.application_args(3)
    txna ApplicationArgs 3
    // tests/artifacts/Arc4ABIMethod/contract.py:131
    // assert acc.bytes == address, "expected account to be passed by value"
    ==
    assert // expected account to be passed by value
    // tests/artifacts/Arc4ABIMethod/contract.py:120-122
    // @arc4.abimethod(
    //     resource_encoding="value",
    // )
    uncover 2
    itob
    uncover 2
    itob
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
