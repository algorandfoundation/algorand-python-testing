{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAUK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AALL;;AAAA;;;;;;;;;AAKA;;;AAEyB;AAAjB;AAAA;AAAA;AAAA;AACiB;;AAAjB;AAAA;AAAA;AAAA;;AAER;;;AAE0B;AAAX;AAAA;AAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAR;AAAzB;AAAP;AACkB;AAAX;AAAA;AAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAR;AAAzB;AAAP;AAE+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAzC;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "tests.artifacts.BoxContract.contract.BoxContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock 0x6f6361 0x74786e"
    },
    "14": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "16": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "19": {
      "op": "pushbytess 0xf26c6d42 0xef186cf7 // method \"store_enums()void\", method \"read_enums()(uint64,uint64)\""
    },
    "31": {
      "op": "txna ApplicationArgs 0"
    },
    "34": {
      "op": "match main_store_enums_route@5 main_read_enums_route@6"
    },
    "40": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "42": {
      "op": "return"
    },
    "43": {
      "block": "main_read_enums_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "45": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "46": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "47": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "49": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "50": {
      "callsub": "tests.artifacts.BoxContract.contract.BoxContract.read_enums",
      "op": "callsub read_enums",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "53": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "59": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "60": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "61": {
      "op": "log",
      "stack_out": []
    },
    "62": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "63": {
      "op": "return"
    },
    "64": {
      "block": "main_store_enums_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "66": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "67": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "68": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "70": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "71": {
      "callsub": "tests.artifacts.BoxContract.contract.BoxContract.store_enums",
      "op": "callsub store_enums"
    },
    "74": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "75": {
      "op": "return"
    },
    "76": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "78": {
      "op": "bnz main_after_if_else@9",
      "stack_out": []
    },
    "81": {
      "op": "txn ApplicationID"
    },
    "83": {
      "op": "!"
    },
    "84": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "85": {
      "op": "intc_0 // 1"
    },
    "86": {
      "op": "return"
    },
    "87": {
      "subroutine": "tests.artifacts.BoxContract.contract.BoxContract.store_enums",
      "params": {},
      "block": "store_enums",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "90": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn"
      ],
      "stack_out": [
        "OptIn"
      ]
    },
    "91": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "92": {
      "op": "bytec_0 // \"oca\"",
      "defined_out": [
        "\"oca\"",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"oca\""
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "\"oca\"",
        "new_box_value%0#0"
      ]
    },
    "94": {
      "op": "box_put",
      "stack_out": []
    },
    "95": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "97": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0"
      ]
    },
    "98": {
      "op": "bytec_1 // \"txn\"",
      "defined_out": [
        "\"txn\"",
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0",
        "\"txn\""
      ]
    },
    "99": {
      "op": "swap",
      "stack_out": [
        "\"txn\"",
        "new_box_value%1#0"
      ]
    },
    "100": {
      "op": "box_put",
      "stack_out": []
    },
    "101": {
      "retsub": true,
      "op": "retsub"
    },
    "102": {
      "subroutine": "tests.artifacts.BoxContract.contract.BoxContract.read_enums",
      "params": {},
      "block": "read_enums",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "105": {
      "op": "bytec_0 // 0x6f6361",
      "defined_out": [
        "0x6f6361"
      ],
      "stack_out": [
        "0x6f6361"
      ]
    },
    "106": {
      "op": "box_get",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "107": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "108": {
      "op": "bytec_0 // \"oca\"",
      "defined_out": [
        "\"oca\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"oca\""
      ]
    },
    "109": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "111": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "112": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "113": {
      "error": "check self.oca exists",
      "op": "assert // check self.oca exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "114": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "116": {
      "op": "assert",
      "stack_out": []
    },
    "117": {
      "op": "bytec_1 // 0x74786e",
      "defined_out": [
        "0x74786e"
      ],
      "stack_out": [
        "0x74786e"
      ]
    },
    "118": {
      "op": "box_get",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "119": {
      "op": "pop",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "120": {
      "op": "bytec_1 // \"txn\"",
      "defined_out": [
        "\"txn\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"txn\""
      ]
    },
    "121": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "122": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "123": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_exists%1#0",
        "maybe_value_converted%1#0"
      ]
    },
    "124": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "maybe_value_converted%1#0",
        "maybe_exists%1#0"
      ]
    },
    "125": {
      "error": "check self.txn exists",
      "op": "assert // check self.txn exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value_converted%1#0"
      ]
    },
    "126": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "128": {
      "op": "assert",
      "stack_out": []
    },
    "129": {
      "op": "bytec_0 // \"oca\"",
      "stack_out": [
        "\"oca\""
      ]
    },
    "130": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "131": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "132": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%2#0"
      ]
    },
    "133": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%2#0",
        "maybe_exists%2#0"
      ]
    },
    "134": {
      "error": "check self.oca exists",
      "op": "assert // check self.oca exists",
      "stack_out": [
        "maybe_value_converted%2#0"
      ]
    },
    "135": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "136": {
      "op": "bytec_1 // \"txn\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "\"txn\""
      ]
    },
    "137": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "138": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "139": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value_converted%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_exists%3#0",
        "maybe_value_converted%3#0"
      ]
    },
    "140": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value_converted%3#0",
        "maybe_exists%3#0"
      ]
    },
    "141": {
      "error": "check self.txn exists",
      "op": "assert // check self.txn exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value_converted%3#0"
      ]
    },
    "142": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "143": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "144": {
      "retsub": true,
      "op": "retsub"
    }
  }
}