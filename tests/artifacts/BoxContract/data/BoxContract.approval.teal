#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 2 0 8 4096 4098 4138
    bytecblock "box" 0x424f585f43 "blob" "box_large" 0x151f7c75 "box_a" "box_d" "b" "too_many_bools" "many_ints" "0" 0x00023432 0x68656c6c6f 0x6f6361 0x74786e 0x068101 "box_ref" "default"
    // tests/artifacts/BoxContract/contract.py:59
    // class BoxContract(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@34
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xf26c6d42 0xef186cf7 0x7d37296e 0xf13dd937 0x33325d3d 0xa6174812 0xfabcb885 0xd566c632 0x04ef4971 0x23ecb32c 0x0199408d 0x772059ca 0x01263df6 0xeef75816 0x996497ae 0x6cec72ff 0x6f9d1075 0x59ef3760 0xaa666b96 0xdfbdd636 0xb532913a 0xc29f1669 0x9c888c09 0xe6f68506 0x8ee2c364 // method "store_enums()void", method "read_enums()(uint64,uint64)", method "set_boxes(uint64,byte[],string)void", method "boxes_exist()(bool,bool,bool,bool)", method "check_keys()void", method "read_boxes()(uint64,byte[],string,uint64)", method "indirect_extract_and_replace()void", method "delete_boxes()void", method "slice_box()void", method "arc4_box()void", method "create_many_ints()void", method "set_many_ints(uint64,uint64)void", method "sum_many_ints()uint64", method "test_box_ref()void", method "set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void", method "nested_write(uint64,uint64)void", method "nested_read(uint64,uint64,uint64)uint64", method "create_bools()void", method "set_bool(uint64,bool)void", method "sum_bools(uint64)uint64", method "box_map_test()void", method "box_map_set(uint64,string)void", method "box_map_get(uint64)string", method "box_map_del(uint64)void", method "box_map_exists(uint64)bool"
    txna ApplicationArgs 0
    match store_enums read_enums set_boxes boxes_exist main_check_keys_route@10 read_boxes indirect_extract_and_replace delete_boxes slice_box main_arc4_box_route@15 main_create_many_ints_route@16 set_many_ints sum_many_ints test_box_ref set_nested_struct nested_write nested_read main_create_bools_route@23 set_bool sum_bools box_map_test box_map_set box_map_get box_map_del box_map_exists
    err

main_create_bools_route@23:
    // tests/artifacts/BoxContract/contract.py:281
    // self.too_many_bools.create()
    bytec 8 // "too_many_bools"
    pushint 4125 // 4125
    box_create
    pop
    // tests/artifacts/BoxContract/contract.py:279
    // @arc4.abimethod
    intc_0 // 1
    return

main_create_many_ints_route@16:
    // tests/artifacts/BoxContract/contract.py:181
    // self.many_ints.create()
    bytec 9 // "many_ints"
    pushint 4104 // 4104
    box_create
    pop
    // tests/artifacts/BoxContract/contract.py:179
    // @arc4.abimethod()
    intc_0 // 1
    return

main_arc4_box_route@15:
    // tests/artifacts/BoxContract/contract.py:171-172
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    // box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    pushbytess 0x64 0x00010203 // 0x64, 0x00010203
    // tests/artifacts/BoxContract/contract.py:172
    // box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    box_put
    // tests/artifacts/BoxContract/contract.py:169
    // @arc4.abimethod
    intc_0 // 1
    return

main_check_keys_route@10:
    // tests/artifacts/BoxContract/contract.py:125
    // @arc4.abimethod
    intc_0 // 1
    return

main___algopy_default_create@34:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests.artifacts.BoxContract.contract.BoxContract.store_enums[routing]() -> void:
store_enums:
    // tests/artifacts/BoxContract/contract.py:75
    // self.oca.value = OnCompleteAction.OptIn
    intc_0 // OptIn
    itob
    bytec 13 // "oca"
    swap
    box_put
    // tests/artifacts/BoxContract/contract.py:76
    // self.txn.value = TransactionType.ApplicationCall
    pushint 6 // appl
    itob
    bytec 14 // "txn"
    swap
    box_put
    // tests/artifacts/BoxContract/contract.py:73
    // @arc4.abimethod()
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.read_enums[routing]() -> void:
read_enums:
    // tests/artifacts/BoxContract/contract.py:80
    // assert op.Box.get(b"oca")[0] == op.itob(self.oca.value)
    bytec 13 // 0x6f6361
    box_get
    assert // check self.oca exists
    dup
    btoi
    itob
    swap
    dig 1
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:81
    // assert op.Box.get(b"txn")[0] == op.itob(self.txn.value)
    bytec 14 // 0x74786e
    box_get
    assert // check self.txn exists
    dup
    btoi
    itob
    swap
    dig 1
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:83
    // return arc4.Tuple((arc4.UInt64(self.oca.value), arc4.UInt64(self.txn.value)))
    concat
    // tests/artifacts/BoxContract/contract.py:78
    // @arc4.abimethod()
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.set_boxes[routing]() -> void:
set_boxes:
    // tests/artifacts/BoxContract/contract.py:85
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // tests/artifacts/BoxContract/contract.py:87
    // self.box_a.value = a
    uncover 2
    itob
    bytec 5 // "box_a"
    swap
    box_put
    // tests/artifacts/BoxContract/contract.py:88
    // self.box_b.value = b.copy()
    bytec 7 // "b"
    box_del
    pop
    bytec 7 // "b"
    dig 2
    box_put
    // tests/artifacts/BoxContract/contract.py:89
    // self.box_c.value = c
    bytec_1 // 0x424f585f43
    box_del
    pop
    bytec_1 // 0x424f585f43
    dig 1
    box_put
    // tests/artifacts/BoxContract/contract.py:90
    // self.box_d.value = b.native
    dig 1
    extract 2 0
    bytec 6 // "box_d"
    box_del
    pop
    bytec 6 // "box_d"
    dig 1
    box_put
    // tests/artifacts/BoxContract/contract.py:91
    // self.box_large.create()
    bytec_3 // "box_large"
    pushint 6160 // 6160
    box_create
    pop
    // tests/artifacts/BoxContract/contract.py:92
    // self.box_large.value.e = UInt64(42)
    pushint 42 // 42
    itob
    bytec_3 // "box_large"
    intc 4 // 4096
    uncover 2
    box_replace
    // tests/artifacts/BoxContract/contract.py:93
    // self.box_large.replace(size_of(Bytes1024) * 4, arc4.UInt64(42).bytes)
    bytec_3 // "box_large"
    intc 4 // 4096
    pushbytes 0x000000000000002a
    box_replace
    // tests/artifacts/BoxContract/contract.py:98
    // self.box_a.value += 3
    bytec 5 // "box_a"
    box_get
    assert // check self.box_a exists
    btoi
    pushint 3 // 3
    +
    itob
    bytec 5 // "box_a"
    swap
    box_put
    // tests/artifacts/BoxContract/contract.py:100-101
    // # test .length
    // assert self.box_a.length == 8
    bytec 5 // "box_a"
    box_len
    pop
    intc_3 // 8
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:102
    // assert self.box_b.length == b.bytes.length
    bytec 7 // "b"
    box_len
    pop
    dig 3
    len
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:103
    // assert self.box_c.length == c.bytes.length
    bytec_1 // 0x424f585f43
    box_len
    assert // check self.box_c exists
    dig 2
    len
    dup2
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:104
    // assert self.box_d.length == b.native.length
    bytec 6 // "box_d"
    box_len
    pop
    dig 3
    len
    dup2
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:106-107
    // # test .value.bytes
    // assert self.box_c.value.bytes[0] == c.bytes[0]
    bytec_1 // 0x424f585f43
    intc_2 // 0
    intc_0 // 1
    box_extract
    dig 6
    extract 0 1
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:108
    // assert self.box_c.value.bytes[-1] == c.bytes[-1]
    dig 3
    intc_0 // 1
    -
    bytec_1 // 0x424f585f43
    swap
    intc_0 // 1
    box_extract
    dig 3
    intc_0 // 1
    -
    dig 7
    swap
    intc_0 // 1
    extract3
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:109
    // assert self.box_c.value.bytes[:-1] == c.bytes[:-1]
    intc_0 // 1
    dig 4
    <
    dig 4
    intc_0 // 1
    uncover 2
    select
    dig 4
    swap
    -
    bytec_1 // 0x424f585f43
    intc_2 // 0
    uncover 2
    box_extract
    intc_0 // 1
    dig 4
    >=
    intc_0 // 1
    dig 5
    uncover 2
    select
    dig 4
    swap
    -
    dig 7
    intc_2 // 0
    uncover 2
    substring3
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:110
    // assert self.box_c.value.bytes[:2] == c.bytes[:2]
    intc_1 // 2
    dig 4
    <
    uncover 4
    intc_1 // 2
    uncover 2
    select
    bytec_1 // 0x424f585f43
    intc_2 // 0
    uncover 2
    box_extract
    intc_1 // 2
    dig 4
    >=
    intc_1 // 2
    uncover 5
    uncover 2
    select
    uncover 5
    intc_2 // 0
    uncover 2
    substring3
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:112-113
    // # test .value with Bytes type
    // assert self.box_d.value[0] == b.native[0]
    bytec 6 // "box_d"
    intc_2 // 0
    intc_0 // 1
    box_extract
    uncover 4
    extract 2 1
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:114
    // assert self.box_d.value[-1] == b.native[-1]
    dig 1
    intc_0 // 1
    -
    bytec 6 // "box_d"
    swap
    intc_0 // 1
    box_extract
    dig 1
    intc_0 // 1
    -
    dig 4
    swap
    intc_0 // 1
    extract3
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:115
    // assert self.box_d.value[:-1] == b.native[:-1]
    intc_0 // 1
    dig 2
    <
    dig 2
    intc_0 // 1
    uncover 2
    select
    dig 2
    swap
    -
    bytec 6 // "box_d"
    intc_2 // 0
    uncover 2
    box_extract
    intc_0 // 1
    dig 2
    >=
    intc_0 // 1
    dig 3
    uncover 2
    select
    dig 2
    swap
    -
    dig 4
    intc_2 // 0
    uncover 2
    substring3
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:116
    // assert self.box_d.value[:5] == b.native[:5]
    pushint 5 // 5
    dig 2
    <
    dig 2
    pushint 5 // 5
    uncover 2
    select
    bytec 6 // "box_d"
    intc_2 // 0
    uncover 2
    box_extract
    pushint 5 // 5
    dig 2
    >=
    pushint 5 // 5
    dig 3
    uncover 2
    select
    dig 4
    intc_2 // 0
    uncover 2
    substring3
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:117
    // assert self.box_d.value[: UInt64(2)] == b.native[: UInt64(2)]
    intc_1 // 2
    dig 2
    <
    uncover 2
    intc_1 // 2
    uncover 2
    select
    bytec 6 // "box_d"
    intc_2 // 0
    uncover 2
    box_extract
    intc_1 // 2
    dig 2
    >=
    intc_1 // 2
    uncover 3
    uncover 2
    select
    uncover 2
    intc_2 // 0
    uncover 2
    substring3
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:119
    // assert self.box_large.length == size_of(LargeStruct)
    bytec_3 // "box_large"
    box_len
    pop
    pushint 6160 // 6160
    ==
    // tests/artifacts/BoxContract/contract.py:85
    // @arc4.abimethod
    return


// tests.artifacts.BoxContract.contract.BoxContract.boxes_exist[routing]() -> void:
boxes_exist:
    // tests/artifacts/BoxContract/contract.py:123
    // return bool(self.box_a), bool(self.box_b), bool(self.box_c), bool(self.box_large)
    bytec 5 // "box_a"
    box_len
    bury 1
    bytec 7 // "b"
    box_len
    cover 2
    pop
    bytec_1 // 0x424f585f43
    box_len
    cover 3
    pop
    bytec_3 // "box_large"
    box_len
    cover 4
    pop
    // tests/artifacts/BoxContract/contract.py:121
    // @arc4.abimethod
    pushbytes 0x00
    intc_2 // 0
    uncover 2
    setbit
    intc_0 // 1
    uncover 2
    setbit
    intc_1 // 2
    uncover 2
    setbit
    pushint 3 // 3
    uncover 2
    setbit
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.read_boxes[routing]() -> void:
read_boxes:
    // tests/artifacts/BoxContract/contract.py:135
    // get_box_value_plus_1(self.box_a) - 1,
    bytec 5 // "box_a"
    // tests/artifacts/BoxContract/contract.py:345
    // return box.value + 1
    box_get
    assert // check Box exists
    btoi
    intc_0 // 1
    +
    // tests/artifacts/BoxContract/contract.py:135
    // get_box_value_plus_1(self.box_a) - 1,
    intc_0 // 1
    -
    // tests/artifacts/BoxContract/contract.py:136
    // self.box_b.value.native,
    bytec 7 // "b"
    box_get
    assert // check self.box_b exists
    extract 2 0
    // tests/artifacts/BoxContract/contract.py:137
    // self.box_c.value,
    bytec_1 // 0x424f585f43
    box_get
    assert // check self.box_c exists
    // tests/artifacts/BoxContract/contract.py:138
    // self.box_large.value.e,
    bytec_3 // "box_large"
    intc 4 // 4096
    intc_3 // 8
    box_extract
    btoi
    // tests/artifacts/BoxContract/contract.py:132
    // @arc4.abimethod
    uncover 3
    itob
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    swap
    pushbytes 0x0014
    concat
    dig 1
    len
    pushint 20 // 20
    +
    itob
    extract 6 2
    concat
    uncover 2
    itob
    concat
    swap
    concat
    swap
    concat
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.indirect_extract_and_replace[routing]() -> void:
indirect_extract_and_replace:
    // tests/artifacts/BoxContract/contract.py:143
    // large = self.box_large.value.copy()
    bytec_3 // "box_large"
    // tests/artifacts/BoxContract/contract.py:143-144
    // large = self.box_large.value.copy()
    // large.e += 1
    intc 4 // 4096
    intc_3 // 8
    box_extract
    // tests/artifacts/BoxContract/contract.py:144
    // large.e += 1
    btoi
    intc_0 // 1
    +
    itob
    // tests/artifacts/BoxContract/contract.py:145
    // self.box_large.value = large.copy()
    bytec_3 // "box_large"
    // tests/artifacts/BoxContract/contract.py:143-145
    // large = self.box_large.value.copy()
    // large.e += 1
    // self.box_large.value = large.copy()
    intc 4 // 4096
    uncover 2
    box_replace
    // tests/artifacts/BoxContract/contract.py:141
    // @arc4.abimethod()
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.delete_boxes[routing]() -> void:
delete_boxes:
    // tests/artifacts/BoxContract/contract.py:149
    // del self.box_a.value
    bytec 5 // "box_a"
    box_del
    pop
    // tests/artifacts/BoxContract/contract.py:150
    // del self.box_b.value
    bytec 7 // "b"
    box_del
    pop
    // tests/artifacts/BoxContract/contract.py:151
    // del self.box_c.value
    bytec_1 // 0x424f585f43
    box_del
    pop
    // tests/artifacts/BoxContract/contract.py:152
    // assert self.box_a.get(default=UInt64(42)) == 42
    bytec 5 // "box_a"
    box_get
    swap
    btoi
    pushint 42 // 42
    dig 1
    dig 3
    select
    pushint 42 // 42
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:153
    // assert self.box_b.get(default=arc4.DynamicBytes(b"42")).native == b"42"
    bytec 7 // "b"
    box_get
    bytec 11 // 0x00023432
    cover 2
    select
    extract 2 0
    pushbytes 0x3432
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:154
    // assert self.box_c.get(default=arc4.String("42")) == "42"
    bytec_1 // 0x424f585f43
    box_get
    bytec 11 // 0x00023432
    cover 2
    select
    bytec 11 // 0x00023432
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:156
    // assert not a_exists
    swap
    !
    assert
    // tests/artifacts/BoxContract/contract.py:157
    // assert a == 0
    !
    assert
    // tests/artifacts/BoxContract/contract.py:158
    // del self.box_large.value
    bytec_3 // "box_large"
    box_del
    pop
    // tests/artifacts/BoxContract/contract.py:147
    // @arc4.abimethod
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.slice_box[routing]() -> void:
slice_box:
    // tests/artifacts/BoxContract/contract.py:162
    // box_0 = Box(Bytes, key=String("0"))
    bytec 10 // "0"
    // tests/artifacts/BoxContract/contract.py:163
    // box_0.value = Bytes(b"Testing testing 123")
    box_del
    pop
    // tests/artifacts/BoxContract/contract.py:162
    // box_0 = Box(Bytes, key=String("0"))
    bytec 10 // "0"
    // tests/artifacts/BoxContract/contract.py:163
    // box_0.value = Bytes(b"Testing testing 123")
    pushbytes 0x54657374696e672074657374696e6720313233
    box_put
    // tests/artifacts/BoxContract/contract.py:162
    // box_0 = Box(Bytes, key=String("0"))
    bytec 10 // "0"
    // tests/artifacts/BoxContract/contract.py:164
    // assert box_0.value[0:7] == b"Testing"
    box_len
    pop
    dup
    intc_2 // 0
    dig 2
    select
    pushint 7 // 7
    dig 2
    <
    uncover 2
    pushint 7 // 7
    uncover 2
    select
    dig 1
    -
    // tests/artifacts/BoxContract/contract.py:162
    // box_0 = Box(Bytes, key=String("0"))
    bytec 10 // "0"
    // tests/artifacts/BoxContract/contract.py:164
    // assert box_0.value[0:7] == b"Testing"
    cover 2
    box_extract
    pushbytes 0x54657374696e67
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:166
    // self.box_c.value = arc4.String("Hello")
    bytec_1 // 0x424f585f43
    box_del
    pop
    bytec_1 // 0x424f585f43
    pushbytes 0x000548656c6c6f
    box_put
    // tests/artifacts/BoxContract/contract.py:167
    // assert self.box_c.value.bytes[2:10] == b"Hello"
    bytec_1 // 0x424f585f43
    box_len
    pop
    intc_1 // 2
    dig 1
    <
    dig 1
    intc_1 // 2
    uncover 2
    select
    pushint 10 // 10
    dig 2
    <
    uncover 2
    pushint 10 // 10
    uncover 2
    select
    dig 1
    -
    bytec_1 // 0x424f585f43
    cover 2
    box_extract
    pushbytes 0x48656c6c6f
    ==
    // tests/artifacts/BoxContract/contract.py:160
    // @arc4.abimethod
    return


// tests.artifacts.BoxContract.contract.BoxContract.set_many_ints[routing]() -> void:
set_many_ints:
    // tests/artifacts/BoxContract/contract.py:183
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // tests/artifacts/BoxContract/contract.py:185
    // self.many_ints.value[index] = value
    swap
    intc_3 // 8
    *
    bytec 9 // "many_ints"
    swap
    uncover 2
    box_replace
    // tests/artifacts/BoxContract/contract.py:183
    // @arc4.abimethod()
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.sum_many_ints[routing]() -> void:
sum_many_ints:
    pushbytes ""
    dup

sum_many_ints_while_top@7:
    pushint 10510 // 10510
    global OpcodeBudget
    >
    bz sum_many_ints_after_while@12
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 15 // 0x068101
    itxn_field ApprovalProgram
    bytec 15 // 0x068101
    itxn_field ClearStateProgram
    intc_2 // 0
    itxn_field Fee
    itxn_submit
    b sum_many_ints_while_top@7

sum_many_ints_after_while@12:
    // tests/artifacts/BoxContract/contract.py:190
    // total = UInt64(0)
    intc_2 // 0
    bury 1
    // tests/artifacts/BoxContract/contract.py:191
    // for val in self.many_ints.value:
    bytec 9 // "many_ints"
    box_len
    bury 1
    assert // check self.many_ints exists
    intc_2 // 0
    bury 2

sum_many_ints_for_header@2:
    // tests/artifacts/BoxContract/contract.py:191
    // for val in self.many_ints.value:
    dig 1
    pushint 513 // 513
    <
    bz sum_many_ints_after_for@5
    dig 1
    dup
    intc_3 // 8
    *
    bytec 9 // "many_ints"
    swap
    intc_3 // 8
    box_extract
    btoi
    // tests/artifacts/BoxContract/contract.py:192
    // total = total + val
    dig 2
    +
    bury 2
    intc_0 // 1
    +
    bury 2
    b sum_many_ints_for_header@2

sum_many_ints_after_for@5:
    // tests/artifacts/BoxContract/contract.py:187
    // @arc4.abimethod()
    dup
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.test_box_ref[routing]() -> void:
test_box_ref:
    // tests/artifacts/BoxContract/contract.py:197-198
    // # init ref, with valid key types
    // box_ref = Box(Bytes, key="blob")
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:199
    // assert not box_ref, "no data"
    box_len
    bury 1
    !
    assert // no data
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:207-208
    // # create
    // assert box_ref.create(size=UInt64(32))
    pushint 32 // 32
    box_create
    assert
    // tests/artifacts/BoxContract/contract.py:211-212
    // # manipulate data
    // sender_bytes = Txn.sender.bytes
    txn Sender
    // tests/artifacts/BoxContract/contract.py:213
    // app_address = Global.current_application_address.bytes
    global CurrentApplicationAddress
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:215
    // box_ref.replace(0, sender_bytes)
    intc_2 // 0
    dig 3
    box_replace
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:216
    // box_ref.resize(8000)
    pushint 8000 // 8000
    box_resize
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:217
    // box_ref.splice(0, 0, app_address)
    intc_2 // 0
    dup
    dig 3
    box_splice
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:218
    // box_ref.replace(64, value_3)
    pushint 64 // 64
    // tests/artifacts/BoxContract/contract.py:214
    // value_3 = Bytes(b"hello")
    bytec 12 // 0x68656c6c6f
    // tests/artifacts/BoxContract/contract.py:218
    // box_ref.replace(64, value_3)
    box_replace
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:219
    // prefix = box_ref.extract(0, 32 * 2 + value_3.length)
    intc_2 // 0
    pushint 69 // 69
    box_extract
    // tests/artifacts/BoxContract/contract.py:220
    // assert prefix == app_address + sender_bytes + value_3
    dig 1
    dig 3
    concat
    // tests/artifacts/BoxContract/contract.py:214
    // value_3 = Bytes(b"hello")
    bytec 12 // 0x68656c6c6f
    // tests/artifacts/BoxContract/contract.py:220
    // assert prefix == app_address + sender_bytes + value_3
    concat
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:222-223
    // # delete
    // del box_ref.value
    box_del
    pop
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:226-227
    // # query
    // value, exists = box_ref.maybe()
    box_get
    // tests/artifacts/BoxContract/contract.py:228
    // assert not exists
    dup
    !
    assert
    // tests/artifacts/BoxContract/contract.py:229
    // assert value == b""
    dig 1
    pushbytes 0x
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:230
    // assert box_ref.get(default=sender_bytes) == sender_bytes
    dig 3
    cover 2
    select
    dig 2
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:232-233
    // # update
    // box_ref.value = sender_bytes + app_address
    concat
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:232-233
    // # update
    // box_ref.value = sender_bytes + app_address
    box_del
    pop
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:232-233
    // # update
    // box_ref.value = sender_bytes + app_address
    swap
    box_put
    // tests/artifacts/BoxContract/contract.py:204
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_2 // "blob"
    // tests/artifacts/BoxContract/contract.py:234
    // assert box_ref, "Blob exists"
    box_len
    pop
    // tests/artifacts/BoxContract/contract.py:235
    // assert box_ref.length == 64
    pushint 64 // 64
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:238-239
    // # instance box ref
    // self.box_ref.create(size=UInt64(32))
    bytec 16 // "box_ref"
    pushint 32 // 32
    box_create
    pop
    // tests/artifacts/BoxContract/contract.py:241
    // del self.box_ref.value
    bytec 16 // "box_ref"
    box_del
    pop
    // tests/artifacts/BoxContract/contract.py:195
    // @arc4.abimethod
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.set_nested_struct[routing]() -> void:
set_nested_struct:
    // tests/artifacts/BoxContract/contract.py:243
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // tests/artifacts/BoxContract/contract.py:246
    // assert struct.a, "struct.a is truthy"
    intc_2 // 0
    extract_uint64
    assert // struct.a is truthy
    // tests/artifacts/BoxContract/contract.py:247
    // struct_bytes = Txn.application_args(1)
    txna ApplicationArgs 1
    // tests/artifacts/BoxContract/contract.py:248
    // struct_size = struct_bytes.length
    dup
    len
    // tests/artifacts/BoxContract/contract.py:249
    // tail_offset = UInt64(4096 + 2)
    intc 5 // 4098
    // tests/artifacts/BoxContract/contract.py:250-251
    // # initialize box to zero
    // box.create(size=tail_offset + struct_size)
    +
    // tests/artifacts/BoxContract/contract.py:245
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:250-251
    // # initialize box to zero
    // box.create(size=tail_offset + struct_size)
    swap
    box_create
    pop
    // tests/artifacts/BoxContract/contract.py:245
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:252-253
    // # set correct offset for dynamic portion
    // box.replace(tail_offset - 2, arc4.UInt16(tail_offset).bytes)
    intc 4 // 4096
    pushbytes 0x1002
    box_replace
    // tests/artifacts/BoxContract/contract.py:245
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:249
    // tail_offset = UInt64(4096 + 2)
    intc 5 // 4098
    // tests/artifacts/BoxContract/contract.py:254-255
    // # set dynamic data
    // box.replace(tail_offset, struct_bytes)
    uncover 2
    box_replace
    // tests/artifacts/BoxContract/contract.py:243
    // @arc4.abimethod()
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.nested_write[routing]() -> void:
nested_write:
    // tests/artifacts/BoxContract/contract.py:257
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    dup
    btoi
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:260
    // box.value.nested.a = value
    intc 5 // 4098
    uncover 3
    box_replace
    // tests/artifacts/BoxContract/contract.py:261
    // box.value.nested.b = value + 1
    dup
    intc_0 // 1
    +
    itob
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:261
    // box.value.nested.b = value + 1
    pushint 4110 // 4110
    uncover 2
    box_replace
    // tests/artifacts/BoxContract/contract.py:262
    // box.value.nested.inner.arr_arr[index][index] = value + 2
    dup
    intc_1 // 2
    +
    itob
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:262
    // box.value.nested.inner.arr_arr[index][index] = value + 2
    pushint 4136 // 4136
    intc_1 // 2
    box_extract
    btoi
    dig 3
    >
    assert // index out of bounds
    intc_1 // 2
    dig 3
    *
    intc 6 // 4138
    dig 1
    +
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:262
    // box.value.nested.inner.arr_arr[index][index] = value + 2
    swap
    intc_1 // 2
    box_extract
    btoi
    intc 6 // 4138
    +
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:262
    // box.value.nested.inner.arr_arr[index][index] = value + 2
    dig 1
    intc_1 // 2
    box_extract
    btoi
    dig 5
    >
    assert // index out of bounds
    intc_1 // 2
    +
    dig 4
    intc_3 // 8
    *
    swap
    dig 1
    +
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:262
    // box.value.nested.inner.arr_arr[index][index] = value + 2
    swap
    uncover 4
    box_replace
    // tests/artifacts/BoxContract/contract.py:263
    // box.value.nested.inner.c = value + 3
    dig 2
    pushint 3 // 3
    +
    itob
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:263
    // box.value.nested.inner.c = value + 3
    pushint 4118 // 4118
    uncover 2
    box_replace
    // tests/artifacts/BoxContract/contract.py:264
    // box.value.nested.inner.d = value + 4
    dig 2
    pushint 4 // 4
    +
    itob
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:264
    // box.value.nested.inner.d = value + 4
    pushint 4128 // 4128
    uncover 2
    box_replace
    // tests/artifacts/BoxContract/contract.py:265
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    uncover 2
    pushint 5 // 5
    +
    itob
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:265
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    pushint 4108 // 4108
    intc_1 // 2
    box_extract
    btoi
    intc 5 // 4098
    +
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:265
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    dig 1
    intc_1 // 2
    box_extract
    btoi
    dig 5
    >
    assert // index out of bounds
    intc_1 // 2
    +
    dup
    dig 4
    +
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:265
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    swap
    intc_1 // 2
    box_extract
    btoi
    +
    pushint 18 // 18
    +
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:265
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    dig 1
    intc_1 // 2
    box_extract
    btoi
    dig 5
    >
    assert // index out of bounds
    intc_1 // 2
    +
    dup
    uncover 4
    +
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:265
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    swap
    intc_1 // 2
    box_extract
    btoi
    +
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:265
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    dig 1
    intc_1 // 2
    box_extract
    btoi
    uncover 4
    >
    assert // index out of bounds
    intc_1 // 2
    +
    uncover 2
    +
    // tests/artifacts/BoxContract/contract.py:259
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:265
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    swap
    uncover 2
    box_replace
    // tests/artifacts/BoxContract/contract.py:257
    // @arc4.abimethod()
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.nested_read[routing]() -> void:
nested_read:
    // tests/artifacts/BoxContract/contract.py:267
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:270
    // a = box.value.nested.a
    intc 5 // 4098
    intc_3 // 8
    box_extract
    btoi
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:271
    // b = box.value.nested.b
    pushint 4110 // 4110
    intc_3 // 8
    box_extract
    btoi
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:272
    // arr_arr = box.value.nested.inner.arr_arr[i1][i2]
    pushint 4136 // 4136
    intc_1 // 2
    box_extract
    btoi
    dig 5
    >
    assert // index out of bounds
    intc_1 // 2
    dig 5
    *
    intc 6 // 4138
    dig 1
    +
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:272
    // arr_arr = box.value.nested.inner.arr_arr[i1][i2]
    swap
    intc_1 // 2
    box_extract
    btoi
    intc 6 // 4138
    +
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:272
    // arr_arr = box.value.nested.inner.arr_arr[i1][i2]
    dig 1
    intc_1 // 2
    box_extract
    btoi
    dig 6
    >
    assert // index out of bounds
    intc_1 // 2
    +
    dig 5
    intc_3 // 8
    *
    +
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:272
    // arr_arr = box.value.nested.inner.arr_arr[i1][i2]
    swap
    intc_3 // 8
    box_extract
    btoi
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:273
    // c = box.value.nested.inner.c
    pushint 4118 // 4118
    intc_3 // 8
    box_extract
    btoi
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:274
    // d = box.value.nested.inner.d
    pushint 4128 // 4128
    intc_3 // 8
    box_extract
    btoi
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:275
    // woah_arr_arr = box.value.nested.woah[i1].arr_arr[i2][i3]
    pushint 4108 // 4108
    intc_1 // 2
    box_extract
    btoi
    intc 5 // 4098
    +
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:275
    // woah_arr_arr = box.value.nested.woah[i1].arr_arr[i2][i3]
    dig 1
    intc_1 // 2
    box_extract
    btoi
    uncover 10
    >
    assert // index out of bounds
    intc_1 // 2
    +
    dup
    uncover 5
    +
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:275
    // woah_arr_arr = box.value.nested.woah[i1].arr_arr[i2][i3]
    swap
    intc_1 // 2
    box_extract
    btoi
    +
    pushint 18 // 18
    +
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:275
    // woah_arr_arr = box.value.nested.woah[i1].arr_arr[i2][i3]
    dig 1
    intc_1 // 2
    box_extract
    btoi
    dig 8
    >
    assert // index out of bounds
    intc_1 // 2
    +
    intc_1 // 2
    uncover 8
    *
    dig 1
    +
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:275
    // woah_arr_arr = box.value.nested.woah[i1].arr_arr[i2][i3]
    swap
    intc_1 // 2
    box_extract
    btoi
    +
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:275
    // woah_arr_arr = box.value.nested.woah[i1].arr_arr[i2][i3]
    dig 1
    intc_1 // 2
    box_extract
    btoi
    dig 7
    >
    assert // index out of bounds
    intc_1 // 2
    +
    uncover 6
    intc_3 // 8
    *
    +
    // tests/artifacts/BoxContract/contract.py:269
    // box = Box(LargeNestedStruct, key="box")
    bytec_0 // "box"
    // tests/artifacts/BoxContract/contract.py:275
    // woah_arr_arr = box.value.nested.woah[i1].arr_arr[i2][i3]
    swap
    intc_3 // 8
    box_extract
    btoi
    // tests/artifacts/BoxContract/contract.py:277
    // return a + b + arr_arr + c + d + woah_arr_arr
    uncover 5
    uncover 5
    +
    uncover 4
    +
    uncover 3
    +
    uncover 2
    +
    +
    // tests/artifacts/BoxContract/contract.py:267
    // @arc4.abimethod()
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.set_bool[routing]() -> void:
set_bool:
    // tests/artifacts/BoxContract/contract.py:283
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_2 // 0
    getbit
    // tests/artifacts/BoxContract/contract.py:285
    // self.too_many_bools.value[index] = value
    dig 1
    intc_3 // 8
    /
    uncover 2
    intc_3 // 8
    %
    bytec 8 // "too_many_bools"
    dig 2
    intc_0 // 1
    box_extract
    dig 1
    intc_3 // 8
    <
    assert // index access is out of bounds
    swap
    uncover 3
    setbit
    bytec 8 // "too_many_bools"
    cover 2
    box_replace
    // tests/artifacts/BoxContract/contract.py:283
    // @arc4.abimethod
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.sum_bools[routing]() -> void:
sum_bools:
    // tests/artifacts/BoxContract/contract.py:287
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/BoxContract/contract.py:289
    // total = UInt64()
    intc_2 // 0
    // tests/artifacts/BoxContract/contract.py:290
    // for value in self.too_many_bools.value:
    bytec 8 // "too_many_bools"
    box_len
    bury 1
    assert // check self.too_many_bools exists
    intc_2 // 0

sum_bools_for_header@2:
    // tests/artifacts/BoxContract/contract.py:290
    // for value in self.too_many_bools.value:
    dup
    pushint 33000 // 33000
    <
    bz sum_bools_after_for@9
    dupn 2
    intc_3 // 8
    /
    swap
    intc_3 // 8
    %
    bytec 8 // "too_many_bools"
    uncover 2
    intc_0 // 1
    box_extract
    swap
    getbit
    // tests/artifacts/BoxContract/contract.py:291
    // if value:
    bz sum_bools_after_if_else@5
    // tests/artifacts/BoxContract/contract.py:292
    // total += 1
    dig 1
    intc_0 // 1
    +
    bury 2

sum_bools_after_if_else@5:
    // tests/artifacts/BoxContract/contract.py:293
    // if total == stop_at_total:
    dig 1
    dig 3
    ==
    bnz sum_bools_after_for@9
    dup
    intc_0 // 1
    +
    bury 1
    b sum_bools_for_header@2

sum_bools_after_for@9:
    // tests/artifacts/BoxContract/contract.py:287
    // @arc4.abimethod()
    dig 1
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.box_map_test[routing]() -> void:
box_map_test:
    // tests/artifacts/BoxContract/contract.py:299
    // key_0 = UInt64(0)
    intc_2 // 0
    // tests/artifacts/BoxContract/contract.py:302
    // self.box_map[key_0] = value
    itob
    dup
    box_del
    pop
    dup
    // tests/artifacts/BoxContract/contract.py:301
    // value = String("Hmmmmm")
    pushbytes "Hmmmmm"
    // tests/artifacts/BoxContract/contract.py:302
    // self.box_map[key_0] = value
    box_put
    // tests/artifacts/BoxContract/contract.py:305
    // assert self.box_map[key_0].bytes.length == value.bytes.length
    box_len
    pop
    pushint 6 // 6
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:300
    // key_1 = UInt64(1)
    intc_0 // 1
    // tests/artifacts/BoxContract/contract.py:309
    // assert self.box_map.get(key_1, default=String("default")) == String("default")
    itob
    dup
    box_get
    bytec 17 // "default"
    cover 2
    select
    bytec 17 // "default"
    ==
    assert
    // tests/artifacts/BoxContract/contract.py:310
    // value, exists = self.box_map.maybe(key_1)
    dup
    box_len
    bury 1
    // tests/artifacts/BoxContract/contract.py:311
    // assert not exists
    !
    assert
    // tests/artifacts/BoxContract/contract.py:317
    // tmp_box_map[key_1] = String("hello")
    dup
    box_del
    pop
    dup
    bytec 12 // "hello"
    box_put
    // tests/artifacts/BoxContract/contract.py:319
    // del tmp_box_map[key_1]
    box_del
    pop
    // tests/artifacts/BoxContract/contract.py:297
    // @arc4.abimethod
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.box_map_set[routing]() -> void:
box_map_set:
    // tests/artifacts/BoxContract/contract.py:321
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/BoxContract/contract.py:323
    // self.box_map[key] = value
    swap
    itob
    dup
    box_del
    pop
    swap
    box_put
    // tests/artifacts/BoxContract/contract.py:321
    // @arc4.abimethod
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.box_map_get[routing]() -> void:
box_map_get:
    // tests/artifacts/BoxContract/contract.py:325
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/BoxContract/contract.py:327
    // return self.box_map[key]
    itob
    box_get
    assert // check self.box_map entry exists
    // tests/artifacts/BoxContract/contract.py:325
    // @arc4.abimethod
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.box_map_del[routing]() -> void:
box_map_del:
    // tests/artifacts/BoxContract/contract.py:329
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/BoxContract/contract.py:331
    // del self.box_map[key]
    itob
    box_del
    pop
    // tests/artifacts/BoxContract/contract.py:329
    // @arc4.abimethod
    intc_0 // 1
    return


// tests.artifacts.BoxContract.contract.BoxContract.box_map_exists[routing]() -> void:
box_map_exists:
    // tests/artifacts/BoxContract/contract.py:333
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/BoxContract/contract.py:335
    // return key in self.box_map
    itob
    box_len
    bury 1
    // tests/artifacts/BoxContract/contract.py:333
    // @arc4.abimethod
    pushbytes 0x00
    intc_2 // 0
    uncover 2
    setbit
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
