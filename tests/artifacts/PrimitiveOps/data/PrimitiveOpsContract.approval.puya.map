{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAKA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAyVK;;AAAA;AAAA;AAAA;;AAAA;AAzVL;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAyVK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AApVL;;;AAAA;;;AAAA;;;AAAA;;;AAoVK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA/UL;;;AAAA;;;AAAA;;;AAAA;;;AA+UK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA1UL;;;AAAA;;;AAAA;;;AAAA;;;AA0UK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AArUL;;;AAAA;;;AAqUK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA/TL;;;AAAA;;;AAAA;;;AAAA;AA+TK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAxTL;;;AAAA;;;AAAA;;;AAAA;;;AAwTK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAlTL;;;AAAA;;;AAAA;;;AAAA;AAkTK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA3SL;;;AAAA;;;AAAA;;;AAAA;;;AA2SK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AArSL;;;AAAA;;;AAAA;;;AAAA;AAqSK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA9RL;;;AAAA;;;AAAA;;;AAAA;;;AA8RK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAxRL;;;AAAA;;;AAAA;;;AAAA;AAwRK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAjRL;;;AAAA;;;AAAA;;;AAAA;;;AAiRK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3QL;;;AAAA;;;AAAA;;;AAAA;AA2QK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AApQL;;;AAAA;;;AAAA;;;AAAA;;;AAoQK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA9PL;;;AAAA;;;AAAA;;;AAAA;AA8PK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAvPL;;;AAAA;;;AAAA;;;AAAA;;;AAuPK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAjPL;;;AAAA;;;AAAA;;;AAAA;AAiPK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA1OL;;;AAAA;;;AAAA;;;AAAA;;;AA0OK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AApOL;;;AAAA;;;AAAA;;;AAAA;AAoOK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA7NL;;;AAAA;;;AAAA;;;AAAA;;;AA6NK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAvNL;;;AAAA;;;AAAA;;;AAAA;AAuNK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAhNL;;;AAAA;;;AAAA;;;AAAA;;;AAgNK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA1ML;;;AAAA;;;AAAA;;;AAAA;AA0MK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAnML;;;AAAA;;;AAAA;;;AAAA;;;AAmMK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA7LL;;;AAAA;;;AAAA;;;AAAA;AA6LK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAtLL;;;AAAA;;;AAAA;;;AAAA;;;AAsLK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAhLL;;;AAAA;;;AAAA;;;AAAA;AAgLK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAzKL;;;AAAA;;;AAAA;;;AAAA;;;AAyKK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAnKL;;;AAAA;;;AAAA;;;AAAA;AAmKK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA5JL;;;AAAA;;;AAAA;;;AAAA;;;AA4JK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAtJL;;;AAAA;;;AAAA;;;AAAA;AAsJK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA/IL;;;AAAA;;;AAAA;;;AAAA;;;AA+IK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAxIL;;;AAAA;;;AAAA;;;AAAA;AAwIK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAnIL;;;AAAA;;;AAAA;;;AAAA;;;AAmIK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA9HL;;;AAAA;;;AAAA;;;AAAA;;;AA8HK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAzHL;;;AAAA;;;AAAA;;;AAAA;;;AAyHK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AApHL;;;AAAA;;;AAAA;;;AAAA;;;AAoHK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA/GL;;;AAAA;;;AAAA;;;AAAA;;;AA+GK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AArGL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAqGK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAhGL;;;AAAA;AAgGK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA3FL;;;AAAA;AAAA;;;AAAA;AA2FK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAtFL;;;AAAA;AAAA;;;AAAA;AAsFK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAjFL;;;AAAA;AAAA;;;AAAA;AAiFK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA5EL;;;AAAA;AAAA;;;AAAA;AA4EK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAvEL;;;AAAA;AAAA;;;AAAA;AAuEK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAlEL;;;AAAA;AAAA;;;AAAA;AAkEK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA7DL;;;AAAA;AAAA;;;AAAA;AA6DK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAxDL;;;AAAA;AAAA;;;AAAA;AAwDK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAnDL;;;AAAA;AAAA;;;AAAA;AAmDK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA9CL;;;AAAA;AA8CK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAzCL;;;AAAA;AAAA;;;AAAA;AAyCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AApCL;;;AAAA;AAAA;;;AAAA;AAoCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA/BL;;;AAAA;AAAA;;;AAAA;AA+BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA1BL;;;AAAA;AAAA;;;AAAA;AA0BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AArBL;;;AAAA;AAAA;;;AAAA;AAqBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAhBL;;;AAAA;AAAA;;;AAAA;AAgBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAXL;;;AAAA;AAAA;;;AAAA;AAWK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AANL;;;AAAA;AAAA;;;AAAA;AAMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AACK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAEQ;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAS;AACT;AAER;;;AAIY;;AAAA;AAAJ;;AAAI;AAAJ;;AACI;;AAAA;AAAJ;;AAAI;AAAJ;;AACA;;AAAA;;AAAS;AACA;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEQ;;AAAA;;AAAS;AACT;AAER;;;AAEY;;AAAA;AAAJ;;AAAI;;AAAJ;;AACS;AACA;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAA;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAA;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAA;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAIQ;;AAAA;;AAAS;AACT;AAER;;;AAGiB;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAEiB;;;;;;;;;AAAT;;AAAS;AACT;AAER;;;AAEiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AACT;AAAA;AADS;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;;AAGjB;;;AAEiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AACT;;AAAA;AADS;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;;AAGjB;;;AAEiB;;AAAA;;;;AAAA;AAAT;;AAAS;AACT;AAER;;;AAqBe;;AAA+D;AAA/D;AAAA;;AAAA;AAAA;AAA+D;AAA5D;AAAA;;AAAA;AAA4D;AAAzD;AAAA;;AAAA;AAAyD;AAA9C;AAAA;;AAAA;AAA8C;AAA3C;AAAA;;AAAA;AAA2C;AAAxC;AAAA;;AAAA;AAAwC;AAArC;AAAA;;AAAA;AAAqC;AAAlC;AAAA;;AAAA;AAAkC;AAA/B;AAAA;;AAAA;AAA+B;AAA5B;AAAA;;AAAA;AAA4B;AAApB;AAAA;;AAAA;AAAoB;AAAZ;AAAA;;AAAA;AAA1D;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 0x00 \"-\""
    },
    "16": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "18": {
      "op": "bz main_bare_routing@65",
      "stack_out": []
    },
    "21": {
      "op": "pushbytess 0x725c692b 0x17314559 0x53f34893 0x88c8b269 0xa464b7ab 0x9c8b11b8 0x6f40654e 0xec9a2974 0xc793708f 0x7ddb7499 0xa21c443d 0x6e7fb212 0xb007fcb0 0x2ebc20d4 0xb0954b66 0xdd140aef 0xace474da 0xba694990 0x6db581c0 0x91c8db89 0xdbe77158 0x9a0f22e1 0x64033d37 0x2a7237c5 0xe3a94458 0x42f87f7d 0x2b5542a4 0x9be2fbe9 0x1cd92515 0x64e1705c 0xf1271c50 0x2ab63b70 0x834bb7d2 0x531620d7 0x3fb9e769 0xfa8db0bc 0xa72ea485 0xb7b0ba19 0x74460c42 0xab320738 0x52ad4654 0x10156399 0x0f075957 0xbd843dff 0xb377d381 0x89767265 0x456b4b23 0x33d1b88c 0x6bf973ea 0x67cd6bb2 0x3f58805a 0x1e130039 0x509dc91d 0xa564a202 0x23650763 0xf8c8f8d5 0x23faf7a4 0x7d0afe15 0x48581adf 0xe007c10b // method \"verify_uint64_init(byte[])uint64\", method \"verify_uint64_add(uint64,uint64)uint64\", method \"verify_uint64_sub(uint64,uint64)uint64\", method \"verify_uint64_mul(uint64,uint64)uint64\", method \"verify_uint64_div(uint64,uint64)uint64\", method \"verify_uint64_mod(uint64,uint64)uint64\", method \"verify_uint64_and(uint64,uint64)uint64\", method \"verify_uint64_or(uint64,uint64)uint64\", method \"verify_uint64_xor(uint64,uint64)uint64\", method \"verify_uint64_not(uint64)uint64\", method \"verify_uint64_lshift(uint64,uint64)uint64\", method \"verify_uint64_rshift(uint64,uint64)uint64\", method \"verify_uint64_pow(uint64,uint64)uint64\", method \"verify_uint64_eq(uint64,uint64)bool\", method \"verify_uint64_ne(uint64,uint64)bool\", method \"verify_uint64_lt(uint64,uint64)bool\", method \"verify_uint64_le(uint64,uint64)bool\", method \"verify_uint64_gt(uint64,uint64)bool\", method \"verify_uint64_ge(uint64,uint64)bool\", method \"verify_bytes_init(uint64)byte[]\", method \"verify_bytes_add(byte[],byte[],uint64,uint64)byte[]\", method \"verify_bytes_eq(byte[],byte[])bool\", method \"verify_bytes_ne(byte[],byte[])bool\", method \"verify_bytes_and(byte[],byte[])byte[]\", method \"verify_bytes_or(byte[],byte[])byte[]\", method \"verify_bytes_xor(byte[],byte[])byte[]\", method \"verify_bytes_not(byte[],uint64)byte[]\", method \"verify_biguint_add(byte[],byte[])byte[]\", method \"verify_biguint_add_uint64(byte[],uint64)byte[]\", method \"verify_biguint_sub(byte[],byte[])byte[]\", method \"verify_biguint_sub_uint64(byte[],uint64)byte[]\", method \"verify_biguint_mul(byte[],byte[])byte[]\", method \"verify_biguint_mul_uint64(byte[],uint64)byte[]\", method \"verify_biguint_div(byte[],byte[])byte[]\", method \"verify_biguint_div_uint64(byte[],uint64)byte[]\", method \"verify_biguint_mod(byte[],byte[])byte[]\", method \"verify_biguint_mod_uint64(byte[],uint64)byte[]\", method \"verify_biguint_and(byte[],byte[])byte[]\", method \"verify_biguint_and_uint64(byte[],uint64)byte[]\", method \"verify_biguint_or(byte[],byte[])byte[]\", method \"verify_biguint_or_uint64(byte[],uint64)byte[]\", method \"verify_biguint_xor(byte[],byte[])byte[]\", method \"verify_biguint_xor_uint64(byte[],uint64)byte[]\", method \"verify_biguint_eq(byte[],byte[])bool\", method \"verify_biguint_eq_uint64(byte[],uint64)bool\", method \"verify_biguint_ne(byte[],byte[])bool\", method \"verify_biguint_ne_uint64(byte[],uint64)bool\", method \"verify_biguint_lt(byte[],byte[])bool\", method \"verify_biguint_lt_uint64(byte[],uint64)bool\", method \"verify_biguint_le(byte[],byte[])bool\", method \"verify_biguint_le_uint64(byte[],uint64)bool\", method \"verify_biguint_gt(byte[],byte[])bool\", method \"verify_biguint_gt_uint64(byte[],uint64)bool\", method \"verify_biguint_ge(byte[],byte[])bool\", method \"verify_biguint_ge_uint64(byte[],uint64)bool\", method \"verify_string_init(string)string\", method \"verify_string_startswith(string,string)bool\", method \"verify_string_endswith(string,string)bool\", method \"verify_string_join(string,string)string\", method \"verify_log(string,uint64,byte[],byte[],bool,string,uint64,uint256,ufixed32x8,ufixed256x16,byte[],byte[],byte[])void\""
    },
    "323": {
      "op": "txna ApplicationArgs 0"
    },
    "326": {
      "op": "match main_verify_uint64_init_route@3 main_verify_uint64_add_route@4 main_verify_uint64_sub_route@5 main_verify_uint64_mul_route@6 main_verify_uint64_div_route@7 main_verify_uint64_mod_route@8 main_verify_uint64_and_route@9 main_verify_uint64_or_route@10 main_verify_uint64_xor_route@11 main_verify_uint64_not_route@12 main_verify_uint64_lshift_route@13 main_verify_uint64_rshift_route@14 main_verify_uint64_pow_route@15 main_verify_uint64_eq_route@16 main_verify_uint64_ne_route@17 main_verify_uint64_lt_route@18 main_verify_uint64_le_route@19 main_verify_uint64_gt_route@20 main_verify_uint64_ge_route@21 main_verify_bytes_init_route@22 main_verify_bytes_add_route@23 main_verify_bytes_eq_route@24 main_verify_bytes_ne_route@25 main_verify_bytes_and_route@26 main_verify_bytes_or_route@27 main_verify_bytes_xor_route@28 main_verify_bytes_not_route@29 main_verify_biguint_add_route@30 main_verify_biguint_add_uint64_route@31 main_verify_biguint_sub_route@32 main_verify_biguint_sub_uint64_route@33 main_verify_biguint_mul_route@34 main_verify_biguint_mul_uint64_route@35 main_verify_biguint_div_route@36 main_verify_biguint_div_uint64_route@37 main_verify_biguint_mod_route@38 main_verify_biguint_mod_uint64_route@39 main_verify_biguint_and_route@40 main_verify_biguint_and_uint64_route@41 main_verify_biguint_or_route@42 main_verify_biguint_or_uint64_route@43 main_verify_biguint_xor_route@44 main_verify_biguint_xor_uint64_route@45 main_verify_biguint_eq_route@46 main_verify_biguint_eq_uint64_route@47 main_verify_biguint_ne_route@48 main_verify_biguint_ne_uint64_route@49 main_verify_biguint_lt_route@50 main_verify_biguint_lt_uint64_route@51 main_verify_biguint_le_route@52 main_verify_biguint_le_uint64_route@53 main_verify_biguint_gt_route@54 main_verify_biguint_gt_uint64_route@55 main_verify_biguint_ge_route@56 main_verify_biguint_ge_uint64_route@57 main_verify_string_init_route@58 main_verify_string_startswith_route@59 main_verify_string_endswith_route@60 main_verify_string_join_route@61 main_verify_log_route@62"
    },
    "448": {
      "block": "main_after_if_else@69",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "449": {
      "op": "return"
    },
    "450": {
      "block": "main_verify_log_route@62",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%530#0"
      ],
      "stack_out": [
        "tmp%530#0"
      ]
    },
    "452": {
      "op": "!",
      "defined_out": [
        "tmp%531#0"
      ],
      "stack_out": [
        "tmp%531#0"
      ]
    },
    "453": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "454": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%532#0"
      ],
      "stack_out": [
        "tmp%532#0"
      ]
    },
    "456": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "457": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%534#0"
      ],
      "stack_out": [
        "tmp%534#0"
      ]
    },
    "460": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%535#0"
      ],
      "stack_out": [
        "tmp%535#0"
      ]
    },
    "463": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%535#0",
        "tmp%536#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%536#0"
      ]
    },
    "466": {
      "op": "btoi",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0"
      ]
    },
    "467": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%538#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%538#0"
      ]
    },
    "470": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0"
      ]
    },
    "473": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%540#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%540#0"
      ]
    },
    "476": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0"
      ]
    },
    "479": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0"
      ]
    },
    "482": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0"
      ]
    },
    "485": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0"
      ]
    },
    "488": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0"
      ]
    },
    "491": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0"
      ]
    },
    "494": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0"
      ]
    },
    "497": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%548#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%548#0"
      ]
    },
    "500": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%549#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%549#0"
      ]
    },
    "503": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%549#0",
        "tmp%550#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%549#0",
        "tmp%550#0"
      ]
    },
    "506": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%549#0",
        "tmp%551#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%549#0",
        "tmp%551#0"
      ]
    },
    "509": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%549#0",
        "tmp%551#0",
        "tmp%552#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%549#0",
        "tmp%551#0",
        "tmp%552#0"
      ]
    },
    "512": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%549#0",
        "tmp%551#0",
        "tmp%553#0"
      ],
      "stack_out": [
        "tmp%535#0",
        "tmp%537#0",
        "tmp%539#0",
        "tmp%541#0",
        "tmp%542#0",
        "tmp%543#0",
        "tmp%544#0",
        "tmp%545#0",
        "tmp%546#0",
        "tmp%547#0",
        "tmp%549#0",
        "tmp%551#0",
        "tmp%553#0"
      ]
    },
    "515": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_log",
      "op": "callsub verify_log",
      "stack_out": []
    },
    "518": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "519": {
      "op": "return"
    },
    "520": {
      "block": "main_verify_string_join_route@61",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%521#0"
      ],
      "stack_out": [
        "tmp%521#0"
      ]
    },
    "522": {
      "op": "!",
      "defined_out": [
        "tmp%522#0"
      ],
      "stack_out": [
        "tmp%522#0"
      ]
    },
    "523": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "524": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%523#0"
      ],
      "stack_out": [
        "tmp%523#0"
      ]
    },
    "526": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "527": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%525#0"
      ],
      "stack_out": [
        "tmp%525#0"
      ]
    },
    "530": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%526#0"
      ],
      "stack_out": [
        "tmp%526#0"
      ]
    },
    "533": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%526#0",
        "tmp%527#0"
      ],
      "stack_out": [
        "tmp%526#0",
        "tmp%527#0"
      ]
    },
    "536": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%526#0",
        "tmp%528#0"
      ],
      "stack_out": [
        "tmp%526#0",
        "tmp%528#0"
      ]
    },
    "539": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_join",
      "op": "callsub verify_string_join",
      "defined_out": [
        "to_encode%58#0"
      ],
      "stack_out": [
        "to_encode%58#0"
      ]
    },
    "542": {
      "op": "dup",
      "defined_out": [
        "to_encode%58#0",
        "to_encode%58#0 (copy)"
      ],
      "stack_out": [
        "to_encode%58#0",
        "to_encode%58#0 (copy)"
      ]
    },
    "543": {
      "op": "len",
      "defined_out": [
        "length%23#0",
        "to_encode%58#0"
      ],
      "stack_out": [
        "to_encode%58#0",
        "length%23#0"
      ]
    },
    "544": {
      "op": "itob",
      "defined_out": [
        "as_bytes%23#0",
        "to_encode%58#0"
      ],
      "stack_out": [
        "to_encode%58#0",
        "as_bytes%23#0"
      ]
    },
    "545": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%23#0",
        "to_encode%58#0"
      ],
      "stack_out": [
        "to_encode%58#0",
        "length_uint16%23#0"
      ]
    },
    "548": {
      "op": "swap",
      "stack_out": [
        "length_uint16%23#0",
        "to_encode%58#0"
      ]
    },
    "549": {
      "op": "concat",
      "defined_out": [
        "encoded_value%23#0"
      ],
      "stack_out": [
        "encoded_value%23#0"
      ]
    },
    "550": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%23#0"
      ],
      "stack_out": [
        "encoded_value%23#0",
        "0x151f7c75"
      ]
    },
    "551": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%23#0"
      ]
    },
    "552": {
      "op": "concat",
      "defined_out": [
        "tmp%529#0"
      ],
      "stack_out": [
        "tmp%529#0"
      ]
    },
    "553": {
      "op": "log",
      "stack_out": []
    },
    "554": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "555": {
      "op": "return"
    },
    "556": {
      "block": "main_verify_string_endswith_route@60",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%512#0"
      ],
      "stack_out": [
        "tmp%512#0"
      ]
    },
    "558": {
      "op": "!",
      "defined_out": [
        "tmp%513#0"
      ],
      "stack_out": [
        "tmp%513#0"
      ]
    },
    "559": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "560": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%514#0"
      ],
      "stack_out": [
        "tmp%514#0"
      ]
    },
    "562": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "563": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%516#0"
      ],
      "stack_out": [
        "tmp%516#0"
      ]
    },
    "566": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%517#0"
      ],
      "stack_out": [
        "tmp%517#0"
      ]
    },
    "569": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%517#0",
        "tmp%518#0"
      ],
      "stack_out": [
        "tmp%517#0",
        "tmp%518#0"
      ]
    },
    "572": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%517#0",
        "tmp%519#0"
      ],
      "stack_out": [
        "tmp%517#0",
        "tmp%519#0"
      ]
    },
    "575": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_endswith",
      "op": "callsub verify_string_endswith",
      "defined_out": [
        "to_encode%57#0"
      ],
      "stack_out": [
        "to_encode%57#0"
      ]
    },
    "578": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%57#0"
      ],
      "stack_out": [
        "to_encode%57#0",
        "0x00"
      ]
    },
    "579": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%57#0"
      ],
      "stack_out": [
        "to_encode%57#0",
        "0x00",
        "0"
      ]
    },
    "580": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%57#0"
      ]
    },
    "582": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%21#0"
      ],
      "stack_out": [
        "encoded_bool%21#0"
      ]
    },
    "583": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%21#0"
      ],
      "stack_out": [
        "encoded_bool%21#0",
        "0x151f7c75"
      ]
    },
    "584": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%21#0"
      ]
    },
    "585": {
      "op": "concat",
      "defined_out": [
        "tmp%520#0"
      ],
      "stack_out": [
        "tmp%520#0"
      ]
    },
    "586": {
      "op": "log",
      "stack_out": []
    },
    "587": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "588": {
      "op": "return"
    },
    "589": {
      "block": "main_verify_string_startswith_route@59",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%503#0"
      ],
      "stack_out": [
        "tmp%503#0"
      ]
    },
    "591": {
      "op": "!",
      "defined_out": [
        "tmp%504#0"
      ],
      "stack_out": [
        "tmp%504#0"
      ]
    },
    "592": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "593": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%505#0"
      ],
      "stack_out": [
        "tmp%505#0"
      ]
    },
    "595": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "596": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%507#0"
      ],
      "stack_out": [
        "tmp%507#0"
      ]
    },
    "599": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%508#0"
      ],
      "stack_out": [
        "tmp%508#0"
      ]
    },
    "602": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%508#0",
        "tmp%509#0"
      ],
      "stack_out": [
        "tmp%508#0",
        "tmp%509#0"
      ]
    },
    "605": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%508#0",
        "tmp%510#0"
      ],
      "stack_out": [
        "tmp%508#0",
        "tmp%510#0"
      ]
    },
    "608": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_startswith",
      "op": "callsub verify_string_startswith",
      "defined_out": [
        "to_encode%56#0"
      ],
      "stack_out": [
        "to_encode%56#0"
      ]
    },
    "611": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%56#0"
      ],
      "stack_out": [
        "to_encode%56#0",
        "0x00"
      ]
    },
    "612": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%56#0"
      ],
      "stack_out": [
        "to_encode%56#0",
        "0x00",
        "0"
      ]
    },
    "613": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%56#0"
      ]
    },
    "615": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%20#0"
      ],
      "stack_out": [
        "encoded_bool%20#0"
      ]
    },
    "616": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%20#0"
      ],
      "stack_out": [
        "encoded_bool%20#0",
        "0x151f7c75"
      ]
    },
    "617": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%20#0"
      ]
    },
    "618": {
      "op": "concat",
      "defined_out": [
        "tmp%511#0"
      ],
      "stack_out": [
        "tmp%511#0"
      ]
    },
    "619": {
      "op": "log",
      "stack_out": []
    },
    "620": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "621": {
      "op": "return"
    },
    "622": {
      "block": "main_verify_string_init_route@58",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%496#0"
      ],
      "stack_out": [
        "tmp%496#0"
      ]
    },
    "624": {
      "op": "!",
      "defined_out": [
        "tmp%497#0"
      ],
      "stack_out": [
        "tmp%497#0"
      ]
    },
    "625": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "626": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%498#0"
      ],
      "stack_out": [
        "tmp%498#0"
      ]
    },
    "628": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "629": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%500#0"
      ],
      "stack_out": [
        "tmp%500#0"
      ]
    },
    "632": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%501#0"
      ],
      "stack_out": [
        "tmp%501#0"
      ]
    },
    "635": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_init",
      "op": "callsub verify_string_init",
      "defined_out": [
        "to_encode%55#0"
      ],
      "stack_out": [
        "to_encode%55#0"
      ]
    },
    "638": {
      "op": "dup",
      "defined_out": [
        "to_encode%55#0",
        "to_encode%55#0 (copy)"
      ],
      "stack_out": [
        "to_encode%55#0",
        "to_encode%55#0 (copy)"
      ]
    },
    "639": {
      "op": "len",
      "defined_out": [
        "length%22#0",
        "to_encode%55#0"
      ],
      "stack_out": [
        "to_encode%55#0",
        "length%22#0"
      ]
    },
    "640": {
      "op": "itob",
      "defined_out": [
        "as_bytes%22#0",
        "to_encode%55#0"
      ],
      "stack_out": [
        "to_encode%55#0",
        "as_bytes%22#0"
      ]
    },
    "641": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%22#0",
        "to_encode%55#0"
      ],
      "stack_out": [
        "to_encode%55#0",
        "length_uint16%22#0"
      ]
    },
    "644": {
      "op": "swap",
      "stack_out": [
        "length_uint16%22#0",
        "to_encode%55#0"
      ]
    },
    "645": {
      "op": "concat",
      "defined_out": [
        "encoded_value%22#0"
      ],
      "stack_out": [
        "encoded_value%22#0"
      ]
    },
    "646": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%22#0"
      ],
      "stack_out": [
        "encoded_value%22#0",
        "0x151f7c75"
      ]
    },
    "647": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%22#0"
      ]
    },
    "648": {
      "op": "concat",
      "defined_out": [
        "tmp%502#0"
      ],
      "stack_out": [
        "tmp%502#0"
      ]
    },
    "649": {
      "op": "log",
      "stack_out": []
    },
    "650": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "651": {
      "op": "return"
    },
    "652": {
      "block": "main_verify_biguint_ge_uint64_route@57",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%487#0"
      ],
      "stack_out": [
        "tmp%487#0"
      ]
    },
    "654": {
      "op": "!",
      "defined_out": [
        "tmp%488#0"
      ],
      "stack_out": [
        "tmp%488#0"
      ]
    },
    "655": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "656": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%489#0"
      ],
      "stack_out": [
        "tmp%489#0"
      ]
    },
    "658": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "659": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%491#0"
      ],
      "stack_out": [
        "tmp%491#0"
      ]
    },
    "662": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%492#0"
      ],
      "stack_out": [
        "tmp%492#0"
      ]
    },
    "665": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%492#0",
        "tmp%493#0"
      ],
      "stack_out": [
        "tmp%492#0",
        "tmp%493#0"
      ]
    },
    "668": {
      "op": "btoi",
      "defined_out": [
        "tmp%492#0",
        "tmp%494#0"
      ],
      "stack_out": [
        "tmp%492#0",
        "tmp%494#0"
      ]
    },
    "669": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ge_uint64",
      "op": "callsub verify_biguint_ge_uint64",
      "defined_out": [
        "to_encode%54#0"
      ],
      "stack_out": [
        "to_encode%54#0"
      ]
    },
    "672": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%54#0"
      ],
      "stack_out": [
        "to_encode%54#0",
        "0x00"
      ]
    },
    "673": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%54#0"
      ],
      "stack_out": [
        "to_encode%54#0",
        "0x00",
        "0"
      ]
    },
    "674": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%54#0"
      ]
    },
    "676": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%19#0"
      ],
      "stack_out": [
        "encoded_bool%19#0"
      ]
    },
    "677": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%19#0"
      ],
      "stack_out": [
        "encoded_bool%19#0",
        "0x151f7c75"
      ]
    },
    "678": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%19#0"
      ]
    },
    "679": {
      "op": "concat",
      "defined_out": [
        "tmp%495#0"
      ],
      "stack_out": [
        "tmp%495#0"
      ]
    },
    "680": {
      "op": "log",
      "stack_out": []
    },
    "681": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "682": {
      "op": "return"
    },
    "683": {
      "block": "main_verify_biguint_ge_route@56",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%478#0"
      ],
      "stack_out": [
        "tmp%478#0"
      ]
    },
    "685": {
      "op": "!",
      "defined_out": [
        "tmp%479#0"
      ],
      "stack_out": [
        "tmp%479#0"
      ]
    },
    "686": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "687": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%480#0"
      ],
      "stack_out": [
        "tmp%480#0"
      ]
    },
    "689": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "690": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%482#0"
      ],
      "stack_out": [
        "tmp%482#0"
      ]
    },
    "693": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%483#0"
      ],
      "stack_out": [
        "tmp%483#0"
      ]
    },
    "696": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%483#0",
        "tmp%484#0"
      ],
      "stack_out": [
        "tmp%483#0",
        "tmp%484#0"
      ]
    },
    "699": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%483#0",
        "tmp%485#0"
      ],
      "stack_out": [
        "tmp%483#0",
        "tmp%485#0"
      ]
    },
    "702": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ge",
      "op": "callsub verify_biguint_ge",
      "defined_out": [
        "to_encode%53#0"
      ],
      "stack_out": [
        "to_encode%53#0"
      ]
    },
    "705": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%53#0"
      ],
      "stack_out": [
        "to_encode%53#0",
        "0x00"
      ]
    },
    "706": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%53#0"
      ],
      "stack_out": [
        "to_encode%53#0",
        "0x00",
        "0"
      ]
    },
    "707": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%53#0"
      ]
    },
    "709": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%18#0"
      ],
      "stack_out": [
        "encoded_bool%18#0"
      ]
    },
    "710": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%18#0"
      ],
      "stack_out": [
        "encoded_bool%18#0",
        "0x151f7c75"
      ]
    },
    "711": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%18#0"
      ]
    },
    "712": {
      "op": "concat",
      "defined_out": [
        "tmp%486#0"
      ],
      "stack_out": [
        "tmp%486#0"
      ]
    },
    "713": {
      "op": "log",
      "stack_out": []
    },
    "714": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "715": {
      "op": "return"
    },
    "716": {
      "block": "main_verify_biguint_gt_uint64_route@55",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%469#0"
      ],
      "stack_out": [
        "tmp%469#0"
      ]
    },
    "718": {
      "op": "!",
      "defined_out": [
        "tmp%470#0"
      ],
      "stack_out": [
        "tmp%470#0"
      ]
    },
    "719": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "720": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%471#0"
      ],
      "stack_out": [
        "tmp%471#0"
      ]
    },
    "722": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "723": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%473#0"
      ],
      "stack_out": [
        "tmp%473#0"
      ]
    },
    "726": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%474#0"
      ],
      "stack_out": [
        "tmp%474#0"
      ]
    },
    "729": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%474#0",
        "tmp%475#0"
      ],
      "stack_out": [
        "tmp%474#0",
        "tmp%475#0"
      ]
    },
    "732": {
      "op": "btoi",
      "defined_out": [
        "tmp%474#0",
        "tmp%476#0"
      ],
      "stack_out": [
        "tmp%474#0",
        "tmp%476#0"
      ]
    },
    "733": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_gt_uint64",
      "op": "callsub verify_biguint_gt_uint64",
      "defined_out": [
        "to_encode%52#0"
      ],
      "stack_out": [
        "to_encode%52#0"
      ]
    },
    "736": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%52#0"
      ],
      "stack_out": [
        "to_encode%52#0",
        "0x00"
      ]
    },
    "737": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%52#0"
      ],
      "stack_out": [
        "to_encode%52#0",
        "0x00",
        "0"
      ]
    },
    "738": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%52#0"
      ]
    },
    "740": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%17#0"
      ],
      "stack_out": [
        "encoded_bool%17#0"
      ]
    },
    "741": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%17#0"
      ],
      "stack_out": [
        "encoded_bool%17#0",
        "0x151f7c75"
      ]
    },
    "742": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%17#0"
      ]
    },
    "743": {
      "op": "concat",
      "defined_out": [
        "tmp%477#0"
      ],
      "stack_out": [
        "tmp%477#0"
      ]
    },
    "744": {
      "op": "log",
      "stack_out": []
    },
    "745": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "746": {
      "op": "return"
    },
    "747": {
      "block": "main_verify_biguint_gt_route@54",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%460#0"
      ],
      "stack_out": [
        "tmp%460#0"
      ]
    },
    "749": {
      "op": "!",
      "defined_out": [
        "tmp%461#0"
      ],
      "stack_out": [
        "tmp%461#0"
      ]
    },
    "750": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "751": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%462#0"
      ],
      "stack_out": [
        "tmp%462#0"
      ]
    },
    "753": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "754": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%464#0"
      ],
      "stack_out": [
        "tmp%464#0"
      ]
    },
    "757": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%465#0"
      ],
      "stack_out": [
        "tmp%465#0"
      ]
    },
    "760": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%465#0",
        "tmp%466#0"
      ],
      "stack_out": [
        "tmp%465#0",
        "tmp%466#0"
      ]
    },
    "763": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%465#0",
        "tmp%467#0"
      ],
      "stack_out": [
        "tmp%465#0",
        "tmp%467#0"
      ]
    },
    "766": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_gt",
      "op": "callsub verify_biguint_gt",
      "defined_out": [
        "to_encode%51#0"
      ],
      "stack_out": [
        "to_encode%51#0"
      ]
    },
    "769": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%51#0"
      ],
      "stack_out": [
        "to_encode%51#0",
        "0x00"
      ]
    },
    "770": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%51#0"
      ],
      "stack_out": [
        "to_encode%51#0",
        "0x00",
        "0"
      ]
    },
    "771": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%51#0"
      ]
    },
    "773": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%16#0"
      ],
      "stack_out": [
        "encoded_bool%16#0"
      ]
    },
    "774": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%16#0"
      ],
      "stack_out": [
        "encoded_bool%16#0",
        "0x151f7c75"
      ]
    },
    "775": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%16#0"
      ]
    },
    "776": {
      "op": "concat",
      "defined_out": [
        "tmp%468#0"
      ],
      "stack_out": [
        "tmp%468#0"
      ]
    },
    "777": {
      "op": "log",
      "stack_out": []
    },
    "778": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "779": {
      "op": "return"
    },
    "780": {
      "block": "main_verify_biguint_le_uint64_route@53",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%451#0"
      ],
      "stack_out": [
        "tmp%451#0"
      ]
    },
    "782": {
      "op": "!",
      "defined_out": [
        "tmp%452#0"
      ],
      "stack_out": [
        "tmp%452#0"
      ]
    },
    "783": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "784": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%453#0"
      ],
      "stack_out": [
        "tmp%453#0"
      ]
    },
    "786": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "787": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%455#0"
      ],
      "stack_out": [
        "tmp%455#0"
      ]
    },
    "790": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%456#0"
      ],
      "stack_out": [
        "tmp%456#0"
      ]
    },
    "793": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%456#0",
        "tmp%457#0"
      ],
      "stack_out": [
        "tmp%456#0",
        "tmp%457#0"
      ]
    },
    "796": {
      "op": "btoi",
      "defined_out": [
        "tmp%456#0",
        "tmp%458#0"
      ],
      "stack_out": [
        "tmp%456#0",
        "tmp%458#0"
      ]
    },
    "797": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_le_uint64",
      "op": "callsub verify_biguint_le_uint64",
      "defined_out": [
        "to_encode%50#0"
      ],
      "stack_out": [
        "to_encode%50#0"
      ]
    },
    "800": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%50#0"
      ],
      "stack_out": [
        "to_encode%50#0",
        "0x00"
      ]
    },
    "801": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%50#0"
      ],
      "stack_out": [
        "to_encode%50#0",
        "0x00",
        "0"
      ]
    },
    "802": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%50#0"
      ]
    },
    "804": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%15#0"
      ],
      "stack_out": [
        "encoded_bool%15#0"
      ]
    },
    "805": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%15#0"
      ],
      "stack_out": [
        "encoded_bool%15#0",
        "0x151f7c75"
      ]
    },
    "806": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%15#0"
      ]
    },
    "807": {
      "op": "concat",
      "defined_out": [
        "tmp%459#0"
      ],
      "stack_out": [
        "tmp%459#0"
      ]
    },
    "808": {
      "op": "log",
      "stack_out": []
    },
    "809": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "810": {
      "op": "return"
    },
    "811": {
      "block": "main_verify_biguint_le_route@52",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%442#0"
      ],
      "stack_out": [
        "tmp%442#0"
      ]
    },
    "813": {
      "op": "!",
      "defined_out": [
        "tmp%443#0"
      ],
      "stack_out": [
        "tmp%443#0"
      ]
    },
    "814": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "815": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%444#0"
      ],
      "stack_out": [
        "tmp%444#0"
      ]
    },
    "817": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "818": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%446#0"
      ],
      "stack_out": [
        "tmp%446#0"
      ]
    },
    "821": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%447#0"
      ],
      "stack_out": [
        "tmp%447#0"
      ]
    },
    "824": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%447#0",
        "tmp%448#0"
      ],
      "stack_out": [
        "tmp%447#0",
        "tmp%448#0"
      ]
    },
    "827": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%447#0",
        "tmp%449#0"
      ],
      "stack_out": [
        "tmp%447#0",
        "tmp%449#0"
      ]
    },
    "830": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_le",
      "op": "callsub verify_biguint_le",
      "defined_out": [
        "to_encode%49#0"
      ],
      "stack_out": [
        "to_encode%49#0"
      ]
    },
    "833": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%49#0"
      ],
      "stack_out": [
        "to_encode%49#0",
        "0x00"
      ]
    },
    "834": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%49#0"
      ],
      "stack_out": [
        "to_encode%49#0",
        "0x00",
        "0"
      ]
    },
    "835": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%49#0"
      ]
    },
    "837": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%14#0"
      ],
      "stack_out": [
        "encoded_bool%14#0"
      ]
    },
    "838": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%14#0"
      ],
      "stack_out": [
        "encoded_bool%14#0",
        "0x151f7c75"
      ]
    },
    "839": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%14#0"
      ]
    },
    "840": {
      "op": "concat",
      "defined_out": [
        "tmp%450#0"
      ],
      "stack_out": [
        "tmp%450#0"
      ]
    },
    "841": {
      "op": "log",
      "stack_out": []
    },
    "842": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "843": {
      "op": "return"
    },
    "844": {
      "block": "main_verify_biguint_lt_uint64_route@51",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%433#0"
      ],
      "stack_out": [
        "tmp%433#0"
      ]
    },
    "846": {
      "op": "!",
      "defined_out": [
        "tmp%434#0"
      ],
      "stack_out": [
        "tmp%434#0"
      ]
    },
    "847": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "848": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%435#0"
      ],
      "stack_out": [
        "tmp%435#0"
      ]
    },
    "850": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "851": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%437#0"
      ],
      "stack_out": [
        "tmp%437#0"
      ]
    },
    "854": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%438#0"
      ],
      "stack_out": [
        "tmp%438#0"
      ]
    },
    "857": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%438#0",
        "tmp%439#0"
      ],
      "stack_out": [
        "tmp%438#0",
        "tmp%439#0"
      ]
    },
    "860": {
      "op": "btoi",
      "defined_out": [
        "tmp%438#0",
        "tmp%440#0"
      ],
      "stack_out": [
        "tmp%438#0",
        "tmp%440#0"
      ]
    },
    "861": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_lt_uint64",
      "op": "callsub verify_biguint_lt_uint64",
      "defined_out": [
        "to_encode%48#0"
      ],
      "stack_out": [
        "to_encode%48#0"
      ]
    },
    "864": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%48#0"
      ],
      "stack_out": [
        "to_encode%48#0",
        "0x00"
      ]
    },
    "865": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%48#0"
      ],
      "stack_out": [
        "to_encode%48#0",
        "0x00",
        "0"
      ]
    },
    "866": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%48#0"
      ]
    },
    "868": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%13#0"
      ],
      "stack_out": [
        "encoded_bool%13#0"
      ]
    },
    "869": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%13#0"
      ],
      "stack_out": [
        "encoded_bool%13#0",
        "0x151f7c75"
      ]
    },
    "870": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%13#0"
      ]
    },
    "871": {
      "op": "concat",
      "defined_out": [
        "tmp%441#0"
      ],
      "stack_out": [
        "tmp%441#0"
      ]
    },
    "872": {
      "op": "log",
      "stack_out": []
    },
    "873": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "874": {
      "op": "return"
    },
    "875": {
      "block": "main_verify_biguint_lt_route@50",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%424#0"
      ],
      "stack_out": [
        "tmp%424#0"
      ]
    },
    "877": {
      "op": "!",
      "defined_out": [
        "tmp%425#0"
      ],
      "stack_out": [
        "tmp%425#0"
      ]
    },
    "878": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "879": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%426#0"
      ],
      "stack_out": [
        "tmp%426#0"
      ]
    },
    "881": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "882": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%428#0"
      ],
      "stack_out": [
        "tmp%428#0"
      ]
    },
    "885": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%429#0"
      ],
      "stack_out": [
        "tmp%429#0"
      ]
    },
    "888": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%429#0",
        "tmp%430#0"
      ],
      "stack_out": [
        "tmp%429#0",
        "tmp%430#0"
      ]
    },
    "891": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%429#0",
        "tmp%431#0"
      ],
      "stack_out": [
        "tmp%429#0",
        "tmp%431#0"
      ]
    },
    "894": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_lt",
      "op": "callsub verify_biguint_lt",
      "defined_out": [
        "to_encode%47#0"
      ],
      "stack_out": [
        "to_encode%47#0"
      ]
    },
    "897": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%47#0"
      ],
      "stack_out": [
        "to_encode%47#0",
        "0x00"
      ]
    },
    "898": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%47#0"
      ],
      "stack_out": [
        "to_encode%47#0",
        "0x00",
        "0"
      ]
    },
    "899": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%47#0"
      ]
    },
    "901": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%12#0"
      ],
      "stack_out": [
        "encoded_bool%12#0"
      ]
    },
    "902": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%12#0"
      ],
      "stack_out": [
        "encoded_bool%12#0",
        "0x151f7c75"
      ]
    },
    "903": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%12#0"
      ]
    },
    "904": {
      "op": "concat",
      "defined_out": [
        "tmp%432#0"
      ],
      "stack_out": [
        "tmp%432#0"
      ]
    },
    "905": {
      "op": "log",
      "stack_out": []
    },
    "906": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "907": {
      "op": "return"
    },
    "908": {
      "block": "main_verify_biguint_ne_uint64_route@49",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%415#0"
      ],
      "stack_out": [
        "tmp%415#0"
      ]
    },
    "910": {
      "op": "!",
      "defined_out": [
        "tmp%416#0"
      ],
      "stack_out": [
        "tmp%416#0"
      ]
    },
    "911": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "912": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%417#0"
      ],
      "stack_out": [
        "tmp%417#0"
      ]
    },
    "914": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "915": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%419#0"
      ],
      "stack_out": [
        "tmp%419#0"
      ]
    },
    "918": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%420#0"
      ],
      "stack_out": [
        "tmp%420#0"
      ]
    },
    "921": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%420#0",
        "tmp%421#0"
      ],
      "stack_out": [
        "tmp%420#0",
        "tmp%421#0"
      ]
    },
    "924": {
      "op": "btoi",
      "defined_out": [
        "tmp%420#0",
        "tmp%422#0"
      ],
      "stack_out": [
        "tmp%420#0",
        "tmp%422#0"
      ]
    },
    "925": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ne_uint64",
      "op": "callsub verify_biguint_ne_uint64",
      "defined_out": [
        "to_encode%46#0"
      ],
      "stack_out": [
        "to_encode%46#0"
      ]
    },
    "928": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%46#0"
      ],
      "stack_out": [
        "to_encode%46#0",
        "0x00"
      ]
    },
    "929": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%46#0"
      ],
      "stack_out": [
        "to_encode%46#0",
        "0x00",
        "0"
      ]
    },
    "930": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%46#0"
      ]
    },
    "932": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%11#0"
      ],
      "stack_out": [
        "encoded_bool%11#0"
      ]
    },
    "933": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%11#0"
      ],
      "stack_out": [
        "encoded_bool%11#0",
        "0x151f7c75"
      ]
    },
    "934": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%11#0"
      ]
    },
    "935": {
      "op": "concat",
      "defined_out": [
        "tmp%423#0"
      ],
      "stack_out": [
        "tmp%423#0"
      ]
    },
    "936": {
      "op": "log",
      "stack_out": []
    },
    "937": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "938": {
      "op": "return"
    },
    "939": {
      "block": "main_verify_biguint_ne_route@48",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%406#0"
      ],
      "stack_out": [
        "tmp%406#0"
      ]
    },
    "941": {
      "op": "!",
      "defined_out": [
        "tmp%407#0"
      ],
      "stack_out": [
        "tmp%407#0"
      ]
    },
    "942": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "943": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%408#0"
      ],
      "stack_out": [
        "tmp%408#0"
      ]
    },
    "945": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "946": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%410#0"
      ],
      "stack_out": [
        "tmp%410#0"
      ]
    },
    "949": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%411#0"
      ],
      "stack_out": [
        "tmp%411#0"
      ]
    },
    "952": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%411#0",
        "tmp%412#0"
      ],
      "stack_out": [
        "tmp%411#0",
        "tmp%412#0"
      ]
    },
    "955": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%411#0",
        "tmp%413#0"
      ],
      "stack_out": [
        "tmp%411#0",
        "tmp%413#0"
      ]
    },
    "958": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ne",
      "op": "callsub verify_biguint_ne",
      "defined_out": [
        "to_encode%45#0"
      ],
      "stack_out": [
        "to_encode%45#0"
      ]
    },
    "961": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%45#0"
      ],
      "stack_out": [
        "to_encode%45#0",
        "0x00"
      ]
    },
    "962": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%45#0"
      ],
      "stack_out": [
        "to_encode%45#0",
        "0x00",
        "0"
      ]
    },
    "963": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%45#0"
      ]
    },
    "965": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%10#0"
      ],
      "stack_out": [
        "encoded_bool%10#0"
      ]
    },
    "966": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%10#0"
      ],
      "stack_out": [
        "encoded_bool%10#0",
        "0x151f7c75"
      ]
    },
    "967": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%10#0"
      ]
    },
    "968": {
      "op": "concat",
      "defined_out": [
        "tmp%414#0"
      ],
      "stack_out": [
        "tmp%414#0"
      ]
    },
    "969": {
      "op": "log",
      "stack_out": []
    },
    "970": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "971": {
      "op": "return"
    },
    "972": {
      "block": "main_verify_biguint_eq_uint64_route@47",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%397#0"
      ],
      "stack_out": [
        "tmp%397#0"
      ]
    },
    "974": {
      "op": "!",
      "defined_out": [
        "tmp%398#0"
      ],
      "stack_out": [
        "tmp%398#0"
      ]
    },
    "975": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "976": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%399#0"
      ],
      "stack_out": [
        "tmp%399#0"
      ]
    },
    "978": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "979": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%401#0"
      ],
      "stack_out": [
        "tmp%401#0"
      ]
    },
    "982": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%402#0"
      ],
      "stack_out": [
        "tmp%402#0"
      ]
    },
    "985": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%402#0",
        "tmp%403#0"
      ],
      "stack_out": [
        "tmp%402#0",
        "tmp%403#0"
      ]
    },
    "988": {
      "op": "btoi",
      "defined_out": [
        "tmp%402#0",
        "tmp%404#0"
      ],
      "stack_out": [
        "tmp%402#0",
        "tmp%404#0"
      ]
    },
    "989": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_eq_uint64",
      "op": "callsub verify_biguint_eq_uint64",
      "defined_out": [
        "to_encode%44#0"
      ],
      "stack_out": [
        "to_encode%44#0"
      ]
    },
    "992": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%44#0"
      ],
      "stack_out": [
        "to_encode%44#0",
        "0x00"
      ]
    },
    "993": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%44#0"
      ],
      "stack_out": [
        "to_encode%44#0",
        "0x00",
        "0"
      ]
    },
    "994": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%44#0"
      ]
    },
    "996": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%9#0"
      ],
      "stack_out": [
        "encoded_bool%9#0"
      ]
    },
    "997": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%9#0"
      ],
      "stack_out": [
        "encoded_bool%9#0",
        "0x151f7c75"
      ]
    },
    "998": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%9#0"
      ]
    },
    "999": {
      "op": "concat",
      "defined_out": [
        "tmp%405#0"
      ],
      "stack_out": [
        "tmp%405#0"
      ]
    },
    "1000": {
      "op": "log",
      "stack_out": []
    },
    "1001": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1002": {
      "op": "return"
    },
    "1003": {
      "block": "main_verify_biguint_eq_route@46",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%388#0"
      ],
      "stack_out": [
        "tmp%388#0"
      ]
    },
    "1005": {
      "op": "!",
      "defined_out": [
        "tmp%389#0"
      ],
      "stack_out": [
        "tmp%389#0"
      ]
    },
    "1006": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1007": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%390#0"
      ],
      "stack_out": [
        "tmp%390#0"
      ]
    },
    "1009": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1010": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%392#0"
      ],
      "stack_out": [
        "tmp%392#0"
      ]
    },
    "1013": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%393#0"
      ],
      "stack_out": [
        "tmp%393#0"
      ]
    },
    "1016": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%393#0",
        "tmp%394#0"
      ],
      "stack_out": [
        "tmp%393#0",
        "tmp%394#0"
      ]
    },
    "1019": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%393#0",
        "tmp%395#0"
      ],
      "stack_out": [
        "tmp%393#0",
        "tmp%395#0"
      ]
    },
    "1022": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_eq",
      "op": "callsub verify_biguint_eq",
      "defined_out": [
        "to_encode%43#0"
      ],
      "stack_out": [
        "to_encode%43#0"
      ]
    },
    "1025": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%43#0"
      ],
      "stack_out": [
        "to_encode%43#0",
        "0x00"
      ]
    },
    "1026": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%43#0"
      ],
      "stack_out": [
        "to_encode%43#0",
        "0x00",
        "0"
      ]
    },
    "1027": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%43#0"
      ]
    },
    "1029": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%8#0"
      ],
      "stack_out": [
        "encoded_bool%8#0"
      ]
    },
    "1030": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%8#0"
      ],
      "stack_out": [
        "encoded_bool%8#0",
        "0x151f7c75"
      ]
    },
    "1031": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%8#0"
      ]
    },
    "1032": {
      "op": "concat",
      "defined_out": [
        "tmp%396#0"
      ],
      "stack_out": [
        "tmp%396#0"
      ]
    },
    "1033": {
      "op": "log",
      "stack_out": []
    },
    "1034": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1035": {
      "op": "return"
    },
    "1036": {
      "block": "main_verify_biguint_xor_uint64_route@45",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%379#0"
      ],
      "stack_out": [
        "tmp%379#0"
      ]
    },
    "1038": {
      "op": "!",
      "defined_out": [
        "tmp%380#0"
      ],
      "stack_out": [
        "tmp%380#0"
      ]
    },
    "1039": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1040": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%381#0"
      ],
      "stack_out": [
        "tmp%381#0"
      ]
    },
    "1042": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1043": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%383#0"
      ],
      "stack_out": [
        "tmp%383#0"
      ]
    },
    "1046": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%384#0"
      ],
      "stack_out": [
        "tmp%384#0"
      ]
    },
    "1049": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%384#0",
        "tmp%385#0"
      ],
      "stack_out": [
        "tmp%384#0",
        "tmp%385#0"
      ]
    },
    "1052": {
      "op": "btoi",
      "defined_out": [
        "tmp%384#0",
        "tmp%386#0"
      ],
      "stack_out": [
        "tmp%384#0",
        "tmp%386#0"
      ]
    },
    "1053": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_xor_uint64",
      "op": "callsub verify_biguint_xor_uint64",
      "defined_out": [
        "to_encode%42#0"
      ],
      "stack_out": [
        "to_encode%42#0"
      ]
    },
    "1056": {
      "op": "dup",
      "defined_out": [
        "to_encode%42#0",
        "to_encode%42#0 (copy)"
      ],
      "stack_out": [
        "to_encode%42#0",
        "to_encode%42#0 (copy)"
      ]
    },
    "1057": {
      "op": "len",
      "defined_out": [
        "length%21#0",
        "to_encode%42#0"
      ],
      "stack_out": [
        "to_encode%42#0",
        "length%21#0"
      ]
    },
    "1058": {
      "op": "itob",
      "defined_out": [
        "as_bytes%21#0",
        "to_encode%42#0"
      ],
      "stack_out": [
        "to_encode%42#0",
        "as_bytes%21#0"
      ]
    },
    "1059": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%21#0",
        "to_encode%42#0"
      ],
      "stack_out": [
        "to_encode%42#0",
        "length_uint16%21#0"
      ]
    },
    "1062": {
      "op": "swap",
      "stack_out": [
        "length_uint16%21#0",
        "to_encode%42#0"
      ]
    },
    "1063": {
      "op": "concat",
      "defined_out": [
        "encoded_value%21#0"
      ],
      "stack_out": [
        "encoded_value%21#0"
      ]
    },
    "1064": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%21#0"
      ],
      "stack_out": [
        "encoded_value%21#0",
        "0x151f7c75"
      ]
    },
    "1065": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%21#0"
      ]
    },
    "1066": {
      "op": "concat",
      "defined_out": [
        "tmp%387#0"
      ],
      "stack_out": [
        "tmp%387#0"
      ]
    },
    "1067": {
      "op": "log",
      "stack_out": []
    },
    "1068": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1069": {
      "op": "return"
    },
    "1070": {
      "block": "main_verify_biguint_xor_route@44",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%370#0"
      ],
      "stack_out": [
        "tmp%370#0"
      ]
    },
    "1072": {
      "op": "!",
      "defined_out": [
        "tmp%371#0"
      ],
      "stack_out": [
        "tmp%371#0"
      ]
    },
    "1073": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1074": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%372#0"
      ],
      "stack_out": [
        "tmp%372#0"
      ]
    },
    "1076": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1077": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%374#0"
      ],
      "stack_out": [
        "tmp%374#0"
      ]
    },
    "1080": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%375#0"
      ],
      "stack_out": [
        "tmp%375#0"
      ]
    },
    "1083": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%375#0",
        "tmp%376#0"
      ],
      "stack_out": [
        "tmp%375#0",
        "tmp%376#0"
      ]
    },
    "1086": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%375#0",
        "tmp%377#0"
      ],
      "stack_out": [
        "tmp%375#0",
        "tmp%377#0"
      ]
    },
    "1089": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_xor",
      "op": "callsub verify_biguint_xor",
      "defined_out": [
        "to_encode%41#0"
      ],
      "stack_out": [
        "to_encode%41#0"
      ]
    },
    "1092": {
      "op": "dup",
      "defined_out": [
        "to_encode%41#0",
        "to_encode%41#0 (copy)"
      ],
      "stack_out": [
        "to_encode%41#0",
        "to_encode%41#0 (copy)"
      ]
    },
    "1093": {
      "op": "len",
      "defined_out": [
        "length%20#0",
        "to_encode%41#0"
      ],
      "stack_out": [
        "to_encode%41#0",
        "length%20#0"
      ]
    },
    "1094": {
      "op": "itob",
      "defined_out": [
        "as_bytes%20#0",
        "to_encode%41#0"
      ],
      "stack_out": [
        "to_encode%41#0",
        "as_bytes%20#0"
      ]
    },
    "1095": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%20#0",
        "to_encode%41#0"
      ],
      "stack_out": [
        "to_encode%41#0",
        "length_uint16%20#0"
      ]
    },
    "1098": {
      "op": "swap",
      "stack_out": [
        "length_uint16%20#0",
        "to_encode%41#0"
      ]
    },
    "1099": {
      "op": "concat",
      "defined_out": [
        "encoded_value%20#0"
      ],
      "stack_out": [
        "encoded_value%20#0"
      ]
    },
    "1100": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%20#0"
      ],
      "stack_out": [
        "encoded_value%20#0",
        "0x151f7c75"
      ]
    },
    "1101": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%20#0"
      ]
    },
    "1102": {
      "op": "concat",
      "defined_out": [
        "tmp%378#0"
      ],
      "stack_out": [
        "tmp%378#0"
      ]
    },
    "1103": {
      "op": "log",
      "stack_out": []
    },
    "1104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1105": {
      "op": "return"
    },
    "1106": {
      "block": "main_verify_biguint_or_uint64_route@43",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%361#0"
      ],
      "stack_out": [
        "tmp%361#0"
      ]
    },
    "1108": {
      "op": "!",
      "defined_out": [
        "tmp%362#0"
      ],
      "stack_out": [
        "tmp%362#0"
      ]
    },
    "1109": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1110": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%363#0"
      ],
      "stack_out": [
        "tmp%363#0"
      ]
    },
    "1112": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1113": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%365#0"
      ],
      "stack_out": [
        "tmp%365#0"
      ]
    },
    "1116": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%366#0"
      ],
      "stack_out": [
        "tmp%366#0"
      ]
    },
    "1119": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%366#0",
        "tmp%367#0"
      ],
      "stack_out": [
        "tmp%366#0",
        "tmp%367#0"
      ]
    },
    "1122": {
      "op": "btoi",
      "defined_out": [
        "tmp%366#0",
        "tmp%368#0"
      ],
      "stack_out": [
        "tmp%366#0",
        "tmp%368#0"
      ]
    },
    "1123": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_or_uint64",
      "op": "callsub verify_biguint_or_uint64",
      "defined_out": [
        "to_encode%40#0"
      ],
      "stack_out": [
        "to_encode%40#0"
      ]
    },
    "1126": {
      "op": "dup",
      "defined_out": [
        "to_encode%40#0",
        "to_encode%40#0 (copy)"
      ],
      "stack_out": [
        "to_encode%40#0",
        "to_encode%40#0 (copy)"
      ]
    },
    "1127": {
      "op": "len",
      "defined_out": [
        "length%19#0",
        "to_encode%40#0"
      ],
      "stack_out": [
        "to_encode%40#0",
        "length%19#0"
      ]
    },
    "1128": {
      "op": "itob",
      "defined_out": [
        "as_bytes%19#0",
        "to_encode%40#0"
      ],
      "stack_out": [
        "to_encode%40#0",
        "as_bytes%19#0"
      ]
    },
    "1129": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%19#0",
        "to_encode%40#0"
      ],
      "stack_out": [
        "to_encode%40#0",
        "length_uint16%19#0"
      ]
    },
    "1132": {
      "op": "swap",
      "stack_out": [
        "length_uint16%19#0",
        "to_encode%40#0"
      ]
    },
    "1133": {
      "op": "concat",
      "defined_out": [
        "encoded_value%19#0"
      ],
      "stack_out": [
        "encoded_value%19#0"
      ]
    },
    "1134": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%19#0"
      ],
      "stack_out": [
        "encoded_value%19#0",
        "0x151f7c75"
      ]
    },
    "1135": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%19#0"
      ]
    },
    "1136": {
      "op": "concat",
      "defined_out": [
        "tmp%369#0"
      ],
      "stack_out": [
        "tmp%369#0"
      ]
    },
    "1137": {
      "op": "log",
      "stack_out": []
    },
    "1138": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1139": {
      "op": "return"
    },
    "1140": {
      "block": "main_verify_biguint_or_route@42",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%352#0"
      ],
      "stack_out": [
        "tmp%352#0"
      ]
    },
    "1142": {
      "op": "!",
      "defined_out": [
        "tmp%353#0"
      ],
      "stack_out": [
        "tmp%353#0"
      ]
    },
    "1143": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1144": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%354#0"
      ],
      "stack_out": [
        "tmp%354#0"
      ]
    },
    "1146": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1147": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%356#0"
      ],
      "stack_out": [
        "tmp%356#0"
      ]
    },
    "1150": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%357#0"
      ],
      "stack_out": [
        "tmp%357#0"
      ]
    },
    "1153": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%357#0",
        "tmp%358#0"
      ],
      "stack_out": [
        "tmp%357#0",
        "tmp%358#0"
      ]
    },
    "1156": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%357#0",
        "tmp%359#0"
      ],
      "stack_out": [
        "tmp%357#0",
        "tmp%359#0"
      ]
    },
    "1159": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_or",
      "op": "callsub verify_biguint_or",
      "defined_out": [
        "to_encode%39#0"
      ],
      "stack_out": [
        "to_encode%39#0"
      ]
    },
    "1162": {
      "op": "dup",
      "defined_out": [
        "to_encode%39#0",
        "to_encode%39#0 (copy)"
      ],
      "stack_out": [
        "to_encode%39#0",
        "to_encode%39#0 (copy)"
      ]
    },
    "1163": {
      "op": "len",
      "defined_out": [
        "length%18#0",
        "to_encode%39#0"
      ],
      "stack_out": [
        "to_encode%39#0",
        "length%18#0"
      ]
    },
    "1164": {
      "op": "itob",
      "defined_out": [
        "as_bytes%18#0",
        "to_encode%39#0"
      ],
      "stack_out": [
        "to_encode%39#0",
        "as_bytes%18#0"
      ]
    },
    "1165": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%18#0",
        "to_encode%39#0"
      ],
      "stack_out": [
        "to_encode%39#0",
        "length_uint16%18#0"
      ]
    },
    "1168": {
      "op": "swap",
      "stack_out": [
        "length_uint16%18#0",
        "to_encode%39#0"
      ]
    },
    "1169": {
      "op": "concat",
      "defined_out": [
        "encoded_value%18#0"
      ],
      "stack_out": [
        "encoded_value%18#0"
      ]
    },
    "1170": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%18#0"
      ],
      "stack_out": [
        "encoded_value%18#0",
        "0x151f7c75"
      ]
    },
    "1171": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%18#0"
      ]
    },
    "1172": {
      "op": "concat",
      "defined_out": [
        "tmp%360#0"
      ],
      "stack_out": [
        "tmp%360#0"
      ]
    },
    "1173": {
      "op": "log",
      "stack_out": []
    },
    "1174": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1175": {
      "op": "return"
    },
    "1176": {
      "block": "main_verify_biguint_and_uint64_route@41",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%343#0"
      ],
      "stack_out": [
        "tmp%343#0"
      ]
    },
    "1178": {
      "op": "!",
      "defined_out": [
        "tmp%344#0"
      ],
      "stack_out": [
        "tmp%344#0"
      ]
    },
    "1179": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1180": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%345#0"
      ],
      "stack_out": [
        "tmp%345#0"
      ]
    },
    "1182": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1183": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%347#0"
      ],
      "stack_out": [
        "tmp%347#0"
      ]
    },
    "1186": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%348#0"
      ],
      "stack_out": [
        "tmp%348#0"
      ]
    },
    "1189": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%348#0",
        "tmp%349#0"
      ],
      "stack_out": [
        "tmp%348#0",
        "tmp%349#0"
      ]
    },
    "1192": {
      "op": "btoi",
      "defined_out": [
        "tmp%348#0",
        "tmp%350#0"
      ],
      "stack_out": [
        "tmp%348#0",
        "tmp%350#0"
      ]
    },
    "1193": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_and_uint64",
      "op": "callsub verify_biguint_and_uint64",
      "defined_out": [
        "to_encode%38#0"
      ],
      "stack_out": [
        "to_encode%38#0"
      ]
    },
    "1196": {
      "op": "dup",
      "defined_out": [
        "to_encode%38#0",
        "to_encode%38#0 (copy)"
      ],
      "stack_out": [
        "to_encode%38#0",
        "to_encode%38#0 (copy)"
      ]
    },
    "1197": {
      "op": "len",
      "defined_out": [
        "length%17#0",
        "to_encode%38#0"
      ],
      "stack_out": [
        "to_encode%38#0",
        "length%17#0"
      ]
    },
    "1198": {
      "op": "itob",
      "defined_out": [
        "as_bytes%17#0",
        "to_encode%38#0"
      ],
      "stack_out": [
        "to_encode%38#0",
        "as_bytes%17#0"
      ]
    },
    "1199": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%17#0",
        "to_encode%38#0"
      ],
      "stack_out": [
        "to_encode%38#0",
        "length_uint16%17#0"
      ]
    },
    "1202": {
      "op": "swap",
      "stack_out": [
        "length_uint16%17#0",
        "to_encode%38#0"
      ]
    },
    "1203": {
      "op": "concat",
      "defined_out": [
        "encoded_value%17#0"
      ],
      "stack_out": [
        "encoded_value%17#0"
      ]
    },
    "1204": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%17#0"
      ],
      "stack_out": [
        "encoded_value%17#0",
        "0x151f7c75"
      ]
    },
    "1205": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%17#0"
      ]
    },
    "1206": {
      "op": "concat",
      "defined_out": [
        "tmp%351#0"
      ],
      "stack_out": [
        "tmp%351#0"
      ]
    },
    "1207": {
      "op": "log",
      "stack_out": []
    },
    "1208": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1209": {
      "op": "return"
    },
    "1210": {
      "block": "main_verify_biguint_and_route@40",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%334#0"
      ],
      "stack_out": [
        "tmp%334#0"
      ]
    },
    "1212": {
      "op": "!",
      "defined_out": [
        "tmp%335#0"
      ],
      "stack_out": [
        "tmp%335#0"
      ]
    },
    "1213": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1214": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%336#0"
      ],
      "stack_out": [
        "tmp%336#0"
      ]
    },
    "1216": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1217": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%338#0"
      ],
      "stack_out": [
        "tmp%338#0"
      ]
    },
    "1220": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%339#0"
      ],
      "stack_out": [
        "tmp%339#0"
      ]
    },
    "1223": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%339#0",
        "tmp%340#0"
      ],
      "stack_out": [
        "tmp%339#0",
        "tmp%340#0"
      ]
    },
    "1226": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%339#0",
        "tmp%341#0"
      ],
      "stack_out": [
        "tmp%339#0",
        "tmp%341#0"
      ]
    },
    "1229": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_and",
      "op": "callsub verify_biguint_and",
      "defined_out": [
        "to_encode%37#0"
      ],
      "stack_out": [
        "to_encode%37#0"
      ]
    },
    "1232": {
      "op": "dup",
      "defined_out": [
        "to_encode%37#0",
        "to_encode%37#0 (copy)"
      ],
      "stack_out": [
        "to_encode%37#0",
        "to_encode%37#0 (copy)"
      ]
    },
    "1233": {
      "op": "len",
      "defined_out": [
        "length%16#0",
        "to_encode%37#0"
      ],
      "stack_out": [
        "to_encode%37#0",
        "length%16#0"
      ]
    },
    "1234": {
      "op": "itob",
      "defined_out": [
        "as_bytes%16#0",
        "to_encode%37#0"
      ],
      "stack_out": [
        "to_encode%37#0",
        "as_bytes%16#0"
      ]
    },
    "1235": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%16#0",
        "to_encode%37#0"
      ],
      "stack_out": [
        "to_encode%37#0",
        "length_uint16%16#0"
      ]
    },
    "1238": {
      "op": "swap",
      "stack_out": [
        "length_uint16%16#0",
        "to_encode%37#0"
      ]
    },
    "1239": {
      "op": "concat",
      "defined_out": [
        "encoded_value%16#0"
      ],
      "stack_out": [
        "encoded_value%16#0"
      ]
    },
    "1240": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%16#0"
      ],
      "stack_out": [
        "encoded_value%16#0",
        "0x151f7c75"
      ]
    },
    "1241": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%16#0"
      ]
    },
    "1242": {
      "op": "concat",
      "defined_out": [
        "tmp%342#0"
      ],
      "stack_out": [
        "tmp%342#0"
      ]
    },
    "1243": {
      "op": "log",
      "stack_out": []
    },
    "1244": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1245": {
      "op": "return"
    },
    "1246": {
      "block": "main_verify_biguint_mod_uint64_route@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%325#0"
      ],
      "stack_out": [
        "tmp%325#0"
      ]
    },
    "1248": {
      "op": "!",
      "defined_out": [
        "tmp%326#0"
      ],
      "stack_out": [
        "tmp%326#0"
      ]
    },
    "1249": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1250": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%327#0"
      ],
      "stack_out": [
        "tmp%327#0"
      ]
    },
    "1252": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1253": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%329#0"
      ],
      "stack_out": [
        "tmp%329#0"
      ]
    },
    "1256": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%330#0"
      ],
      "stack_out": [
        "tmp%330#0"
      ]
    },
    "1259": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%330#0",
        "tmp%331#0"
      ],
      "stack_out": [
        "tmp%330#0",
        "tmp%331#0"
      ]
    },
    "1262": {
      "op": "btoi",
      "defined_out": [
        "tmp%330#0",
        "tmp%332#0"
      ],
      "stack_out": [
        "tmp%330#0",
        "tmp%332#0"
      ]
    },
    "1263": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mod_uint64",
      "op": "callsub verify_biguint_mod_uint64",
      "defined_out": [
        "to_encode%36#0"
      ],
      "stack_out": [
        "to_encode%36#0"
      ]
    },
    "1266": {
      "op": "dup",
      "defined_out": [
        "to_encode%36#0",
        "to_encode%36#0 (copy)"
      ],
      "stack_out": [
        "to_encode%36#0",
        "to_encode%36#0 (copy)"
      ]
    },
    "1267": {
      "op": "len",
      "defined_out": [
        "length%15#0",
        "to_encode%36#0"
      ],
      "stack_out": [
        "to_encode%36#0",
        "length%15#0"
      ]
    },
    "1268": {
      "op": "itob",
      "defined_out": [
        "as_bytes%15#0",
        "to_encode%36#0"
      ],
      "stack_out": [
        "to_encode%36#0",
        "as_bytes%15#0"
      ]
    },
    "1269": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%15#0",
        "to_encode%36#0"
      ],
      "stack_out": [
        "to_encode%36#0",
        "length_uint16%15#0"
      ]
    },
    "1272": {
      "op": "swap",
      "stack_out": [
        "length_uint16%15#0",
        "to_encode%36#0"
      ]
    },
    "1273": {
      "op": "concat",
      "defined_out": [
        "encoded_value%15#0"
      ],
      "stack_out": [
        "encoded_value%15#0"
      ]
    },
    "1274": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%15#0"
      ],
      "stack_out": [
        "encoded_value%15#0",
        "0x151f7c75"
      ]
    },
    "1275": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%15#0"
      ]
    },
    "1276": {
      "op": "concat",
      "defined_out": [
        "tmp%333#0"
      ],
      "stack_out": [
        "tmp%333#0"
      ]
    },
    "1277": {
      "op": "log",
      "stack_out": []
    },
    "1278": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1279": {
      "op": "return"
    },
    "1280": {
      "block": "main_verify_biguint_mod_route@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%316#0"
      ],
      "stack_out": [
        "tmp%316#0"
      ]
    },
    "1282": {
      "op": "!",
      "defined_out": [
        "tmp%317#0"
      ],
      "stack_out": [
        "tmp%317#0"
      ]
    },
    "1283": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1284": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%318#0"
      ],
      "stack_out": [
        "tmp%318#0"
      ]
    },
    "1286": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1287": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%320#0"
      ],
      "stack_out": [
        "tmp%320#0"
      ]
    },
    "1290": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%321#0"
      ],
      "stack_out": [
        "tmp%321#0"
      ]
    },
    "1293": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%321#0",
        "tmp%322#0"
      ],
      "stack_out": [
        "tmp%321#0",
        "tmp%322#0"
      ]
    },
    "1296": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%321#0",
        "tmp%323#0"
      ],
      "stack_out": [
        "tmp%321#0",
        "tmp%323#0"
      ]
    },
    "1299": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mod",
      "op": "callsub verify_biguint_mod",
      "defined_out": [
        "to_encode%35#0"
      ],
      "stack_out": [
        "to_encode%35#0"
      ]
    },
    "1302": {
      "op": "dup",
      "defined_out": [
        "to_encode%35#0",
        "to_encode%35#0 (copy)"
      ],
      "stack_out": [
        "to_encode%35#0",
        "to_encode%35#0 (copy)"
      ]
    },
    "1303": {
      "op": "len",
      "defined_out": [
        "length%14#0",
        "to_encode%35#0"
      ],
      "stack_out": [
        "to_encode%35#0",
        "length%14#0"
      ]
    },
    "1304": {
      "op": "itob",
      "defined_out": [
        "as_bytes%14#0",
        "to_encode%35#0"
      ],
      "stack_out": [
        "to_encode%35#0",
        "as_bytes%14#0"
      ]
    },
    "1305": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%14#0",
        "to_encode%35#0"
      ],
      "stack_out": [
        "to_encode%35#0",
        "length_uint16%14#0"
      ]
    },
    "1308": {
      "op": "swap",
      "stack_out": [
        "length_uint16%14#0",
        "to_encode%35#0"
      ]
    },
    "1309": {
      "op": "concat",
      "defined_out": [
        "encoded_value%14#0"
      ],
      "stack_out": [
        "encoded_value%14#0"
      ]
    },
    "1310": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%14#0"
      ],
      "stack_out": [
        "encoded_value%14#0",
        "0x151f7c75"
      ]
    },
    "1311": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%14#0"
      ]
    },
    "1312": {
      "op": "concat",
      "defined_out": [
        "tmp%324#0"
      ],
      "stack_out": [
        "tmp%324#0"
      ]
    },
    "1313": {
      "op": "log",
      "stack_out": []
    },
    "1314": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1315": {
      "op": "return"
    },
    "1316": {
      "block": "main_verify_biguint_div_uint64_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%307#0"
      ],
      "stack_out": [
        "tmp%307#0"
      ]
    },
    "1318": {
      "op": "!",
      "defined_out": [
        "tmp%308#0"
      ],
      "stack_out": [
        "tmp%308#0"
      ]
    },
    "1319": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1320": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%309#0"
      ],
      "stack_out": [
        "tmp%309#0"
      ]
    },
    "1322": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1323": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%311#0"
      ],
      "stack_out": [
        "tmp%311#0"
      ]
    },
    "1326": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%312#0"
      ],
      "stack_out": [
        "tmp%312#0"
      ]
    },
    "1329": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%312#0",
        "tmp%313#0"
      ],
      "stack_out": [
        "tmp%312#0",
        "tmp%313#0"
      ]
    },
    "1332": {
      "op": "btoi",
      "defined_out": [
        "tmp%312#0",
        "tmp%314#0"
      ],
      "stack_out": [
        "tmp%312#0",
        "tmp%314#0"
      ]
    },
    "1333": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_div_uint64",
      "op": "callsub verify_biguint_div_uint64",
      "defined_out": [
        "to_encode%34#0"
      ],
      "stack_out": [
        "to_encode%34#0"
      ]
    },
    "1336": {
      "op": "dup",
      "defined_out": [
        "to_encode%34#0",
        "to_encode%34#0 (copy)"
      ],
      "stack_out": [
        "to_encode%34#0",
        "to_encode%34#0 (copy)"
      ]
    },
    "1337": {
      "op": "len",
      "defined_out": [
        "length%13#0",
        "to_encode%34#0"
      ],
      "stack_out": [
        "to_encode%34#0",
        "length%13#0"
      ]
    },
    "1338": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "to_encode%34#0"
      ],
      "stack_out": [
        "to_encode%34#0",
        "as_bytes%13#0"
      ]
    },
    "1339": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%13#0",
        "to_encode%34#0"
      ],
      "stack_out": [
        "to_encode%34#0",
        "length_uint16%13#0"
      ]
    },
    "1342": {
      "op": "swap",
      "stack_out": [
        "length_uint16%13#0",
        "to_encode%34#0"
      ]
    },
    "1343": {
      "op": "concat",
      "defined_out": [
        "encoded_value%13#0"
      ],
      "stack_out": [
        "encoded_value%13#0"
      ]
    },
    "1344": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%13#0"
      ],
      "stack_out": [
        "encoded_value%13#0",
        "0x151f7c75"
      ]
    },
    "1345": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%13#0"
      ]
    },
    "1346": {
      "op": "concat",
      "defined_out": [
        "tmp%315#0"
      ],
      "stack_out": [
        "tmp%315#0"
      ]
    },
    "1347": {
      "op": "log",
      "stack_out": []
    },
    "1348": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1349": {
      "op": "return"
    },
    "1350": {
      "block": "main_verify_biguint_div_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%298#0"
      ],
      "stack_out": [
        "tmp%298#0"
      ]
    },
    "1352": {
      "op": "!",
      "defined_out": [
        "tmp%299#0"
      ],
      "stack_out": [
        "tmp%299#0"
      ]
    },
    "1353": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1354": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%300#0"
      ],
      "stack_out": [
        "tmp%300#0"
      ]
    },
    "1356": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1357": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%302#0"
      ],
      "stack_out": [
        "tmp%302#0"
      ]
    },
    "1360": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%303#0"
      ],
      "stack_out": [
        "tmp%303#0"
      ]
    },
    "1363": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%303#0",
        "tmp%304#0"
      ],
      "stack_out": [
        "tmp%303#0",
        "tmp%304#0"
      ]
    },
    "1366": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%303#0",
        "tmp%305#0"
      ],
      "stack_out": [
        "tmp%303#0",
        "tmp%305#0"
      ]
    },
    "1369": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_div",
      "op": "callsub verify_biguint_div",
      "defined_out": [
        "to_encode%33#0"
      ],
      "stack_out": [
        "to_encode%33#0"
      ]
    },
    "1372": {
      "op": "dup",
      "defined_out": [
        "to_encode%33#0",
        "to_encode%33#0 (copy)"
      ],
      "stack_out": [
        "to_encode%33#0",
        "to_encode%33#0 (copy)"
      ]
    },
    "1373": {
      "op": "len",
      "defined_out": [
        "length%12#0",
        "to_encode%33#0"
      ],
      "stack_out": [
        "to_encode%33#0",
        "length%12#0"
      ]
    },
    "1374": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "to_encode%33#0"
      ],
      "stack_out": [
        "to_encode%33#0",
        "as_bytes%12#0"
      ]
    },
    "1375": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%12#0",
        "to_encode%33#0"
      ],
      "stack_out": [
        "to_encode%33#0",
        "length_uint16%12#0"
      ]
    },
    "1378": {
      "op": "swap",
      "stack_out": [
        "length_uint16%12#0",
        "to_encode%33#0"
      ]
    },
    "1379": {
      "op": "concat",
      "defined_out": [
        "encoded_value%12#0"
      ],
      "stack_out": [
        "encoded_value%12#0"
      ]
    },
    "1380": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%12#0"
      ],
      "stack_out": [
        "encoded_value%12#0",
        "0x151f7c75"
      ]
    },
    "1381": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%12#0"
      ]
    },
    "1382": {
      "op": "concat",
      "defined_out": [
        "tmp%306#0"
      ],
      "stack_out": [
        "tmp%306#0"
      ]
    },
    "1383": {
      "op": "log",
      "stack_out": []
    },
    "1384": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1385": {
      "op": "return"
    },
    "1386": {
      "block": "main_verify_biguint_mul_uint64_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%289#0"
      ],
      "stack_out": [
        "tmp%289#0"
      ]
    },
    "1388": {
      "op": "!",
      "defined_out": [
        "tmp%290#0"
      ],
      "stack_out": [
        "tmp%290#0"
      ]
    },
    "1389": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1390": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%291#0"
      ],
      "stack_out": [
        "tmp%291#0"
      ]
    },
    "1392": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1393": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%293#0"
      ],
      "stack_out": [
        "tmp%293#0"
      ]
    },
    "1396": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%294#0"
      ],
      "stack_out": [
        "tmp%294#0"
      ]
    },
    "1399": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%294#0",
        "tmp%295#0"
      ],
      "stack_out": [
        "tmp%294#0",
        "tmp%295#0"
      ]
    },
    "1402": {
      "op": "btoi",
      "defined_out": [
        "tmp%294#0",
        "tmp%296#0"
      ],
      "stack_out": [
        "tmp%294#0",
        "tmp%296#0"
      ]
    },
    "1403": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mul_uint64",
      "op": "callsub verify_biguint_mul_uint64",
      "defined_out": [
        "to_encode%32#0"
      ],
      "stack_out": [
        "to_encode%32#0"
      ]
    },
    "1406": {
      "op": "dup",
      "defined_out": [
        "to_encode%32#0",
        "to_encode%32#0 (copy)"
      ],
      "stack_out": [
        "to_encode%32#0",
        "to_encode%32#0 (copy)"
      ]
    },
    "1407": {
      "op": "len",
      "defined_out": [
        "length%11#0",
        "to_encode%32#0"
      ],
      "stack_out": [
        "to_encode%32#0",
        "length%11#0"
      ]
    },
    "1408": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "to_encode%32#0"
      ],
      "stack_out": [
        "to_encode%32#0",
        "as_bytes%11#0"
      ]
    },
    "1409": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%11#0",
        "to_encode%32#0"
      ],
      "stack_out": [
        "to_encode%32#0",
        "length_uint16%11#0"
      ]
    },
    "1412": {
      "op": "swap",
      "stack_out": [
        "length_uint16%11#0",
        "to_encode%32#0"
      ]
    },
    "1413": {
      "op": "concat",
      "defined_out": [
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%11#0"
      ]
    },
    "1414": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%11#0"
      ],
      "stack_out": [
        "encoded_value%11#0",
        "0x151f7c75"
      ]
    },
    "1415": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%11#0"
      ]
    },
    "1416": {
      "op": "concat",
      "defined_out": [
        "tmp%297#0"
      ],
      "stack_out": [
        "tmp%297#0"
      ]
    },
    "1417": {
      "op": "log",
      "stack_out": []
    },
    "1418": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1419": {
      "op": "return"
    },
    "1420": {
      "block": "main_verify_biguint_mul_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%280#0"
      ],
      "stack_out": [
        "tmp%280#0"
      ]
    },
    "1422": {
      "op": "!",
      "defined_out": [
        "tmp%281#0"
      ],
      "stack_out": [
        "tmp%281#0"
      ]
    },
    "1423": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1424": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%282#0"
      ],
      "stack_out": [
        "tmp%282#0"
      ]
    },
    "1426": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1427": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%284#0"
      ],
      "stack_out": [
        "tmp%284#0"
      ]
    },
    "1430": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%285#0"
      ],
      "stack_out": [
        "tmp%285#0"
      ]
    },
    "1433": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%285#0",
        "tmp%286#0"
      ],
      "stack_out": [
        "tmp%285#0",
        "tmp%286#0"
      ]
    },
    "1436": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%285#0",
        "tmp%287#0"
      ],
      "stack_out": [
        "tmp%285#0",
        "tmp%287#0"
      ]
    },
    "1439": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mul",
      "op": "callsub verify_biguint_mul",
      "defined_out": [
        "to_encode%31#0"
      ],
      "stack_out": [
        "to_encode%31#0"
      ]
    },
    "1442": {
      "op": "dup",
      "defined_out": [
        "to_encode%31#0",
        "to_encode%31#0 (copy)"
      ],
      "stack_out": [
        "to_encode%31#0",
        "to_encode%31#0 (copy)"
      ]
    },
    "1443": {
      "op": "len",
      "defined_out": [
        "length%10#0",
        "to_encode%31#0"
      ],
      "stack_out": [
        "to_encode%31#0",
        "length%10#0"
      ]
    },
    "1444": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "to_encode%31#0"
      ],
      "stack_out": [
        "to_encode%31#0",
        "as_bytes%10#0"
      ]
    },
    "1445": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%10#0",
        "to_encode%31#0"
      ],
      "stack_out": [
        "to_encode%31#0",
        "length_uint16%10#0"
      ]
    },
    "1448": {
      "op": "swap",
      "stack_out": [
        "length_uint16%10#0",
        "to_encode%31#0"
      ]
    },
    "1449": {
      "op": "concat",
      "defined_out": [
        "encoded_value%10#0"
      ],
      "stack_out": [
        "encoded_value%10#0"
      ]
    },
    "1450": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%10#0"
      ],
      "stack_out": [
        "encoded_value%10#0",
        "0x151f7c75"
      ]
    },
    "1451": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%10#0"
      ]
    },
    "1452": {
      "op": "concat",
      "defined_out": [
        "tmp%288#0"
      ],
      "stack_out": [
        "tmp%288#0"
      ]
    },
    "1453": {
      "op": "log",
      "stack_out": []
    },
    "1454": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1455": {
      "op": "return"
    },
    "1456": {
      "block": "main_verify_biguint_sub_uint64_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%271#0"
      ],
      "stack_out": [
        "tmp%271#0"
      ]
    },
    "1458": {
      "op": "!",
      "defined_out": [
        "tmp%272#0"
      ],
      "stack_out": [
        "tmp%272#0"
      ]
    },
    "1459": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1460": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%273#0"
      ],
      "stack_out": [
        "tmp%273#0"
      ]
    },
    "1462": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1463": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%275#0"
      ],
      "stack_out": [
        "tmp%275#0"
      ]
    },
    "1466": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%276#0"
      ],
      "stack_out": [
        "tmp%276#0"
      ]
    },
    "1469": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%276#0",
        "tmp%277#0"
      ],
      "stack_out": [
        "tmp%276#0",
        "tmp%277#0"
      ]
    },
    "1472": {
      "op": "btoi",
      "defined_out": [
        "tmp%276#0",
        "tmp%278#0"
      ],
      "stack_out": [
        "tmp%276#0",
        "tmp%278#0"
      ]
    },
    "1473": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_sub_uint64",
      "op": "callsub verify_biguint_sub_uint64",
      "defined_out": [
        "to_encode%30#0"
      ],
      "stack_out": [
        "to_encode%30#0"
      ]
    },
    "1476": {
      "op": "dup",
      "defined_out": [
        "to_encode%30#0",
        "to_encode%30#0 (copy)"
      ],
      "stack_out": [
        "to_encode%30#0",
        "to_encode%30#0 (copy)"
      ]
    },
    "1477": {
      "op": "len",
      "defined_out": [
        "length%9#0",
        "to_encode%30#0"
      ],
      "stack_out": [
        "to_encode%30#0",
        "length%9#0"
      ]
    },
    "1478": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "to_encode%30#0"
      ],
      "stack_out": [
        "to_encode%30#0",
        "as_bytes%9#0"
      ]
    },
    "1479": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%9#0",
        "to_encode%30#0"
      ],
      "stack_out": [
        "to_encode%30#0",
        "length_uint16%9#0"
      ]
    },
    "1482": {
      "op": "swap",
      "stack_out": [
        "length_uint16%9#0",
        "to_encode%30#0"
      ]
    },
    "1483": {
      "op": "concat",
      "defined_out": [
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0"
      ]
    },
    "1484": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0",
        "0x151f7c75"
      ]
    },
    "1485": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%9#0"
      ]
    },
    "1486": {
      "op": "concat",
      "defined_out": [
        "tmp%279#0"
      ],
      "stack_out": [
        "tmp%279#0"
      ]
    },
    "1487": {
      "op": "log",
      "stack_out": []
    },
    "1488": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1489": {
      "op": "return"
    },
    "1490": {
      "block": "main_verify_biguint_sub_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%262#0"
      ],
      "stack_out": [
        "tmp%262#0"
      ]
    },
    "1492": {
      "op": "!",
      "defined_out": [
        "tmp%263#0"
      ],
      "stack_out": [
        "tmp%263#0"
      ]
    },
    "1493": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1494": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%264#0"
      ],
      "stack_out": [
        "tmp%264#0"
      ]
    },
    "1496": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1497": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%266#0"
      ],
      "stack_out": [
        "tmp%266#0"
      ]
    },
    "1500": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%267#0"
      ],
      "stack_out": [
        "tmp%267#0"
      ]
    },
    "1503": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%267#0",
        "tmp%268#0"
      ],
      "stack_out": [
        "tmp%267#0",
        "tmp%268#0"
      ]
    },
    "1506": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%267#0",
        "tmp%269#0"
      ],
      "stack_out": [
        "tmp%267#0",
        "tmp%269#0"
      ]
    },
    "1509": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_sub",
      "op": "callsub verify_biguint_sub",
      "defined_out": [
        "to_encode%29#0"
      ],
      "stack_out": [
        "to_encode%29#0"
      ]
    },
    "1512": {
      "op": "dup",
      "defined_out": [
        "to_encode%29#0",
        "to_encode%29#0 (copy)"
      ],
      "stack_out": [
        "to_encode%29#0",
        "to_encode%29#0 (copy)"
      ]
    },
    "1513": {
      "op": "len",
      "defined_out": [
        "length%8#0",
        "to_encode%29#0"
      ],
      "stack_out": [
        "to_encode%29#0",
        "length%8#0"
      ]
    },
    "1514": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "to_encode%29#0"
      ],
      "stack_out": [
        "to_encode%29#0",
        "as_bytes%8#0"
      ]
    },
    "1515": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%8#0",
        "to_encode%29#0"
      ],
      "stack_out": [
        "to_encode%29#0",
        "length_uint16%8#0"
      ]
    },
    "1518": {
      "op": "swap",
      "stack_out": [
        "length_uint16%8#0",
        "to_encode%29#0"
      ]
    },
    "1519": {
      "op": "concat",
      "defined_out": [
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0"
      ]
    },
    "1520": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "0x151f7c75"
      ]
    },
    "1521": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%8#0"
      ]
    },
    "1522": {
      "op": "concat",
      "defined_out": [
        "tmp%270#0"
      ],
      "stack_out": [
        "tmp%270#0"
      ]
    },
    "1523": {
      "op": "log",
      "stack_out": []
    },
    "1524": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1525": {
      "op": "return"
    },
    "1526": {
      "block": "main_verify_biguint_add_uint64_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%253#0"
      ],
      "stack_out": [
        "tmp%253#0"
      ]
    },
    "1528": {
      "op": "!",
      "defined_out": [
        "tmp%254#0"
      ],
      "stack_out": [
        "tmp%254#0"
      ]
    },
    "1529": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1530": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%255#0"
      ],
      "stack_out": [
        "tmp%255#0"
      ]
    },
    "1532": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1533": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%257#0"
      ],
      "stack_out": [
        "tmp%257#0"
      ]
    },
    "1536": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%258#0"
      ],
      "stack_out": [
        "tmp%258#0"
      ]
    },
    "1539": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%258#0",
        "tmp%259#0"
      ],
      "stack_out": [
        "tmp%258#0",
        "tmp%259#0"
      ]
    },
    "1542": {
      "op": "btoi",
      "defined_out": [
        "tmp%258#0",
        "tmp%260#0"
      ],
      "stack_out": [
        "tmp%258#0",
        "tmp%260#0"
      ]
    },
    "1543": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_add_uint64",
      "op": "callsub verify_biguint_add_uint64",
      "defined_out": [
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0"
      ]
    },
    "1546": {
      "op": "dup",
      "defined_out": [
        "to_encode%28#0",
        "to_encode%28#0 (copy)"
      ],
      "stack_out": [
        "to_encode%28#0",
        "to_encode%28#0 (copy)"
      ]
    },
    "1547": {
      "op": "len",
      "defined_out": [
        "length%7#0",
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0",
        "length%7#0"
      ]
    },
    "1548": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0",
        "as_bytes%7#0"
      ]
    },
    "1549": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%7#0",
        "to_encode%28#0"
      ],
      "stack_out": [
        "to_encode%28#0",
        "length_uint16%7#0"
      ]
    },
    "1552": {
      "op": "swap",
      "stack_out": [
        "length_uint16%7#0",
        "to_encode%28#0"
      ]
    },
    "1553": {
      "op": "concat",
      "defined_out": [
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0"
      ]
    },
    "1554": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "0x151f7c75"
      ]
    },
    "1555": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%7#0"
      ]
    },
    "1556": {
      "op": "concat",
      "defined_out": [
        "tmp%261#0"
      ],
      "stack_out": [
        "tmp%261#0"
      ]
    },
    "1557": {
      "op": "log",
      "stack_out": []
    },
    "1558": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1559": {
      "op": "return"
    },
    "1560": {
      "block": "main_verify_biguint_add_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%244#0"
      ],
      "stack_out": [
        "tmp%244#0"
      ]
    },
    "1562": {
      "op": "!",
      "defined_out": [
        "tmp%245#0"
      ],
      "stack_out": [
        "tmp%245#0"
      ]
    },
    "1563": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1564": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%246#0"
      ],
      "stack_out": [
        "tmp%246#0"
      ]
    },
    "1566": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1567": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%248#0"
      ],
      "stack_out": [
        "tmp%248#0"
      ]
    },
    "1570": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%249#0"
      ],
      "stack_out": [
        "tmp%249#0"
      ]
    },
    "1573": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%249#0",
        "tmp%250#0"
      ],
      "stack_out": [
        "tmp%249#0",
        "tmp%250#0"
      ]
    },
    "1576": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%249#0",
        "tmp%251#0"
      ],
      "stack_out": [
        "tmp%249#0",
        "tmp%251#0"
      ]
    },
    "1579": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_add",
      "op": "callsub verify_biguint_add",
      "defined_out": [
        "to_encode%27#0"
      ],
      "stack_out": [
        "to_encode%27#0"
      ]
    },
    "1582": {
      "op": "dup",
      "defined_out": [
        "to_encode%27#0",
        "to_encode%27#0 (copy)"
      ],
      "stack_out": [
        "to_encode%27#0",
        "to_encode%27#0 (copy)"
      ]
    },
    "1583": {
      "op": "len",
      "defined_out": [
        "length%6#0",
        "to_encode%27#0"
      ],
      "stack_out": [
        "to_encode%27#0",
        "length%6#0"
      ]
    },
    "1584": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "to_encode%27#0"
      ],
      "stack_out": [
        "to_encode%27#0",
        "as_bytes%6#0"
      ]
    },
    "1585": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%6#0",
        "to_encode%27#0"
      ],
      "stack_out": [
        "to_encode%27#0",
        "length_uint16%6#0"
      ]
    },
    "1588": {
      "op": "swap",
      "stack_out": [
        "length_uint16%6#0",
        "to_encode%27#0"
      ]
    },
    "1589": {
      "op": "concat",
      "defined_out": [
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0"
      ]
    },
    "1590": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "0x151f7c75"
      ]
    },
    "1591": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%6#0"
      ]
    },
    "1592": {
      "op": "concat",
      "defined_out": [
        "tmp%252#0"
      ],
      "stack_out": [
        "tmp%252#0"
      ]
    },
    "1593": {
      "op": "log",
      "stack_out": []
    },
    "1594": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1595": {
      "op": "return"
    },
    "1596": {
      "block": "main_verify_bytes_not_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%235#0"
      ],
      "stack_out": [
        "tmp%235#0"
      ]
    },
    "1598": {
      "op": "!",
      "defined_out": [
        "tmp%236#0"
      ],
      "stack_out": [
        "tmp%236#0"
      ]
    },
    "1599": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1600": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%237#0"
      ],
      "stack_out": [
        "tmp%237#0"
      ]
    },
    "1602": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1603": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%239#0"
      ],
      "stack_out": [
        "tmp%239#0"
      ]
    },
    "1606": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%240#0"
      ],
      "stack_out": [
        "tmp%240#0"
      ]
    },
    "1609": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%240#0",
        "tmp%241#0"
      ],
      "stack_out": [
        "tmp%240#0",
        "tmp%241#0"
      ]
    },
    "1612": {
      "op": "btoi",
      "defined_out": [
        "tmp%240#0",
        "tmp%242#0"
      ],
      "stack_out": [
        "tmp%240#0",
        "tmp%242#0"
      ]
    },
    "1613": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_not",
      "op": "callsub verify_bytes_not",
      "defined_out": [
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0"
      ]
    },
    "1616": {
      "op": "dup",
      "defined_out": [
        "to_encode%26#0",
        "to_encode%26#0 (copy)"
      ],
      "stack_out": [
        "to_encode%26#0",
        "to_encode%26#0 (copy)"
      ]
    },
    "1617": {
      "op": "len",
      "defined_out": [
        "length%5#0",
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0",
        "length%5#0"
      ]
    },
    "1618": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0",
        "as_bytes%5#0"
      ]
    },
    "1619": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%5#0",
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0",
        "length_uint16%5#0"
      ]
    },
    "1622": {
      "op": "swap",
      "stack_out": [
        "length_uint16%5#0",
        "to_encode%26#0"
      ]
    },
    "1623": {
      "op": "concat",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "1624": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "0x151f7c75"
      ]
    },
    "1625": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%5#0"
      ]
    },
    "1626": {
      "op": "concat",
      "defined_out": [
        "tmp%243#0"
      ],
      "stack_out": [
        "tmp%243#0"
      ]
    },
    "1627": {
      "op": "log",
      "stack_out": []
    },
    "1628": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1629": {
      "op": "return"
    },
    "1630": {
      "block": "main_verify_bytes_xor_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%226#0"
      ],
      "stack_out": [
        "tmp%226#0"
      ]
    },
    "1632": {
      "op": "!",
      "defined_out": [
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0"
      ]
    },
    "1633": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1634": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%228#0"
      ],
      "stack_out": [
        "tmp%228#0"
      ]
    },
    "1636": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1637": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%230#0"
      ],
      "stack_out": [
        "tmp%230#0"
      ]
    },
    "1640": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%231#0"
      ],
      "stack_out": [
        "tmp%231#0"
      ]
    },
    "1643": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%231#0",
        "tmp%232#0"
      ],
      "stack_out": [
        "tmp%231#0",
        "tmp%232#0"
      ]
    },
    "1646": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%231#0",
        "tmp%233#0"
      ],
      "stack_out": [
        "tmp%231#0",
        "tmp%233#0"
      ]
    },
    "1649": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_xor",
      "op": "callsub verify_bytes_xor",
      "defined_out": [
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0"
      ]
    },
    "1652": {
      "op": "dup",
      "defined_out": [
        "to_encode%25#0",
        "to_encode%25#0 (copy)"
      ],
      "stack_out": [
        "to_encode%25#0",
        "to_encode%25#0 (copy)"
      ]
    },
    "1653": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0",
        "length%4#0"
      ]
    },
    "1654": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0",
        "as_bytes%4#0"
      ]
    },
    "1655": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "to_encode%25#0"
      ],
      "stack_out": [
        "to_encode%25#0",
        "length_uint16%4#0"
      ]
    },
    "1658": {
      "op": "swap",
      "stack_out": [
        "length_uint16%4#0",
        "to_encode%25#0"
      ]
    },
    "1659": {
      "op": "concat",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "1660": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "0x151f7c75"
      ]
    },
    "1661": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%4#0"
      ]
    },
    "1662": {
      "op": "concat",
      "defined_out": [
        "tmp%234#0"
      ],
      "stack_out": [
        "tmp%234#0"
      ]
    },
    "1663": {
      "op": "log",
      "stack_out": []
    },
    "1664": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1665": {
      "op": "return"
    },
    "1666": {
      "block": "main_verify_bytes_or_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%217#0"
      ],
      "stack_out": [
        "tmp%217#0"
      ]
    },
    "1668": {
      "op": "!",
      "defined_out": [
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0"
      ]
    },
    "1669": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1670": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%219#0"
      ]
    },
    "1672": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1673": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0"
      ]
    },
    "1676": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%222#0"
      ],
      "stack_out": [
        "tmp%222#0"
      ]
    },
    "1679": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%222#0",
        "tmp%223#0"
      ],
      "stack_out": [
        "tmp%222#0",
        "tmp%223#0"
      ]
    },
    "1682": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%222#0",
        "tmp%224#0"
      ],
      "stack_out": [
        "tmp%222#0",
        "tmp%224#0"
      ]
    },
    "1685": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_or",
      "op": "callsub verify_bytes_or",
      "defined_out": [
        "to_encode%24#0"
      ],
      "stack_out": [
        "to_encode%24#0"
      ]
    },
    "1688": {
      "op": "dup",
      "defined_out": [
        "to_encode%24#0",
        "to_encode%24#0 (copy)"
      ],
      "stack_out": [
        "to_encode%24#0",
        "to_encode%24#0 (copy)"
      ]
    },
    "1689": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%24#0"
      ],
      "stack_out": [
        "to_encode%24#0",
        "length%3#0"
      ]
    },
    "1690": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%24#0"
      ],
      "stack_out": [
        "to_encode%24#0",
        "as_bytes%3#0"
      ]
    },
    "1691": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%24#0"
      ],
      "stack_out": [
        "to_encode%24#0",
        "length_uint16%3#0"
      ]
    },
    "1694": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%24#0"
      ]
    },
    "1695": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "1696": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "1697": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "1698": {
      "op": "concat",
      "defined_out": [
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0"
      ]
    },
    "1699": {
      "op": "log",
      "stack_out": []
    },
    "1700": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1701": {
      "op": "return"
    },
    "1702": {
      "block": "main_verify_bytes_and_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%208#0"
      ],
      "stack_out": [
        "tmp%208#0"
      ]
    },
    "1704": {
      "op": "!",
      "defined_out": [
        "tmp%209#0"
      ],
      "stack_out": [
        "tmp%209#0"
      ]
    },
    "1705": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1706": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%210#0"
      ],
      "stack_out": [
        "tmp%210#0"
      ]
    },
    "1708": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1709": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "1712": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%213#0"
      ],
      "stack_out": [
        "tmp%213#0"
      ]
    },
    "1715": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%213#0",
        "tmp%214#0"
      ],
      "stack_out": [
        "tmp%213#0",
        "tmp%214#0"
      ]
    },
    "1718": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%213#0",
        "tmp%215#0"
      ],
      "stack_out": [
        "tmp%213#0",
        "tmp%215#0"
      ]
    },
    "1721": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_and",
      "op": "callsub verify_bytes_and",
      "defined_out": [
        "to_encode%23#0"
      ],
      "stack_out": [
        "to_encode%23#0"
      ]
    },
    "1724": {
      "op": "dup",
      "defined_out": [
        "to_encode%23#0",
        "to_encode%23#0 (copy)"
      ],
      "stack_out": [
        "to_encode%23#0",
        "to_encode%23#0 (copy)"
      ]
    },
    "1725": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%23#0"
      ],
      "stack_out": [
        "to_encode%23#0",
        "length%2#0"
      ]
    },
    "1726": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%23#0"
      ],
      "stack_out": [
        "to_encode%23#0",
        "as_bytes%2#0"
      ]
    },
    "1727": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%23#0"
      ],
      "stack_out": [
        "to_encode%23#0",
        "length_uint16%2#0"
      ]
    },
    "1730": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%23#0"
      ]
    },
    "1731": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "1732": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "1733": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "1734": {
      "op": "concat",
      "defined_out": [
        "tmp%216#0"
      ],
      "stack_out": [
        "tmp%216#0"
      ]
    },
    "1735": {
      "op": "log",
      "stack_out": []
    },
    "1736": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1737": {
      "op": "return"
    },
    "1738": {
      "block": "main_verify_bytes_ne_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "1740": {
      "op": "!",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "1741": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1742": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "1744": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1745": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "1748": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "1751": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%204#0",
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%204#0",
        "tmp%205#0"
      ]
    },
    "1754": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%204#0",
        "tmp%206#0"
      ],
      "stack_out": [
        "tmp%204#0",
        "tmp%206#0"
      ]
    },
    "1757": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_ne",
      "op": "callsub verify_bytes_ne",
      "defined_out": [
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0"
      ]
    },
    "1760": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0",
        "0x00"
      ]
    },
    "1761": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0",
        "0x00",
        "0"
      ]
    },
    "1762": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%22#0"
      ]
    },
    "1764": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%7#0"
      ],
      "stack_out": [
        "encoded_bool%7#0"
      ]
    },
    "1765": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%7#0"
      ],
      "stack_out": [
        "encoded_bool%7#0",
        "0x151f7c75"
      ]
    },
    "1766": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%7#0"
      ]
    },
    "1767": {
      "op": "concat",
      "defined_out": [
        "tmp%207#0"
      ],
      "stack_out": [
        "tmp%207#0"
      ]
    },
    "1768": {
      "op": "log",
      "stack_out": []
    },
    "1769": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1770": {
      "op": "return"
    },
    "1771": {
      "block": "main_verify_bytes_eq_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "1773": {
      "op": "!",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "1774": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1775": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "1777": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1778": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "1781": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "1784": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%195#0",
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%195#0",
        "tmp%196#0"
      ]
    },
    "1787": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%195#0",
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%195#0",
        "tmp%197#0"
      ]
    },
    "1790": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_eq",
      "op": "callsub verify_bytes_eq",
      "defined_out": [
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0"
      ]
    },
    "1793": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0",
        "0x00"
      ]
    },
    "1794": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0",
        "0x00",
        "0"
      ]
    },
    "1795": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%21#0"
      ]
    },
    "1797": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0"
      ]
    },
    "1798": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0",
        "0x151f7c75"
      ]
    },
    "1799": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ]
    },
    "1800": {
      "op": "concat",
      "defined_out": [
        "tmp%198#0"
      ],
      "stack_out": [
        "tmp%198#0"
      ]
    },
    "1801": {
      "op": "log",
      "stack_out": []
    },
    "1802": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1803": {
      "op": "return"
    },
    "1804": {
      "block": "main_verify_bytes_add_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "1806": {
      "op": "!",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "1807": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1808": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "1810": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1811": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "1814": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "1817": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%182#0",
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "tmp%183#0"
      ]
    },
    "1820": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%182#0",
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "tmp%184#0"
      ]
    },
    "1823": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%182#0",
        "tmp%184#0",
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "tmp%184#0",
        "tmp%185#0"
      ]
    },
    "1826": {
      "op": "btoi",
      "defined_out": [
        "tmp%182#0",
        "tmp%184#0",
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "tmp%184#0",
        "tmp%186#0"
      ]
    },
    "1827": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%182#0",
        "tmp%184#0",
        "tmp%186#0",
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "tmp%184#0",
        "tmp%186#0",
        "tmp%187#0"
      ]
    },
    "1830": {
      "op": "btoi",
      "defined_out": [
        "tmp%182#0",
        "tmp%184#0",
        "tmp%186#0",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "tmp%184#0",
        "tmp%186#0",
        "tmp%188#0"
      ]
    },
    "1831": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_add",
      "op": "callsub verify_bytes_add",
      "defined_out": [
        "to_encode%20#0"
      ],
      "stack_out": [
        "to_encode%20#0"
      ]
    },
    "1834": {
      "op": "dup",
      "defined_out": [
        "to_encode%20#0",
        "to_encode%20#0 (copy)"
      ],
      "stack_out": [
        "to_encode%20#0",
        "to_encode%20#0 (copy)"
      ]
    },
    "1835": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%20#0"
      ],
      "stack_out": [
        "to_encode%20#0",
        "length%1#0"
      ]
    },
    "1836": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%20#0"
      ],
      "stack_out": [
        "to_encode%20#0",
        "as_bytes%1#0"
      ]
    },
    "1837": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%20#0"
      ],
      "stack_out": [
        "to_encode%20#0",
        "length_uint16%1#0"
      ]
    },
    "1840": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%20#0"
      ]
    },
    "1841": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "1842": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "1843": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "1844": {
      "op": "concat",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "1845": {
      "op": "log",
      "stack_out": []
    },
    "1846": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1847": {
      "op": "return"
    },
    "1848": {
      "block": "main_verify_bytes_init_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "1850": {
      "op": "!",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "1851": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1852": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "1854": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1855": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "1858": {
      "op": "btoi",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1859": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_init",
      "op": "callsub verify_bytes_init",
      "defined_out": [
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0"
      ]
    },
    "1862": {
      "op": "dup",
      "defined_out": [
        "to_encode%19#0",
        "to_encode%19#0 (copy)"
      ],
      "stack_out": [
        "to_encode%19#0",
        "to_encode%19#0 (copy)"
      ]
    },
    "1863": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0",
        "length%0#0"
      ]
    },
    "1864": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0",
        "as_bytes%0#0"
      ]
    },
    "1865": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0",
        "length_uint16%0#0"
      ]
    },
    "1868": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%19#0"
      ]
    },
    "1869": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1870": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "1871": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "1872": {
      "op": "concat",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "1873": {
      "op": "log",
      "stack_out": []
    },
    "1874": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1875": {
      "op": "return"
    },
    "1876": {
      "block": "main_verify_uint64_ge_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "1878": {
      "op": "!",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "1879": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1880": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "1882": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1883": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1886": {
      "op": "btoi",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "1887": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%166#0",
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%167#0"
      ]
    },
    "1890": {
      "op": "btoi",
      "defined_out": [
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0"
      ]
    },
    "1891": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_ge",
      "op": "callsub verify_uint64_ge",
      "defined_out": [
        "to_encode%18#0"
      ],
      "stack_out": [
        "to_encode%18#0"
      ]
    },
    "1894": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%18#0"
      ],
      "stack_out": [
        "to_encode%18#0",
        "0x00"
      ]
    },
    "1895": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%18#0"
      ],
      "stack_out": [
        "to_encode%18#0",
        "0x00",
        "0"
      ]
    },
    "1896": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%18#0"
      ]
    },
    "1898": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0"
      ]
    },
    "1899": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0",
        "0x151f7c75"
      ]
    },
    "1900": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ]
    },
    "1901": {
      "op": "concat",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "1902": {
      "op": "log",
      "stack_out": []
    },
    "1903": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1904": {
      "op": "return"
    },
    "1905": {
      "block": "main_verify_uint64_gt_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "1907": {
      "op": "!",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "1908": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1909": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "1911": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1912": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "1915": {
      "op": "btoi",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "1916": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%157#0",
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%158#0"
      ]
    },
    "1919": {
      "op": "btoi",
      "defined_out": [
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0"
      ]
    },
    "1920": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_gt",
      "op": "callsub verify_uint64_gt",
      "defined_out": [
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0"
      ]
    },
    "1923": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0",
        "0x00"
      ]
    },
    "1924": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0",
        "0x00",
        "0"
      ]
    },
    "1925": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%17#0"
      ]
    },
    "1927": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "1928": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "1929": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "1930": {
      "op": "concat",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "1931": {
      "op": "log",
      "stack_out": []
    },
    "1932": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1933": {
      "op": "return"
    },
    "1934": {
      "block": "main_verify_uint64_le_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "1936": {
      "op": "!",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1937": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1938": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "1940": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1941": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1944": {
      "op": "btoi",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1945": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%148#0",
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%148#0",
        "tmp%149#0"
      ]
    },
    "1948": {
      "op": "btoi",
      "defined_out": [
        "tmp%148#0",
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%148#0",
        "tmp%150#0"
      ]
    },
    "1949": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_le",
      "op": "callsub verify_uint64_le",
      "defined_out": [
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0"
      ]
    },
    "1952": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0",
        "0x00"
      ]
    },
    "1953": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0",
        "0x00",
        "0"
      ]
    },
    "1954": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%16#0"
      ]
    },
    "1956": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "1957": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "1958": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "1959": {
      "op": "concat",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "1960": {
      "op": "log",
      "stack_out": []
    },
    "1961": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1962": {
      "op": "return"
    },
    "1963": {
      "block": "main_verify_uint64_lt_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1965": {
      "op": "!",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "1966": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1967": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "1969": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1970": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "1973": {
      "op": "btoi",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "1974": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%139#0",
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%139#0",
        "tmp%140#0"
      ]
    },
    "1977": {
      "op": "btoi",
      "defined_out": [
        "tmp%139#0",
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%139#0",
        "tmp%141#0"
      ]
    },
    "1978": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_lt",
      "op": "callsub verify_uint64_lt",
      "defined_out": [
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0"
      ]
    },
    "1981": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0",
        "0x00"
      ]
    },
    "1982": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0",
        "0x00",
        "0"
      ]
    },
    "1983": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%15#0"
      ]
    },
    "1985": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "1986": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "1987": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "1988": {
      "op": "concat",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1989": {
      "op": "log",
      "stack_out": []
    },
    "1990": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1991": {
      "op": "return"
    },
    "1992": {
      "block": "main_verify_uint64_ne_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1994": {
      "op": "!",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1995": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1996": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1998": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1999": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "2002": {
      "op": "btoi",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "2003": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%130#0",
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%130#0",
        "tmp%131#0"
      ]
    },
    "2006": {
      "op": "btoi",
      "defined_out": [
        "tmp%130#0",
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%130#0",
        "tmp%132#0"
      ]
    },
    "2007": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_ne",
      "op": "callsub verify_uint64_ne",
      "defined_out": [
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0"
      ]
    },
    "2010": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "0x00"
      ]
    },
    "2011": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "0x00",
        "0"
      ]
    },
    "2012": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%14#0"
      ]
    },
    "2014": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "2015": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "2016": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "2017": {
      "op": "concat",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "2018": {
      "op": "log",
      "stack_out": []
    },
    "2019": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2020": {
      "op": "return"
    },
    "2021": {
      "block": "main_verify_uint64_eq_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "2023": {
      "op": "!",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "2024": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2025": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "2027": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2028": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "2031": {
      "op": "btoi",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "2032": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%121#0",
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%121#0",
        "tmp%122#0"
      ]
    },
    "2035": {
      "op": "btoi",
      "defined_out": [
        "tmp%121#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%121#0",
        "tmp%123#0"
      ]
    },
    "2036": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_eq",
      "op": "callsub verify_uint64_eq",
      "defined_out": [
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0"
      ]
    },
    "2039": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "0x00"
      ]
    },
    "2040": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "0x00",
        "0"
      ]
    },
    "2041": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%13#0"
      ]
    },
    "2043": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "2044": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "2045": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "2046": {
      "op": "concat",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "2047": {
      "op": "log",
      "stack_out": []
    },
    "2048": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2049": {
      "op": "return"
    },
    "2050": {
      "block": "main_verify_uint64_pow_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "2052": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "2053": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2054": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "2056": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2057": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "2060": {
      "op": "btoi",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "2061": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%112#0",
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%112#0",
        "tmp%113#0"
      ]
    },
    "2064": {
      "op": "btoi",
      "defined_out": [
        "tmp%112#0",
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%112#0",
        "tmp%114#0"
      ]
    },
    "2065": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_pow",
      "op": "callsub verify_uint64_pow",
      "defined_out": [
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0"
      ]
    },
    "2068": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0"
      ]
    },
    "2069": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0",
        "0x151f7c75"
      ]
    },
    "2070": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%12#0"
      ]
    },
    "2071": {
      "op": "concat",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "2072": {
      "op": "log",
      "stack_out": []
    },
    "2073": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2074": {
      "op": "return"
    },
    "2075": {
      "block": "main_verify_uint64_rshift_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "2077": {
      "op": "!",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "2078": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2079": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "2081": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2082": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "2085": {
      "op": "btoi",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "2086": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%103#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%103#0",
        "tmp%104#0"
      ]
    },
    "2089": {
      "op": "btoi",
      "defined_out": [
        "tmp%103#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%103#0",
        "tmp%105#0"
      ]
    },
    "2090": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_rshift",
      "op": "callsub verify_uint64_rshift",
      "defined_out": [
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0"
      ]
    },
    "2093": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0"
      ]
    },
    "2094": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "0x151f7c75"
      ]
    },
    "2095": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ]
    },
    "2096": {
      "op": "concat",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "2097": {
      "op": "log",
      "stack_out": []
    },
    "2098": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2099": {
      "op": "return"
    },
    "2100": {
      "block": "main_verify_uint64_lshift_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "2102": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "2103": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2104": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "2106": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2107": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "2110": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "2111": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0"
      ]
    },
    "2114": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%96#0"
      ]
    },
    "2115": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_lshift",
      "op": "callsub verify_uint64_lshift",
      "defined_out": [
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0"
      ]
    },
    "2118": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0"
      ]
    },
    "2119": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "0x151f7c75"
      ]
    },
    "2120": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ]
    },
    "2121": {
      "op": "concat",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "2122": {
      "op": "log",
      "stack_out": []
    },
    "2123": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2124": {
      "op": "return"
    },
    "2125": {
      "block": "main_verify_uint64_not_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "2127": {
      "op": "!",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "2128": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2129": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "2131": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2132": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "2135": {
      "op": "btoi",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "2136": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_not",
      "op": "callsub verify_uint64_not",
      "defined_out": [
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0"
      ]
    },
    "2139": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0"
      ]
    },
    "2140": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "0x151f7c75"
      ]
    },
    "2141": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%9#0"
      ]
    },
    "2142": {
      "op": "concat",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "2143": {
      "op": "log",
      "stack_out": []
    },
    "2144": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2145": {
      "op": "return"
    },
    "2146": {
      "block": "main_verify_uint64_xor_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "2148": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "2149": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2150": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "2152": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2153": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "2156": {
      "op": "btoi",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "2157": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%78#0",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%78#0",
        "tmp%79#0"
      ]
    },
    "2160": {
      "op": "btoi",
      "defined_out": [
        "tmp%78#0",
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%78#0",
        "tmp%80#0"
      ]
    },
    "2161": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_xor",
      "op": "callsub verify_uint64_xor",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "2164": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0"
      ]
    },
    "2165": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "0x151f7c75"
      ]
    },
    "2166": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%8#0"
      ]
    },
    "2167": {
      "op": "concat",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "2168": {
      "op": "log",
      "stack_out": []
    },
    "2169": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2170": {
      "op": "return"
    },
    "2171": {
      "block": "main_verify_uint64_or_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "2173": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "2174": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2175": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "2177": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2178": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "2181": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "2182": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0"
      ]
    },
    "2185": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%71#0"
      ]
    },
    "2186": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_or",
      "op": "callsub verify_uint64_or",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "2189": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0"
      ]
    },
    "2190": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "0x151f7c75"
      ]
    },
    "2191": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%7#0"
      ]
    },
    "2192": {
      "op": "concat",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "2193": {
      "op": "log",
      "stack_out": []
    },
    "2194": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2195": {
      "op": "return"
    },
    "2196": {
      "block": "main_verify_uint64_and_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "2198": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "2199": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2200": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "2202": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2203": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "2206": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "2207": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0"
      ]
    },
    "2210": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%62#0"
      ]
    },
    "2211": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_and",
      "op": "callsub verify_uint64_and",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "2214": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0"
      ]
    },
    "2215": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "0x151f7c75"
      ]
    },
    "2216": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ]
    },
    "2217": {
      "op": "concat",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "2218": {
      "op": "log",
      "stack_out": []
    },
    "2219": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2220": {
      "op": "return"
    },
    "2221": {
      "block": "main_verify_uint64_mod_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "2223": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "2224": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2225": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "2227": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2228": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "2231": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "2232": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%51#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0"
      ]
    },
    "2235": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%53#0"
      ]
    },
    "2236": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_mod",
      "op": "callsub verify_uint64_mod",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "2239": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "2240": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "2241": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "2242": {
      "op": "concat",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "2243": {
      "op": "log",
      "stack_out": []
    },
    "2244": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2245": {
      "op": "return"
    },
    "2246": {
      "block": "main_verify_uint64_div_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "2248": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "2249": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2250": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "2252": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2253": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "2256": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "2257": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "2260": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%44#0"
      ]
    },
    "2261": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_div",
      "op": "callsub verify_uint64_div",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "2264": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "2265": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "2266": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "2267": {
      "op": "concat",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "2268": {
      "op": "log",
      "stack_out": []
    },
    "2269": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2270": {
      "op": "return"
    },
    "2271": {
      "block": "main_verify_uint64_mul_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "2273": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "2274": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2275": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "2277": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2278": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "2281": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "2282": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "2285": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%35#0"
      ]
    },
    "2286": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_mul",
      "op": "callsub verify_uint64_mul",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "2289": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "2290": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "2291": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "2292": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "2293": {
      "op": "log",
      "stack_out": []
    },
    "2294": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2295": {
      "op": "return"
    },
    "2296": {
      "block": "main_verify_uint64_sub_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "2298": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "2299": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2300": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "2302": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2303": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "2306": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "2307": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "2310": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0"
      ]
    },
    "2311": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_sub",
      "op": "callsub verify_uint64_sub",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "2314": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "2315": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "2316": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "2317": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "2318": {
      "op": "log",
      "stack_out": []
    },
    "2319": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2320": {
      "op": "return"
    },
    "2321": {
      "block": "main_verify_uint64_add_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2323": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "2324": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2325": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2327": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2328": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2331": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "2332": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "2335": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "2336": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_add",
      "op": "callsub verify_uint64_add",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "2339": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "2340": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "2341": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "2342": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2343": {
      "op": "log",
      "stack_out": []
    },
    "2344": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2345": {
      "op": "return"
    },
    "2346": {
      "block": "main_verify_uint64_init_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2348": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2349": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2350": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2352": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2353": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2356": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2359": {
      "callsub": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_init",
      "op": "callsub verify_uint64_init",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2362": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2363": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "2364": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "2365": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2366": {
      "op": "log",
      "stack_out": []
    },
    "2367": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2368": {
      "op": "return"
    },
    "2369": {
      "block": "main_bare_routing@65",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%554#0"
      ],
      "stack_out": [
        "tmp%554#0"
      ]
    },
    "2371": {
      "op": "bnz main_after_if_else@69",
      "stack_out": []
    },
    "2374": {
      "op": "txn ApplicationID"
    },
    "2376": {
      "op": "!"
    },
    "2377": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "2378": {
      "op": "intc_0 // 1"
    },
    "2379": {
      "op": "return"
    },
    "2380": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_init",
      "params": {
        "raw_value#0": "bytes"
      },
      "block": "verify_uint64_init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2383": {
      "op": "frame_dig -1",
      "defined_out": [
        "raw_value#0 (copy)"
      ],
      "stack_out": [
        "raw_value#0 (copy)"
      ]
    },
    "2385": {
      "op": "btoi",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2386": {
      "retsub": true,
      "op": "retsub"
    },
    "2387": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_add",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_add",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2390": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2392": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2394": {
      "op": "+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2395": {
      "retsub": true,
      "op": "retsub"
    },
    "2396": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_sub",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_sub",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2399": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2401": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2403": {
      "op": "-",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2404": {
      "retsub": true,
      "op": "retsub"
    },
    "2405": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_mul",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_mul",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2408": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2410": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2412": {
      "op": "*",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2413": {
      "retsub": true,
      "op": "retsub"
    },
    "2414": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_div",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_div",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2417": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2419": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2421": {
      "op": "/",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2422": {
      "retsub": true,
      "op": "retsub"
    },
    "2423": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_mod",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_mod",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2426": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2428": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2430": {
      "op": "%",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2431": {
      "retsub": true,
      "op": "retsub"
    },
    "2432": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_and",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_and",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2435": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2437": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2439": {
      "op": "&",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2440": {
      "retsub": true,
      "op": "retsub"
    },
    "2441": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_or",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_or",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2444": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2446": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2448": {
      "op": "|",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2449": {
      "retsub": true,
      "op": "retsub"
    },
    "2450": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_xor",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_xor",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2453": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2455": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2457": {
      "op": "^",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2458": {
      "retsub": true,
      "op": "retsub"
    },
    "2459": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_not",
      "params": {
        "a#0": "uint64"
      },
      "block": "verify_uint64_not",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2462": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2464": {
      "op": "~",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2465": {
      "retsub": true,
      "op": "retsub"
    },
    "2466": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_lshift",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_lshift",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2469": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2471": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2473": {
      "op": "shl",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2474": {
      "retsub": true,
      "op": "retsub"
    },
    "2475": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_rshift",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_rshift",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2478": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2480": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2482": {
      "op": "shr",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2483": {
      "retsub": true,
      "op": "retsub"
    },
    "2484": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_pow",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_pow",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2487": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2489": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2491": {
      "op": "exp",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2492": {
      "retsub": true,
      "op": "retsub"
    },
    "2493": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_eq",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_eq",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2496": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2498": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2500": {
      "op": "==",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2501": {
      "retsub": true,
      "op": "retsub"
    },
    "2502": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_ne",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_ne",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2505": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2507": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2509": {
      "op": "!=",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2510": {
      "retsub": true,
      "op": "retsub"
    },
    "2511": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_lt",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_lt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2514": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2516": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2518": {
      "op": "<",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2519": {
      "retsub": true,
      "op": "retsub"
    },
    "2520": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_le",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_le",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2523": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2525": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2527": {
      "op": "<=",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2528": {
      "retsub": true,
      "op": "retsub"
    },
    "2529": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_gt",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_gt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2532": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2534": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2536": {
      "op": ">",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2537": {
      "retsub": true,
      "op": "retsub"
    },
    "2538": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_ge",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "verify_uint64_ge",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2541": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2543": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2545": {
      "op": ">=",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2546": {
      "retsub": true,
      "op": "retsub"
    },
    "2547": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_init",
      "params": {
        "raw_value#0": "uint64"
      },
      "block": "verify_bytes_init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2550": {
      "op": "frame_dig -1",
      "defined_out": [
        "raw_value#0 (copy)"
      ],
      "stack_out": [
        "raw_value#0 (copy)"
      ]
    },
    "2552": {
      "op": "itob",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2553": {
      "retsub": true,
      "op": "retsub"
    },
    "2554": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_add",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "pad_a_size#0": "uint64",
        "pad_b_size#0": "uint64"
      },
      "block": "verify_bytes_add",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "2557": {
      "op": "frame_dig -2",
      "defined_out": [
        "pad_a_size#0 (copy)"
      ],
      "stack_out": [
        "pad_a_size#0 (copy)"
      ]
    },
    "2559": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2560": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2562": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "2563": {
      "op": "frame_bury -4",
      "stack_out": []
    },
    "2565": {
      "op": "frame_dig -1",
      "defined_out": [
        "pad_b_size#0 (copy)"
      ],
      "stack_out": [
        "pad_b_size#0 (copy)"
      ]
    },
    "2567": {
      "op": "bzero",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2568": {
      "op": "frame_dig -3",
      "defined_out": [
        "b#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "b#0 (copy)"
      ]
    },
    "2570": {
      "op": "concat",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "b#0"
      ]
    },
    "2571": {
      "op": "frame_bury -3",
      "stack_out": []
    },
    "2573": {
      "op": "frame_dig -4",
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2575": {
      "op": "frame_dig -3",
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2577": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2578": {
      "op": "sha256"
    },
    "2579": {
      "retsub": true,
      "op": "retsub"
    },
    "2580": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_eq",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_bytes_eq",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2583": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2585": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2587": {
      "op": "==",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2588": {
      "retsub": true,
      "op": "retsub"
    },
    "2589": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_ne",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_bytes_ne",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2592": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2594": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2596": {
      "op": "!=",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2597": {
      "retsub": true,
      "op": "retsub"
    },
    "2598": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_and",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_bytes_and",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2601": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2603": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2605": {
      "op": "b&",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2606": {
      "retsub": true,
      "op": "retsub"
    },
    "2607": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_or",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_bytes_or",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2610": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2612": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2614": {
      "op": "b|",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2615": {
      "retsub": true,
      "op": "retsub"
    },
    "2616": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_xor",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_bytes_xor",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2619": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2621": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2623": {
      "op": "b^",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2624": {
      "retsub": true,
      "op": "retsub"
    },
    "2625": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_not",
      "params": {
        "a#0": "bytes",
        "pad_size#0": "uint64"
      },
      "block": "verify_bytes_not",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2628": {
      "op": "frame_dig -1",
      "defined_out": [
        "pad_size#0 (copy)"
      ],
      "stack_out": [
        "pad_size#0 (copy)"
      ]
    },
    "2630": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2631": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2633": {
      "op": "concat",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "2634": {
      "op": "dup"
    },
    "2635": {
      "op": "frame_bury -2",
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2637": {
      "op": "b~",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2638": {
      "op": "sha256"
    },
    "2639": {
      "retsub": true,
      "op": "retsub"
    },
    "2640": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_add",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_add",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2643": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2645": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2647": {
      "op": "b+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2648": {
      "retsub": true,
      "op": "retsub"
    },
    "2649": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_add_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_add_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2652": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2654": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2655": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2657": {
      "op": "b+",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2658": {
      "retsub": true,
      "op": "retsub"
    },
    "2659": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_sub",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_sub",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2662": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2664": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2666": {
      "op": "b-",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2667": {
      "retsub": true,
      "op": "retsub"
    },
    "2668": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_sub_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_sub_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2671": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2673": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2674": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2676": {
      "op": "swap",
      "stack_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ]
    },
    "2677": {
      "op": "b-",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2678": {
      "retsub": true,
      "op": "retsub"
    },
    "2679": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mul",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_mul",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2682": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2684": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2686": {
      "op": "b*",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2687": {
      "retsub": true,
      "op": "retsub"
    },
    "2688": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mul_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_mul_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2691": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2693": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2694": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2696": {
      "op": "b*",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2697": {
      "retsub": true,
      "op": "retsub"
    },
    "2698": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_div",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_div",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2701": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2703": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2705": {
      "op": "b/",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2706": {
      "retsub": true,
      "op": "retsub"
    },
    "2707": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_div_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_div_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2710": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2712": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2713": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2715": {
      "op": "swap",
      "stack_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ]
    },
    "2716": {
      "op": "b/",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2717": {
      "retsub": true,
      "op": "retsub"
    },
    "2718": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mod",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_mod",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2721": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2723": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2725": {
      "op": "b%",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2726": {
      "retsub": true,
      "op": "retsub"
    },
    "2727": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mod_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_mod_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2730": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2732": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2733": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2735": {
      "op": "swap",
      "stack_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ]
    },
    "2736": {
      "op": "b%",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2737": {
      "retsub": true,
      "op": "retsub"
    },
    "2738": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_and",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_and",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2741": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2743": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2745": {
      "op": "b&",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2746": {
      "retsub": true,
      "op": "retsub"
    },
    "2747": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_and_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_and_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2750": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2752": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2753": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2755": {
      "op": "b&",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2756": {
      "retsub": true,
      "op": "retsub"
    },
    "2757": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_or",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_or",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2760": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2762": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2764": {
      "op": "b|",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2765": {
      "retsub": true,
      "op": "retsub"
    },
    "2766": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_or_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_or_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2769": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2771": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2772": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2774": {
      "op": "b|",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2775": {
      "retsub": true,
      "op": "retsub"
    },
    "2776": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_xor",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_xor",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2779": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2781": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2783": {
      "op": "b^",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2784": {
      "retsub": true,
      "op": "retsub"
    },
    "2785": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_xor_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_xor_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2788": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2790": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2791": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2793": {
      "op": "b^",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2794": {
      "retsub": true,
      "op": "retsub"
    },
    "2795": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_eq",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_eq",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2798": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2800": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2802": {
      "op": "b==",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2803": {
      "retsub": true,
      "op": "retsub"
    },
    "2804": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_eq_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_eq_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2807": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2809": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2810": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2812": {
      "op": "b==",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2813": {
      "retsub": true,
      "op": "retsub"
    },
    "2814": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ne",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_ne",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2817": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2819": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2821": {
      "op": "b!=",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2822": {
      "retsub": true,
      "op": "retsub"
    },
    "2823": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ne_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_ne_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2826": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2828": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2829": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2831": {
      "op": "b!=",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2832": {
      "retsub": true,
      "op": "retsub"
    },
    "2833": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_lt",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_lt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2836": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2838": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2840": {
      "op": "b<",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2841": {
      "retsub": true,
      "op": "retsub"
    },
    "2842": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_lt_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_lt_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2845": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2847": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2848": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2850": {
      "op": "b>",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2851": {
      "retsub": true,
      "op": "retsub"
    },
    "2852": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_le",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_le",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2855": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2857": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2859": {
      "op": "b<=",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2860": {
      "retsub": true,
      "op": "retsub"
    },
    "2861": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_le_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_le_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2864": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2866": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2867": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2869": {
      "op": "b>=",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2870": {
      "retsub": true,
      "op": "retsub"
    },
    "2871": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_gt",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_gt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2874": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2876": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2878": {
      "op": "b>",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2879": {
      "retsub": true,
      "op": "retsub"
    },
    "2880": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_gt_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_gt_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2883": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2885": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2886": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2888": {
      "op": "b<",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2889": {
      "retsub": true,
      "op": "retsub"
    },
    "2890": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ge",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguint_ge",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2893": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2895": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2897": {
      "op": "b>=",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2898": {
      "retsub": true,
      "op": "retsub"
    },
    "2899": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ge_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64"
      },
      "block": "verify_biguint_ge_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2902": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2904": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2905": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2907": {
      "op": "b<=",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2908": {
      "retsub": true,
      "op": "retsub"
    },
    "2909": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_init",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_string_init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2912": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "\"Hello, \""
      ]
    },
    "2921": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello, \"",
        "a#0 (copy)"
      ],
      "stack_out": [
        "\"Hello, \"",
        "a#0 (copy)"
      ]
    },
    "2923": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2924": {
      "retsub": true,
      "op": "retsub"
    },
    "2925": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_startswith",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_string_startswith",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2928": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2930": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2931": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2932": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2934": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2935": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2936": {
      "op": "bz verify_string_startswith_ternary_false@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2939": {
      "op": "intc_1 // 0"
    },
    "2940": {
      "block": "verify_string_startswith_ternary_merge@3",
      "stack_in": [
        "tmp%0#0",
        "result#0"
      ],
      "op": "swap",
      "defined_out": [
        "result#0"
      ]
    },
    "2941": {
      "retsub": true,
      "op": "retsub"
    },
    "2942": {
      "block": "verify_string_startswith_ternary_false@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2944": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)",
        "0"
      ]
    },
    "2945": {
      "op": "frame_dig 0",
      "defined_out": [
        "0",
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)",
        "0",
        "tmp%0#0"
      ]
    },
    "2947": {
      "op": "extract3",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2948": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "b#0 (copy)"
      ]
    },
    "2950": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "result#0"
      ]
    },
    "2951": {
      "op": "b verify_string_startswith_ternary_merge@3"
    },
    "2954": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_endswith",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_string_endswith",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2957": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "2959": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2960": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2961": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2963": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2964": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2965": {
      "op": "cover 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2967": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2968": {
      "op": "bz verify_string_endswith_ternary_false@2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2971": {
      "op": "intc_1 // 0"
    },
    "2972": {
      "block": "verify_string_endswith_ternary_merge@3",
      "stack_in": [
        "tmp%0#0",
        "tmp%1#0",
        "result#0"
      ],
      "op": "frame_bury 0",
      "defined_out": [
        "result#0"
      ]
    },
    "2974": {
      "retsub": true,
      "op": "retsub"
    },
    "2975": {
      "block": "verify_string_endswith_ternary_false@2",
      "stack_in": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "2977": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "2979": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%0#0 (copy)",
        "tmp%0#0 (copy)"
      ]
    },
    "2980": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2982": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2983": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%0#0",
        "tmp%3#0",
        "a#0 (copy)"
      ]
    },
    "2985": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%0#0",
        "a#0 (copy)",
        "tmp%3#0"
      ]
    },
    "2986": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "a#0 (copy)",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "2988": {
      "op": "extract3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "2989": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0",
        "b#0 (copy)"
      ]
    },
    "2991": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "result#0"
      ]
    },
    "2992": {
      "op": "b verify_string_endswith_ternary_merge@3"
    },
    "2995": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_join",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_string_join",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2998": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "3000": {
      "op": "pushbytes \", \"",
      "defined_out": [
        "\", \"",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "\", \""
      ]
    },
    "3004": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3005": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "3007": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "3008": {
      "retsub": true,
      "op": "retsub"
    },
    "3009": {
      "subroutine": "tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_log",
      "params": {
        "a#0": "bytes",
        "b#0": "uint64",
        "c#0": "bytes",
        "d#0": "bytes",
        "e#0": "bytes",
        "f#0": "bytes",
        "g#0": "bytes",
        "h#0": "bytes",
        "i#0": "bytes",
        "j#0": "bytes",
        "k#0": "bytes",
        "m#0": "bytes",
        "n#0": "bytes"
      },
      "block": "verify_log",
      "stack_in": [],
      "op": "proto 13 0"
    },
    "3012": {
      "op": "frame_dig -13",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "3014": {
      "op": "bytec_2 // \"-\"",
      "defined_out": [
        "\"-\"",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "\"-\""
      ]
    },
    "3015": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3016": {
      "op": "frame_dig -12",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "3018": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3019": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3020": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%2#0",
        "\"-\""
      ]
    },
    "3021": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3022": {
      "op": "frame_dig -11",
      "defined_out": [
        "c#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "c#0 (copy)"
      ]
    },
    "3024": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3025": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%4#0",
        "\"-\""
      ]
    },
    "3026": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "3027": {
      "op": "frame_dig -10",
      "defined_out": [
        "d#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "d#0 (copy)"
      ]
    },
    "3029": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "3030": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%6#0",
        "\"-\""
      ]
    },
    "3031": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "3032": {
      "op": "frame_dig -9",
      "defined_out": [
        "e#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "e#0 (copy)"
      ]
    },
    "3034": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3035": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%8#0",
        "\"-\""
      ]
    },
    "3036": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "3037": {
      "op": "frame_dig -8",
      "defined_out": [
        "f#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "f#0 (copy)"
      ]
    },
    "3039": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "3040": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%10#0",
        "\"-\""
      ]
    },
    "3041": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "3042": {
      "op": "frame_dig -7",
      "defined_out": [
        "g#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "g#0 (copy)"
      ]
    },
    "3044": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "3045": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%12#0",
        "\"-\""
      ]
    },
    "3046": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "3047": {
      "op": "frame_dig -6",
      "defined_out": [
        "h#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "h#0 (copy)"
      ]
    },
    "3049": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "3050": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%14#0",
        "\"-\""
      ]
    },
    "3051": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "3052": {
      "op": "frame_dig -5",
      "defined_out": [
        "i#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "i#0 (copy)"
      ]
    },
    "3054": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "3055": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%16#0",
        "\"-\""
      ]
    },
    "3056": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "3057": {
      "op": "frame_dig -4",
      "defined_out": [
        "j#0 (copy)",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "j#0 (copy)"
      ]
    },
    "3059": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "3060": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%18#0",
        "\"-\""
      ]
    },
    "3061": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "3062": {
      "op": "frame_dig -3",
      "defined_out": [
        "k#0 (copy)",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "k#0 (copy)"
      ]
    },
    "3064": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "3065": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%20#0",
        "\"-\""
      ]
    },
    "3066": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "3067": {
      "op": "frame_dig -2",
      "defined_out": [
        "m#0 (copy)",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "m#0 (copy)"
      ]
    },
    "3069": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "3070": {
      "op": "bytec_2 // \"-\"",
      "stack_out": [
        "tmp%22#0",
        "\"-\""
      ]
    },
    "3071": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "3072": {
      "op": "frame_dig -1",
      "defined_out": [
        "n#0 (copy)",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "n#0 (copy)"
      ]
    },
    "3074": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "3075": {
      "op": "log",
      "stack_out": []
    },
    "3076": {
      "retsub": true,
      "op": "retsub"
    }
  }
}