#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75 0x00 "-" 0x151f7c750020
    // tests/artifacts/PrimitiveOps/contract.py:6
    // class PrimitiveOpsContract(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@67
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x725c692b 0x17314559 0x53f34893 0x88c8b269 0xa464b7ab 0x9c8b11b8 0x6f40654e 0xec9a2974 0xc793708f 0x7ddb7499 0xa21c443d 0x6e7fb212 0xb007fcb0 0x2ebc20d4 0xb0954b66 0xdd140aef 0xace474da 0xba694990 0x6db581c0 0x91c8db89 0xdbe77158 0x9a0f22e1 0x64033d37 0x2a7237c5 0xe3a94458 0x42f87f7d 0x2b5542a4 0x9be2fbe9 0x1cd92515 0x64e1705c 0xf1271c50 0x2ab63b70 0x834bb7d2 0x531620d7 0x3fb9e769 0xfa8db0bc 0xa72ea485 0xb7b0ba19 0x74460c42 0xab320738 0x52ad4654 0x10156399 0x0f075957 0xbd843dff 0xb377d381 0x89767265 0x456b4b23 0x33d1b88c 0x6bf973ea 0x67cd6bb2 0x3f58805a 0x1e130039 0x509dc91d 0xa564a202 0x23650763 0xf8c8f8d5 0x23faf7a4 0x7d0afe15 0x48581adf 0xe007c10b // method "verify_uint64_init(byte[])uint64", method "verify_uint64_add(uint64,uint64)uint64", method "verify_uint64_sub(uint64,uint64)uint64", method "verify_uint64_mul(uint64,uint64)uint64", method "verify_uint64_div(uint64,uint64)uint64", method "verify_uint64_mod(uint64,uint64)uint64", method "verify_uint64_and(uint64,uint64)uint64", method "verify_uint64_or(uint64,uint64)uint64", method "verify_uint64_xor(uint64,uint64)uint64", method "verify_uint64_not(uint64)uint64", method "verify_uint64_lshift(uint64,uint64)uint64", method "verify_uint64_rshift(uint64,uint64)uint64", method "verify_uint64_pow(uint64,uint64)uint64", method "verify_uint64_eq(uint64,uint64)bool", method "verify_uint64_ne(uint64,uint64)bool", method "verify_uint64_lt(uint64,uint64)bool", method "verify_uint64_le(uint64,uint64)bool", method "verify_uint64_gt(uint64,uint64)bool", method "verify_uint64_ge(uint64,uint64)bool", method "verify_bytes_init(uint64)byte[]", method "verify_bytes_add(byte[],byte[],uint64,uint64)byte[]", method "verify_bytes_eq(byte[],byte[])bool", method "verify_bytes_ne(byte[],byte[])bool", method "verify_bytes_and(byte[],byte[])byte[]", method "verify_bytes_or(byte[],byte[])byte[]", method "verify_bytes_xor(byte[],byte[])byte[]", method "verify_bytes_not(byte[],uint64)byte[]", method "verify_biguint_add(byte[],byte[])byte[]", method "verify_biguint_add_uint64(byte[],uint64)byte[]", method "verify_biguint_sub(byte[],byte[])byte[]", method "verify_biguint_sub_uint64(byte[],uint64)byte[]", method "verify_biguint_mul(byte[],byte[])byte[]", method "verify_biguint_mul_uint64(byte[],uint64)byte[]", method "verify_biguint_div(byte[],byte[])byte[]", method "verify_biguint_div_uint64(byte[],uint64)byte[]", method "verify_biguint_mod(byte[],byte[])byte[]", method "verify_biguint_mod_uint64(byte[],uint64)byte[]", method "verify_biguint_and(byte[],byte[])byte[]", method "verify_biguint_and_uint64(byte[],uint64)byte[]", method "verify_biguint_or(byte[],byte[])byte[]", method "verify_biguint_or_uint64(byte[],uint64)byte[]", method "verify_biguint_xor(byte[],byte[])byte[]", method "verify_biguint_xor_uint64(byte[],uint64)byte[]", method "verify_biguint_eq(byte[],byte[])bool", method "verify_biguint_eq_uint64(byte[],uint64)bool", method "verify_biguint_ne(byte[],byte[])bool", method "verify_biguint_ne_uint64(byte[],uint64)bool", method "verify_biguint_lt(byte[],byte[])bool", method "verify_biguint_lt_uint64(byte[],uint64)bool", method "verify_biguint_le(byte[],byte[])bool", method "verify_biguint_le_uint64(byte[],uint64)bool", method "verify_biguint_gt(byte[],byte[])bool", method "verify_biguint_gt_uint64(byte[],uint64)bool", method "verify_biguint_ge(byte[],byte[])bool", method "verify_biguint_ge_uint64(byte[],uint64)bool", method "verify_string_init(string)string", method "verify_string_startswith(string,string)bool", method "verify_string_endswith(string,string)bool", method "verify_string_join(string,string)string", method "verify_log(string,uint64,byte[],byte[],bool,string,uint64,uint256,ufixed32x8,ufixed256x16,byte[],byte[],byte[])void"
    txna ApplicationArgs 0
    match verify_uint64_init verify_uint64_add verify_uint64_sub verify_uint64_mul verify_uint64_div verify_uint64_mod verify_uint64_and verify_uint64_or verify_uint64_xor verify_uint64_not verify_uint64_lshift verify_uint64_rshift verify_uint64_pow verify_uint64_eq verify_uint64_ne verify_uint64_lt verify_uint64_le verify_uint64_gt verify_uint64_ge verify_bytes_init verify_bytes_add verify_bytes_eq verify_bytes_ne verify_bytes_and verify_bytes_or verify_bytes_xor verify_bytes_not verify_biguint_add verify_biguint_add_uint64 verify_biguint_sub verify_biguint_sub_uint64 verify_biguint_mul verify_biguint_mul_uint64 verify_biguint_div verify_biguint_div_uint64 verify_biguint_mod verify_biguint_mod_uint64 verify_biguint_and verify_biguint_and_uint64 verify_biguint_or verify_biguint_or_uint64 verify_biguint_xor verify_biguint_xor_uint64 verify_biguint_eq verify_biguint_eq_uint64 verify_biguint_ne verify_biguint_ne_uint64 verify_biguint_lt verify_biguint_lt_uint64 verify_biguint_le verify_biguint_le_uint64 verify_biguint_gt verify_biguint_gt_uint64 verify_biguint_ge verify_biguint_ge_uint64 verify_string_init verify_string_startswith verify_string_endswith verify_string_join verify_log
    err

main___algopy_default_create@67:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_init[routing]() -> void:
verify_uint64_init:
    // tests/artifacts/PrimitiveOps/contract.py:7
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:9
    // result = op.btoi(raw_value)
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:7
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_add[routing]() -> void:
verify_uint64_add:
    // tests/artifacts/PrimitiveOps/contract.py:12
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:14
    // result = a + b
    +
    // tests/artifacts/PrimitiveOps/contract.py:12
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_sub[routing]() -> void:
verify_uint64_sub:
    // tests/artifacts/PrimitiveOps/contract.py:17
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:19
    // result = a - b
    -
    // tests/artifacts/PrimitiveOps/contract.py:17
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_mul[routing]() -> void:
verify_uint64_mul:
    // tests/artifacts/PrimitiveOps/contract.py:22
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:24
    // result = a * b
    *
    // tests/artifacts/PrimitiveOps/contract.py:22
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_div[routing]() -> void:
verify_uint64_div:
    // tests/artifacts/PrimitiveOps/contract.py:27
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:29
    // result = a // b
    /
    // tests/artifacts/PrimitiveOps/contract.py:27
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_mod[routing]() -> void:
verify_uint64_mod:
    // tests/artifacts/PrimitiveOps/contract.py:32
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:34
    // result = a % b
    %
    // tests/artifacts/PrimitiveOps/contract.py:32
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_and[routing]() -> void:
verify_uint64_and:
    // tests/artifacts/PrimitiveOps/contract.py:37
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:39
    // result = a & b
    &
    // tests/artifacts/PrimitiveOps/contract.py:37
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_or[routing]() -> void:
verify_uint64_or:
    // tests/artifacts/PrimitiveOps/contract.py:42
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:44
    // result = a | b
    |
    // tests/artifacts/PrimitiveOps/contract.py:42
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_xor[routing]() -> void:
verify_uint64_xor:
    // tests/artifacts/PrimitiveOps/contract.py:47
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:49
    // result = a ^ b
    ^
    // tests/artifacts/PrimitiveOps/contract.py:47
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_not[routing]() -> void:
verify_uint64_not:
    // tests/artifacts/PrimitiveOps/contract.py:52
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:54
    // result = ~a
    ~
    // tests/artifacts/PrimitiveOps/contract.py:52
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_lshift[routing]() -> void:
verify_uint64_lshift:
    // tests/artifacts/PrimitiveOps/contract.py:57
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:59
    // result = a << b
    shl
    // tests/artifacts/PrimitiveOps/contract.py:57
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_rshift[routing]() -> void:
verify_uint64_rshift:
    // tests/artifacts/PrimitiveOps/contract.py:62
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:64
    // result = a >> b
    shr
    // tests/artifacts/PrimitiveOps/contract.py:62
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_pow[routing]() -> void:
verify_uint64_pow:
    // tests/artifacts/PrimitiveOps/contract.py:67
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:69
    // result = a**b
    exp
    // tests/artifacts/PrimitiveOps/contract.py:67
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_eq[routing]() -> void:
verify_uint64_eq:
    // tests/artifacts/PrimitiveOps/contract.py:72
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:74
    // result = a == b
    ==
    // tests/artifacts/PrimitiveOps/contract.py:72
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_ne[routing]() -> void:
verify_uint64_ne:
    // tests/artifacts/PrimitiveOps/contract.py:77
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:79
    // result = a != b
    !=
    // tests/artifacts/PrimitiveOps/contract.py:77
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_lt[routing]() -> void:
verify_uint64_lt:
    // tests/artifacts/PrimitiveOps/contract.py:82
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:84
    // result = a < b
    <
    // tests/artifacts/PrimitiveOps/contract.py:82
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_le[routing]() -> void:
verify_uint64_le:
    // tests/artifacts/PrimitiveOps/contract.py:87
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:89
    // result = a <= b
    <=
    // tests/artifacts/PrimitiveOps/contract.py:87
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_gt[routing]() -> void:
verify_uint64_gt:
    // tests/artifacts/PrimitiveOps/contract.py:92
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:94
    // result = a > b
    >
    // tests/artifacts/PrimitiveOps/contract.py:92
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_uint64_ge[routing]() -> void:
verify_uint64_ge:
    // tests/artifacts/PrimitiveOps/contract.py:97
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:99
    // result = a >= b
    >=
    // tests/artifacts/PrimitiveOps/contract.py:97
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_init[routing]() -> void:
verify_bytes_init:
    // tests/artifacts/PrimitiveOps/contract.py:102
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:104
    // result = op.itob(raw_value)
    itob
    // tests/artifacts/PrimitiveOps/contract.py:102
    // @arc4.abimethod()
    pushbytes 0x151f7c750008
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_add[routing]() -> void:
verify_bytes_add:
    // tests/artifacts/PrimitiveOps/contract.py:107
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:111
    // a = op.bzero(pad_a_size) + a
    swap
    bzero
    uncover 3
    concat
    // tests/artifacts/PrimitiveOps/contract.py:112
    // b = op.bzero(pad_b_size) + b
    swap
    bzero
    uncover 2
    concat
    // tests/artifacts/PrimitiveOps/contract.py:113
    // result = a + b
    concat
    // tests/artifacts/PrimitiveOps/contract.py:114
    // result = op.sha256(result)
    sha256
    // tests/artifacts/PrimitiveOps/contract.py:107
    // @arc4.abimethod()
    bytec_3 // 0x151f7c750020
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_eq[routing]() -> void:
verify_bytes_eq:
    // tests/artifacts/PrimitiveOps/contract.py:117
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:119
    // result = a == b
    ==
    // tests/artifacts/PrimitiveOps/contract.py:117
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_ne[routing]() -> void:
verify_bytes_ne:
    // tests/artifacts/PrimitiveOps/contract.py:122
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:124
    // result = a != b
    !=
    // tests/artifacts/PrimitiveOps/contract.py:122
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_and[routing]() -> void:
verify_bytes_and:
    // tests/artifacts/PrimitiveOps/contract.py:127
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:129
    // result = a & b
    b&
    // tests/artifacts/PrimitiveOps/contract.py:127
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_or[routing]() -> void:
verify_bytes_or:
    // tests/artifacts/PrimitiveOps/contract.py:132
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:134
    // result = a | b
    b|
    // tests/artifacts/PrimitiveOps/contract.py:132
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_xor[routing]() -> void:
verify_bytes_xor:
    // tests/artifacts/PrimitiveOps/contract.py:137
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:139
    // result = a ^ b
    b^
    // tests/artifacts/PrimitiveOps/contract.py:137
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_bytes_not[routing]() -> void:
verify_bytes_not:
    // tests/artifacts/PrimitiveOps/contract.py:142
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:144
    // a = op.bzero(pad_size) + a
    bzero
    swap
    concat
    // tests/artifacts/PrimitiveOps/contract.py:145
    // result = ~a
    b~
    // tests/artifacts/PrimitiveOps/contract.py:146
    // result = op.sha256(result)
    sha256
    // tests/artifacts/PrimitiveOps/contract.py:142
    // @arc4.abimethod()
    bytec_3 // 0x151f7c750020
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_add[routing]() -> void:
verify_biguint_add:
    // tests/artifacts/PrimitiveOps/contract.py:149
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:153
    // result = a_biguint + b_biguint
    b+
    // tests/artifacts/PrimitiveOps/contract.py:149
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_add_uint64[routing]() -> void:
verify_biguint_add_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:156
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:159
    // result = a_biguint + b
    itob
    b+
    // tests/artifacts/PrimitiveOps/contract.py:156
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_sub[routing]() -> void:
verify_biguint_sub:
    // tests/artifacts/PrimitiveOps/contract.py:162
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:166
    // result = a_biguint - b_biguint
    b-
    // tests/artifacts/PrimitiveOps/contract.py:162
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_sub_uint64[routing]() -> void:
verify_biguint_sub_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:169
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:172
    // result = a_biguint - b
    itob
    b-
    // tests/artifacts/PrimitiveOps/contract.py:169
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mul[routing]() -> void:
verify_biguint_mul:
    // tests/artifacts/PrimitiveOps/contract.py:175
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:179
    // result = a_biguint * b_biguint
    b*
    // tests/artifacts/PrimitiveOps/contract.py:175
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mul_uint64[routing]() -> void:
verify_biguint_mul_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:182
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:185
    // result = a_biguint * b
    itob
    b*
    // tests/artifacts/PrimitiveOps/contract.py:182
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_div[routing]() -> void:
verify_biguint_div:
    // tests/artifacts/PrimitiveOps/contract.py:188
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:192
    // result = a_biguint // b_biguint
    b/
    // tests/artifacts/PrimitiveOps/contract.py:188
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_div_uint64[routing]() -> void:
verify_biguint_div_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:195
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:198
    // result = a_biguint // b
    itob
    b/
    // tests/artifacts/PrimitiveOps/contract.py:195
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mod[routing]() -> void:
verify_biguint_mod:
    // tests/artifacts/PrimitiveOps/contract.py:201
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:205
    // result = a_biguint % b_biguint
    b%
    // tests/artifacts/PrimitiveOps/contract.py:201
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_mod_uint64[routing]() -> void:
verify_biguint_mod_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:208
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:211
    // result = a_biguint % b
    itob
    b%
    // tests/artifacts/PrimitiveOps/contract.py:208
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_and[routing]() -> void:
verify_biguint_and:
    // tests/artifacts/PrimitiveOps/contract.py:214
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:218
    // result = a_biguint & b_biguint
    b&
    // tests/artifacts/PrimitiveOps/contract.py:214
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_and_uint64[routing]() -> void:
verify_biguint_and_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:221
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:224
    // result = a_biguint & b
    itob
    b&
    // tests/artifacts/PrimitiveOps/contract.py:221
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_or[routing]() -> void:
verify_biguint_or:
    // tests/artifacts/PrimitiveOps/contract.py:227
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:231
    // result = a_biguint | b_biguint
    b|
    // tests/artifacts/PrimitiveOps/contract.py:227
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_or_uint64[routing]() -> void:
verify_biguint_or_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:234
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:237
    // result = a_biguint | b
    itob
    b|
    // tests/artifacts/PrimitiveOps/contract.py:234
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_xor[routing]() -> void:
verify_biguint_xor:
    // tests/artifacts/PrimitiveOps/contract.py:240
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:244
    // result = a_biguint ^ b_biguint
    b^
    // tests/artifacts/PrimitiveOps/contract.py:240
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_xor_uint64[routing]() -> void:
verify_biguint_xor_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:247
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:250
    // result = a_biguint ^ b
    itob
    b^
    // tests/artifacts/PrimitiveOps/contract.py:247
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_eq[routing]() -> void:
verify_biguint_eq:
    // tests/artifacts/PrimitiveOps/contract.py:253
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:257
    // result = a_biguint == b_biguint
    b==
    // tests/artifacts/PrimitiveOps/contract.py:253
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_eq_uint64[routing]() -> void:
verify_biguint_eq_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:260
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:263
    // result = a_biguint == b
    itob
    b==
    // tests/artifacts/PrimitiveOps/contract.py:260
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ne[routing]() -> void:
verify_biguint_ne:
    // tests/artifacts/PrimitiveOps/contract.py:266
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:270
    // result = a_biguint != b_biguint
    b!=
    // tests/artifacts/PrimitiveOps/contract.py:266
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ne_uint64[routing]() -> void:
verify_biguint_ne_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:273
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:276
    // result = a_biguint != b
    itob
    b!=
    // tests/artifacts/PrimitiveOps/contract.py:273
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_lt[routing]() -> void:
verify_biguint_lt:
    // tests/artifacts/PrimitiveOps/contract.py:279
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:283
    // result = a_biguint < b_biguint
    b<
    // tests/artifacts/PrimitiveOps/contract.py:279
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_lt_uint64[routing]() -> void:
verify_biguint_lt_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:286
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:289
    // result = a_biguint < b
    itob
    b<
    // tests/artifacts/PrimitiveOps/contract.py:286
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_le[routing]() -> void:
verify_biguint_le:
    // tests/artifacts/PrimitiveOps/contract.py:292
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:296
    // result = a_biguint <= b_biguint
    b<=
    // tests/artifacts/PrimitiveOps/contract.py:292
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_le_uint64[routing]() -> void:
verify_biguint_le_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:299
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:302
    // result = a_biguint <= b
    itob
    b<=
    // tests/artifacts/PrimitiveOps/contract.py:299
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_gt[routing]() -> void:
verify_biguint_gt:
    // tests/artifacts/PrimitiveOps/contract.py:305
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:309
    // result = a_biguint > b_biguint
    b>
    // tests/artifacts/PrimitiveOps/contract.py:305
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_gt_uint64[routing]() -> void:
verify_biguint_gt_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:312
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:315
    // result = a_biguint > b
    itob
    b>
    // tests/artifacts/PrimitiveOps/contract.py:312
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ge[routing]() -> void:
verify_biguint_ge:
    // tests/artifacts/PrimitiveOps/contract.py:318
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:322
    // result = a_biguint >= b_biguint
    b>=
    // tests/artifacts/PrimitiveOps/contract.py:318
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_biguint_ge_uint64[routing]() -> void:
verify_biguint_ge_uint64:
    // tests/artifacts/PrimitiveOps/contract.py:325
    // @arc4.abimethod()
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/PrimitiveOps/contract.py:328
    // result = a_biguint >= b
    itob
    b>=
    // tests/artifacts/PrimitiveOps/contract.py:325
    // @arc4.abimethod()
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_init[routing]() -> void:
verify_string_init:
    // tests/artifacts/PrimitiveOps/contract.py:331
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:333
    // result = String("Hello, ") + a
    pushbytes "Hello, "
    swap
    concat
    // tests/artifacts/PrimitiveOps/contract.py:331
    // @arc4.abimethod
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_startswith[routing]() -> void:
verify_string_startswith:
    // tests/artifacts/PrimitiveOps/contract.py:336
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    dup
    txna ApplicationArgs 2
    extract 2 0
    dup
    cover 2
    // tests/artifacts/PrimitiveOps/contract.py:338
    // result = a.startswith(b)
    len
    dup
    uncover 2
    len
    >
    bz verify_string_startswith_ternary_false@3
    intc_1 // 0

verify_string_startswith_ternary_merge@4:
    // tests/artifacts/PrimitiveOps/contract.py:336
    // @arc4.abimethod
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

verify_string_startswith_ternary_false@3:
    // tests/artifacts/PrimitiveOps/contract.py:338
    // result = a.startswith(b)
    dig 2
    intc_1 // 0
    dig 2
    extract3
    dig 2
    ==
    b verify_string_startswith_ternary_merge@4


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_endswith[routing]() -> void:
verify_string_endswith:
    // tests/artifacts/PrimitiveOps/contract.py:341
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    dup
    txna ApplicationArgs 2
    extract 2 0
    dup
    cover 2
    // tests/artifacts/PrimitiveOps/contract.py:343
    // result = a.endswith(b)
    len
    dup
    uncover 2
    len
    dup
    cover 2
    >
    bz verify_string_endswith_ternary_false@3
    intc_1 // 0

verify_string_endswith_ternary_merge@4:
    // tests/artifacts/PrimitiveOps/contract.py:341
    // @arc4.abimethod
    bytec_1 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

verify_string_endswith_ternary_false@3:
    // tests/artifacts/PrimitiveOps/contract.py:343
    // result = a.endswith(b)
    dup
    dig 2
    dup
    cover 2
    -
    dig 5
    swap
    uncover 2
    extract3
    dig 3
    ==
    b verify_string_endswith_ternary_merge@4


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_string_join[routing]() -> void:
verify_string_join:
    // tests/artifacts/PrimitiveOps/contract.py:346
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:348
    // result = String(", ").join((a, b))
    swap
    pushbytes ", "
    concat
    swap
    concat
    // tests/artifacts/PrimitiveOps/contract.py:346
    // @arc4.abimethod
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.PrimitiveOps.contract.PrimitiveOpsContract.verify_log[routing]() -> void:
verify_log:
    // tests/artifacts/PrimitiveOps/contract.py:351
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    extract 2 0
    txna ApplicationArgs 12
    extract 2 0
    txna ApplicationArgs 13
    extract 2 0
    // tests/artifacts/PrimitiveOps/contract.py:372
    // log(a, b, c, d_biguint, e, f, g, h, i, j, arc4_k, arc4_m, arc4_n, sep="-")
    uncover 12
    bytec_2 // "-"
    concat
    uncover 12
    itob
    concat
    bytec_2 // "-"
    concat
    uncover 11
    concat
    bytec_2 // "-"
    concat
    uncover 10
    concat
    bytec_2 // "-"
    concat
    uncover 9
    concat
    bytec_2 // "-"
    concat
    uncover 8
    concat
    bytec_2 // "-"
    concat
    uncover 7
    concat
    bytec_2 // "-"
    concat
    uncover 6
    concat
    bytec_2 // "-"
    concat
    uncover 5
    concat
    bytec_2 // "-"
    concat
    uncover 4
    concat
    bytec_2 // "-"
    concat
    uncover 3
    concat
    bytec_2 // "-"
    concat
    uncover 2
    concat
    bytec_2 // "-"
    concat
    swap
    concat
    log
    // tests/artifacts/PrimitiveOps/contract.py:351
    // @arc4.abimethod
    intc_0 // 1
    return
