{
    "hints": {
        "test_uint64_array()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_biguint_array()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_bool_array(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_fixed_size_tuple_array()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_fixed_size_named_tuple_array()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_dynamic_sized_tuple_array()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_dynamic_sized_named_tuple_array()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_implicit_conversion_log(uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_implicit_conversion_emit(uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_nested_array(uint64,uint64[][])uint64[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_bit_packed_tuples()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_uint64_return(uint64)uint64[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_bool_return(uint64)bool[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_tuple_return(uint64)(uint64,bool,bool)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_dynamic_tuple_return(uint64)(uint64,string)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_concat_with_arc4_tuple((uint64,uint64))uint64[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_concat_with_native_tuple((uint64,uint64))uint64[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_dynamic_concat_with_arc4_tuple((string,string))string[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_dynamic_concat_with_native_tuple((string,string))string[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_immutable_arc4((uint64,uint64)[])(uint64,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_imm_fixed_arr()(uint64,uint64)[3]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 11,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "a": {
                    "type": "bytes",
                    "key": "a"
                },
                "bool2": {
                    "type": "bytes",
                    "key": "bool2"
                },
                "bool7": {
                    "type": "bytes",
                    "key": "bool7"
                },
                "bool8": {
                    "type": "bytes",
                    "key": "bool8"
                },
                "bool9": {
                    "type": "bytes",
                    "key": "bool9"
                },
                "c": {
                    "type": "bytes",
                    "key": "c"
                },
                "d": {
                    "type": "bytes",
                    "key": "d"
                },
                "e": {
                    "type": "bytes",
                    "key": "e"
                },
                "f": {
                    "type": "bytes",
                    "key": "f"
                },
                "g": {
                    "type": "bytes",
                    "key": "g"
                },
                "imm_fixed_arr": {
                    "type": "bytes",
                    "key": "imm_fixed_arr"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ImmutableArrayContract",
        "methods": [
            {
                "name": "test_uint64_array",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_biguint_array",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_bool_array",
                "args": [
                    {
                        "type": "uint64",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_fixed_size_tuple_array",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_fixed_size_named_tuple_array",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_dynamic_sized_tuple_array",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_dynamic_sized_named_tuple_array",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_implicit_conversion_log",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "arr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_implicit_conversion_emit",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "arr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_nested_array",
                "args": [
                    {
                        "type": "uint64",
                        "name": "arr_to_add"
                    },
                    {
                        "type": "uint64[][]",
                        "name": "arr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "test_bit_packed_tuples",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "sum_uints_and_lengths_and_trues",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "arr1"
                    },
                    {
                        "type": "bool[]",
                        "name": "arr2"
                    },
                    {
                        "type": "(uint64,bool,bool)[]",
                        "name": "arr3"
                    },
                    {
                        "type": "(uint64,string)[]",
                        "name": "arr4"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "test_uint64_return",
                "args": [
                    {
                        "type": "uint64",
                        "name": "append"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "test_bool_return",
                "args": [
                    {
                        "type": "uint64",
                        "name": "append"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool[]"
                }
            },
            {
                "name": "test_tuple_return",
                "args": [
                    {
                        "type": "uint64",
                        "name": "append"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,bool,bool)[]"
                }
            },
            {
                "name": "test_dynamic_tuple_return",
                "args": [
                    {
                        "type": "uint64",
                        "name": "append"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,string)[]"
                }
            },
            {
                "name": "test_convert_to_array_and_back",
                "args": [
                    {
                        "type": "(uint64,bool,bool)[]",
                        "name": "arr"
                    },
                    {
                        "type": "uint64",
                        "name": "append"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,bool,bool)[]"
                }
            },
            {
                "name": "test_concat_with_arc4_tuple",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "arg"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "test_concat_with_native_tuple",
                "args": [
                    {
                        "type": "(uint64,uint64)",
                        "name": "arg"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "test_dynamic_concat_with_arc4_tuple",
                "args": [
                    {
                        "type": "(string,string)",
                        "name": "arg"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string[]"
                }
            },
            {
                "name": "test_dynamic_concat_with_native_tuple",
                "args": [
                    {
                        "type": "(string,string)",
                        "name": "arg"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string[]"
                }
            },
            {
                "name": "test_concat_immutable_dynamic",
                "args": [
                    {
                        "type": "(uint64,string)[]",
                        "name": "imm1"
                    },
                    {
                        "type": "(uint64,string)[]",
                        "name": "imm2"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,string)[]"
                }
            },
            {
                "name": "test_immutable_arc4",
                "args": [
                    {
                        "type": "(uint64,uint64)[]",
                        "name": "imm"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)[]"
                }
            },
            {
                "name": "test_imm_fixed_arr",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)[3]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}