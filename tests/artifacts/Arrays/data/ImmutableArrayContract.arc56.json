{
    "name": "ImmutableArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "test_uint64_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_biguint_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_implicit_conversion_log",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_implicit_conversion_emit",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "emit_test",
                    "args": [
                        {
                            "type": "uint64[]",
                            "name": "field1"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "test_nested_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "arr_to_add"
                },
                {
                    "type": "uint64[][]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bit_packed_tuples",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_uints_and_lengths_and_trues",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr1"
                },
                {
                    "type": "bool[]",
                    "name": "arr2"
                },
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr3"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "arr4"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_uint64_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_convert_to_array_and_back",
            "args": [
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr"
                },
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_with_arc4_tuple",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_with_native_tuple",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_concat_with_arc4_tuple",
            "args": [
                {
                    "type": "(string,string)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_concat_with_native_tuple",
            "args": [
                {
                    "type": "(string,string)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_immutable_dynamic",
            "args": [
                {
                    "type": "(uint64,string)[]",
                    "name": "imm1"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "imm2"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_immutable_arc4",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "imm"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_imm_fixed_arr",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 11
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "a": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "YQ=="
                },
                "g": {
                    "keyType": "AVMString",
                    "valueType": "bool[]",
                    "key": "Zw=="
                },
                "c": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[]",
                    "key": "Yw=="
                },
                "d": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool)[]",
                    "key": "ZA=="
                },
                "e": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,byte[])[]",
                    "key": "ZQ=="
                },
                "f": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Zg=="
                },
                "bool2": {
                    "keyType": "AVMString",
                    "valueType": "(bool,bool)[]",
                    "key": "Ym9vbDI="
                },
                "bool7": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDc="
                },
                "bool8": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDg="
                },
                "bool9": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDk="
                },
                "imm_fixed_arr": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[3]",
                    "key": "aW1tX2ZpeGVkX2Fycg=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        153
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        340
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        4106
                    ],
                    "errorMessage": "check self.imm_fixed_arr exists"
                },
                {
                    "pc": [
                        2181,
                        2489
                    ],
                    "errorMessage": "expected 1, 0"
                },
                {
                    "pc": [
                        2096,
                        2404
                    ],
                    "errorMessage": "expected 1st element to be correct"
                },
                {
                    "pc": [
                        2101,
                        2411
                    ],
                    "errorMessage": "expected 2nd element to be correct"
                },
                {
                    "pc": [
                        2242,
                        2551
                    ],
                    "errorMessage": "expected 4, 3"
                },
                {
                    "pc": [
                        3990
                    ],
                    "errorMessage": "expected arrays to be different"
                },
                {
                    "pc": [
                        4024
                    ],
                    "errorMessage": "expected arrays to be the same"
                },
                {
                    "pc": [
                        1550
                    ],
                    "errorMessage": "expected element 0 to be False"
                },
                {
                    "pc": [
                        1569
                    ],
                    "errorMessage": "expected element 1 to be False"
                },
                {
                    "pc": [
                        1587
                    ],
                    "errorMessage": "expected element 2 to be True"
                },
                {
                    "pc": [
                        4051
                    ],
                    "errorMessage": "expected items on iteration to be the same"
                },
                {
                    "pc": [
                        1613
                    ],
                    "errorMessage": "expected last element to be False"
                },
                {
                    "pc": [
                        3937
                    ],
                    "errorMessage": "expected non empty array"
                },
                {
                    "pc": [
                        3365
                    ],
                    "errorMessage": "expected string length to match index"
                },
                {
                    "pc": [
                        4101
                    ],
                    "errorMessage": "expected sum to be 10"
                },
                {
                    "pc": [
                        4074
                    ],
                    "errorMessage": "expected sum to be 15"
                },
                {
                    "pc": [
                        854,
                        1158,
                        1223,
                        1291,
                        1348,
                        1458,
                        1543,
                        1562,
                        1581,
                        1604,
                        1755,
                        1819,
                        2052,
                        2133,
                        2198,
                        2360,
                        2443,
                        2506,
                        3216,
                        3309,
                        3952,
                        4009,
                        4047,
                        4093
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        970,
                        1011,
                        1067,
                        1094,
                        1134,
                        1162,
                        1206,
                        1271,
                        1328,
                        1440,
                        1527,
                        1658,
                        1717,
                        1781,
                        1908,
                        2010,
                        2116,
                        2318,
                        2426,
                        2683,
                        2724,
                        3014,
                        3023,
                        3032,
                        3041,
                        3109,
                        3146,
                        3190,
                        3271,
                        3912,
                        3935
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        925,
                        998,
                        1122,
                        1196,
                        1246,
                        1316,
                        1428,
                        1694,
                        1883,
                        2624,
                        2771,
                        2835,
                        2921,
                        2960,
                        2991,
                        3440,
                        3573,
                        3747,
                        3781,
                        3816
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1309
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAECCCYLAAQVH3x1AgAAAQACAAJA/////////////////////////////////////////////////////////////////////////////////////wIACgdiaWd1aW50EgACAAAAAAAAAAEAAAAAAAAAAgwAAgAEAAcAAWEAAWINaW1tX2ZpeGVkX2FycjEbQQC3MRkURDEYRIIYBETUL5kEt+qmCwR0PXDtBBx+BJQEotWGCwTgX8VkBB4JK4MEATECYgTIZUqYBInRlvgEbLfJkQSYmL8CBPa2HugEYLhqewRzrSg/BFKd+ukEIG1RTwTgZGXiBOwDAKIE7N8UrwRRGspkBCmFLk8EbUqjWAS3y5a9NhoAjhgCawNSBHwFNwXnBkwHfgizCLkIyAmlCsML9AxADHMMxQ0lDXQNjQ2pDbwN5Q4ODisAMRkUMRgUEEQjQ4oCAov+IlkjCRZXBgCL/kxcAEkVi/8JSov/WE8CIk8DUomKAQKL/yJZIwlJJAtJi/9XAgBJTgJJTwJZSU8CSRVMTgJSKCKLBosBDEEAG4sCiwZJTgJZJAkWVwYCiwVMUIwFJAiMBkL/3YsAFlcGAosFUIsBJAiLAkyLA1JQiwSMAIwBiYoEAShHAov8IllHAov+CEkWVwYAi/xMXABOAkyBBwglCklPAoEHCCUKSU4CDEEADIsGiwUJr4sETFCMBCKMAIsDgRAISYwCi/4IjAGLAosBDEEAIIv9iwBJTgJTiwSLAklOA08CVIwEIwiMAov/CIwAQv/YiwSMAImKAwGL/SJZSYv/CEwkCyQISwEWVwYCTgKL/SRLAlKL/yQLr1CL/RWL/U8DTwJSUIv+UEwkC0kiiwSLAgxBACOLA0kWVwYCiwGLBElOBE8CXUmMAUsBWSQICIwDJAiMBEL/1YsAiwFQjACJigQBKEmL/iQLi/wkCyKLBIsDDEEAHIv9iwRJTgJZiwIIFlcGAosBTFCMASQIjARC/9yL/RWMACKMBIsEiwIMQQAci/+LBElOAlmLAAgWVwYCiwFMUIwBJAiMBEL/3Iv8i/4IFlcGAosBUIv9iwOLAFJQi/8Vi/+LAk8CUlCMAImKAQEiSYsBgQMMQQAfiwFJgRALi/9MgRBYSSJbiwAITCVbCIwAIwiMAUL/2YmKAQEoIosBi/8MQQARiwCAASBQjACLASMIjAFC/+eJigIBIosAi/8MQQAdiwBJFov+TFCL/iJZIwgWVwYCXACM/iMIjABC/9uL/kyJgAoAAQAAAAAAAAAqgQWI/8JJIllJgQYSREkjCUsCVwIATCULW4EEEkSBKxZPAkxQTCMIFlcGAlwARwIiWUmBBxJEIwlLAVcCAEwlC1uBKxJEJFuBKhJEIkmBAwxBABFLASWI/TtFA0hJIwhFAUL/6EsBSSJZSYEEEkQjCUsBVwIATCULWyQSRIEKiP9GSSJZSYEOEkRJIwlLAlcCAEwlC1uBCRJEgSwWTwJMUEwjCBZXBgJcAEkiWUmBDxJEIwlLAVcCAEwlC1uBLBJEgRcWXBJJIlmBDxJESYESW4EXEkSAAWFMZyNDMRsjCRaBQK9JTgKrKkxQgAIAAVwARwIiWUkjEkQjCUxXAgBMgUALgUBYKKhEIkmBBQxBACBHAhZLBKtLA0lPAlBMIlkjCBZXBgJcAEUDIwhFAUL/2UsBSSJZSYEGEkRJIwlLAlcCAEyBQAuBQFiAAQSoRDEbFicFTKFJFYFADkRLBatPAkxQTCMIFlcGAlwASSJZSYEHEkRJIwlLAlcCAEyBQAuBQFiAQP////////////////////////////////////////////////////////////////////////////////////6oREsBVwJAKKhETCcFUEwjCBZXBgJcAEkiWUklEkQjCUsBVwIATIFAC4FAWCcFqERJVwJAKKhEJwe8SCcHTL8jQyg2GgEXKiJJSwMMQQAeMRtLAUlPAhIrIk8CVEsDTCMliPvwRQMjCEUBQv/bSwEiWUlFBUsDSU4CEkRBAApLA0RLAYEQUxRESwIjDUEADCNLBAxESwGBEVMUREsCJA1BAAskSwQMREsBgRJTREsCgQMNQQASSwIjCUlLBQxEgRAISwJMUxREgAFnSwJnSwJBAChLAyMJSRZXBgBLA0xcAEsBgRAIIlRMgQcIJQokCCJMUiJZSwMjCRJEI0MqIkmBBQxBACVHAiMITCQISwEWTBZQSwNJTwJQTCJZIwgWVwYCXABFA0UBQv/USwFJIllJgQUSREsBVwIASwJXAhBJIltMJVtMIxJMJBIQREwjCYEQC4EQWEkiW0wlW0yBBRJMgQYSEESBEIj6ZkUBSSJZSYEEEkRLAVcCAEsCVwIQSSJb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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 1
        }
    },
    "events": [
        {
            "name": "emit_test",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "field1"
                }
            ]
        }
    ],
    "templateVariables": {}
}