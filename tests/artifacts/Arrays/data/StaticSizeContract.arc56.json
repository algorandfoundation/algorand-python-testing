{
    "name": "StaticSizeContract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "x1"
                },
                {
                    "type": "uint64",
                    "name": "y1"
                },
                {
                    "type": "uint64",
                    "name": "x2"
                },
                {
                    "type": "uint64",
                    "name": "y2"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_arc4_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_conversion",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arc4_arr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_bool",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        44
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        112
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1190,
                        1207,
                        1217
                    ],
                    "errorMessage": "check self.count exists"
                },
                {
                    "pc": [
                        1035
                    ],
                    "errorMessage": "expected 3 bytes"
                },
                {
                    "pc": [
                        752,
                        763,
                        863,
                        1028,
                        1117
                    ],
                    "errorMessage": "expected correct length"
                },
                {
                    "pc": [
                        1055,
                        1130
                    ],
                    "errorMessage": "expected correct value at 0"
                },
                {
                    "pc": [
                        1075,
                        1143
                    ],
                    "errorMessage": "expected correct value at 1"
                },
                {
                    "pc": [
                        1156
                    ],
                    "errorMessage": "expected correct value at 2"
                },
                {
                    "pc": [
                        1168
                    ],
                    "errorMessage": "expected correct value at 3"
                },
                {
                    "pc": [
                        403,
                        478,
                        517,
                        637,
                        665,
                        786,
                        885,
                        1037,
                        1058,
                        1119,
                        1132,
                        1145,
                        1157
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        731,
                        755,
                        842,
                        910,
                        1001,
                        1100
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        283,
                        342,
                        377
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAAEIEJABJgUABBUffHUFY291bnQBAAIAADEYQAADKiJnMRtBAEAxGRREMRhEggcEKNfBuAT6nLlzBGA5okAE+P1opwQfAo2xBAlrOlkEjW46JTYaAI4HAIEB+QI8AlECyAM6A20AMRkUMRgUEEOKBAEoRwKL/CJZRwKL/ghJFlcGAIv8TFwATgJMgQcIJApJTwKBBwgkCklOAgxBAAyLBosFCa+LBExQjAQijACLAyUISYwCi/4IjAGLAosBDEEAIIv9iwBJTgJTiwSLAklOA08CVIwEIwiMAov/CIwAQv/YiwSMAIkiSShHBTYaATYaAhc2GgM2GgQXKiJniAOhiAOeiAObTw4WTw4WUE8NUE8MUEsLFYFADkSBQK9PDEsBq08CTFCAEAAAAAAAAAAAAAAAAAAAAABMUE8OFk8PTFBPDBZPDBZQTwtQTwpQSwkVgUAORE8JSwSrUFBQTwcWTwhMUE8HFk8HFlBPBlBPBVBLBBWBQA5ETwRPBKtQUFAiSYEDDEEAOUpJTgIhBAshBFhXEIBJJFtLAiMITEsBEkRMVzAQSVcACE8DgQIIFqhEVwgISwFLAgsWqERFAUL/wEsBSRUhBApJRQoWVwYCSwFQgAFhvEiAAWFMv1cAkElFC0lXAAhFCiRbRQYiRQUjRQNLAksIDEEAXEsBSwMhBAshBFhHAlcACEwkW0UGSwqkQQA2SwoiW0wiWwlFB0sDSwYMQQAcSwVLBAlLB0kLTEkLCJJLBQhFBUsCIwhFA0L/sEsDSwYJQv/hIltLCiJbCUUHQv/ISwQWKUxQsCNDNhoBSVcAEExXEBBMSwFQSRUlCkkjCSULSwJMJVhJTwQSREwWVwYCTwJQSSJZIwlLAVcCAEwlCyVYTwISRClMULAjQzYaAUlISRUlChZXBgJMUClMULAjQyhHAjYaARdJKEwjCCNJSwIMQQAYRwKBAhgUSwRMKyJPAlRQRQQjCEUBQv/hSwJHAhVLBklOBBJESwFQFU8CgQILEkQiRQcVRQciRQVLBEsHDEEAGksCSwUjWCJTQQAGSwUjCEUGSwQjCEUFQv/eSwUWKUxQsCNDKEcCNhoBF0koTCMII0lLAgxBABBHAhZLBExQRQQjCEUBQv/pSwIVJApJRQhLBBJEIkUGIkUFSwRLBwxBABxLAksFJAskWCipQQAGSwUjCEUGSwQjCEUFQv/cJwRLA1BJVwIAFSQKFlcGAlwAKUxQsCNDNhoBVwIASSJMFSQKIklLAgxBABZLA0sBSU4CJAtbSwQIRQQjCEUBQv/jSwIWKUxQsCNDMQAxBxIrIk8CVDEAMQcTKyJPAlRQRwIVJwRLAk8CJIj8eklOAkkiWUlOA0mBAhJESwEVgQMSRElESwElUysiTwJUIlMxADEHEhJEIw1EgRFTKyJPAlQiUzEAMQcTEkQiSUsDDEEAGkcCJQhLBUxTKyJPAlRLA0xQRQMjCEUBQv/fSwFJFYEEEkRJVwABIlMxADEHEhJESVcBASJTMQAxBxMSRElXAgEiUzEAMQcSEkRXAwEiUzEAMQcTEkRLBEkVJwROAiSI+9QpTFCwI0MiKmVEIwgqSwFnMRsxAIgACiIqZUQWTwNOBIkiKmVESSMIFksBTwILFlCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}