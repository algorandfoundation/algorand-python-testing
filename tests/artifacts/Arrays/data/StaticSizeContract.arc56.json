{
    "name": "StaticSizeContract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "x1"
                },
                {
                    "type": "uint64",
                    "name": "y1"
                },
                {
                    "type": "uint64",
                    "name": "x2"
                },
                {
                    "type": "uint64",
                    "name": "y2"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_arc4_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_conversion",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arc4_arr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_bool",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        44
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        112
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1192,
                        1209,
                        1219
                    ],
                    "errorMessage": "check self.count exists"
                },
                {
                    "pc": [
                        1037
                    ],
                    "errorMessage": "expected 3 bytes"
                },
                {
                    "pc": [
                        754,
                        765,
                        865,
                        1030,
                        1119
                    ],
                    "errorMessage": "expected correct length"
                },
                {
                    "pc": [
                        1057,
                        1132
                    ],
                    "errorMessage": "expected correct value at 0"
                },
                {
                    "pc": [
                        1077,
                        1145
                    ],
                    "errorMessage": "expected correct value at 1"
                },
                {
                    "pc": [
                        1158
                    ],
                    "errorMessage": "expected correct value at 2"
                },
                {
                    "pc": [
                        1170
                    ],
                    "errorMessage": "expected correct value at 3"
                },
                {
                    "pc": [
                        405,
                        480,
                        519,
                        639,
                        667,
                        788,
                        887,
                        1039,
                        1060,
                        1121,
                        1134,
                        1147,
                        1159
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        655,
                        1022
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        733,
                        757,
                        844,
                        912,
                        1003,
                        1102
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        285,
                        344,
                        379
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAFAAEIEJABJgUABBUffHUFY291bnQBAAIAADEYQAADKiJnMRtBAEAxGRREMRhEggcEKNfBuAT6nLlzBGA5okAE+P1opwQfAo2xBAlrOlkEjW46JTYaAI4HAIMB+wI+AlMCygM8A28AMRkUMRgUEEQjQ4oEAShHAov8IllHAov+CEkWVwYAi/xMXABOAkyBBwgkCklPAoEHCCQKSU4CDEEADIsGiwUJr4sETFCMBCKMAIsDJQhJjAKL/giMAYsCiwEMQQAgi/2LAElOAlOLBIsCSU4DTwJUjAQjCIwCi/8IjABC/9iLBIwAiSJJKEcFNhoBNhoCFzYaAzYaBBcqImeIA6GIA56IA5tPDhZPDhZQTw1QTwxQSwsVgUAORIFAr08MSwGrTwJMUIAQAAAAAAAAAAAAAAAAAAAAAExQTw4WTw9MUE8MFk8MFlBPC1BPClBLCRWBQA5ETwlLBKtQUFBPBxZPCExQTwcWTwcWUE8GUE8FUEsEFYFADkRPBE8Eq1BQUCJJgQMMQQA5SklOAiEECyEEWFcQgEkkW0sCIwhMSwESRExXMBBJVwAITwOBAggWqERXCAhLAUsCCxaoREUBQv/ASwFJFSEECklFChZXBgJLAVCAAWG8SIABYUy/VwCQSUULSVcACEUKJFtFBiJFBSNFA0sCSwgMQQBcSwFLAyEECyEEWEcCVwAITCRbRQZLCqRBADZLCiJbTCJbCUUHSwNLBgxBABxLBUsECUsHSQtMSQsIkksFCEUFSwIjCEUDQv+wSwNLBglC/+EiW0sKIlsJRQdC/8hLBBYpTFCwI0M2GgFJVwAQTFcQEExLAVBJFSUKSSMJJQtLAkwlWElPBBJETBZXBgJPAlBJIlkjCUsBVwIATCULJVhPAhJEKUxQsCNDNhoBSUhJFSUKFlcGAkxQKUxQsCNDKEcCNhoBF0koTCMII0lLAgxBABhHAoECGBRLBEwrIk8CVFBFBCMIRQFC/+FLAkcCFUsGSU4EEkRLAVAVTwKBAgsSRCJFBxVFByJFBUsESwcMQQAaSwJLBSNYIlNBAAZLBSMIRQZLBCMIRQVC/95LBRYpTFCwI0MoRwI2GgEXSShMIwgjSUsCDEEAEEcCFksETFBFBCMIRQFC/+lLAhUkCklFCEsEEkQiRQYiRQVLBEsHDEEAHEsCSwUkCyRYKKlBAAZLBSMIRQZLBCMIRQVC/9wnBEsDUElXAgAVJAoWVwYCXAApTFCwI0M2GgFXAgBJIkwVJAoiSUsCDEEAFksDSwFJTgIkC1tLBAhFBCMIRQFC/+NLAhYpTFCwI0MxADEHEisiTwJUMQAxBxMrIk8CVFBHAhUnBEsCTwIkiPx6SU4CSSJZSU4DSYECEkRLARWBAxJESURLASVTKyJPAlQiUzEAMQcSEkQjDUSBEVMrIk8CVCJTMQAxBxMSRCJJSwMMQQAaRwIlCEsFTFMrIk8CVEsDTFBFAyMIRQFC/99LAUkVgQQSRElXAAEiUzEAMQcSEkRJVwEBIlMxADEHExJESVcCASJTMQAxBxISRFcDASJTMQAxBxMSREsESRUnBE4CJIj71ClMULAjQyIqZUQjCCpLAWcxGzEAiAAKIiplRBZPA04EiSIqZURJIwgWSwFPAgsWUIk=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}