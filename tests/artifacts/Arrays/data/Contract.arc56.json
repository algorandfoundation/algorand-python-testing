{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_multiple_append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "overhead",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_too_long",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_copy_and_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_evaluation_order",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_assignment_maximum_cursage",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_allocations",
            "args": [
                {
                    "type": "uint64",
                    "name": "num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iteration",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_quicksort",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_unobserved_write",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        99
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        204
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        882
                    ],
                    "errorMessage": "array is expected length"
                },
                {
                    "pc": [
                        1301,
                        1380,
                        1594
                    ],
                    "errorMessage": "array is not sorted"
                },
                {
                    "pc": [
                        960,
                        990,
                        998,
                        1005,
                        1010
                    ],
                    "errorMessage": "expected 4"
                },
                {
                    "pc": [
                        938
                    ],
                    "errorMessage": "expected 5"
                },
                {
                    "pc": [
                        1548
                    ],
                    "errorMessage": "expected array of length 32"
                },
                {
                    "pc": [
                        1272
                    ],
                    "errorMessage": "expected array of length 5"
                },
                {
                    "pc": [
                        1343
                    ],
                    "errorMessage": "incorrect array value"
                },
                {
                    "pc": [
                        341,
                        350,
                        353,
                        356,
                        740,
                        1106,
                        1123,
                        1179,
                        1629,
                        1648
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1464
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        443,
                        492,
                        516,
                        641,
                        703,
                        728,
                        732,
                        802,
                        829,
                        833,
                        837,
                        863,
                        886,
                        903,
                        918,
                        961,
                        1037,
                        1252,
                        1416,
                        1434,
                        1448,
                        1528
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1671
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 3,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}