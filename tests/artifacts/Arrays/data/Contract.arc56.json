{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_multiple_append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "overhead",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_too_long",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_copy_and_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_evaluation_order",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_assignment_maximum_cursage",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_allocations",
            "args": [
                {
                    "type": "uint64",
                    "name": "num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iteration",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_quicksort",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_unobserved_write",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        99
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        204
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        880
                    ],
                    "errorMessage": "array is expected length"
                },
                {
                    "pc": [
                        1297,
                        1376,
                        1590
                    ],
                    "errorMessage": "array is not sorted"
                },
                {
                    "pc": [
                        958,
                        988,
                        996,
                        1003,
                        1008
                    ],
                    "errorMessage": "expected 4"
                },
                {
                    "pc": [
                        936
                    ],
                    "errorMessage": "expected 5"
                },
                {
                    "pc": [
                        1544
                    ],
                    "errorMessage": "expected array of length 32"
                },
                {
                    "pc": [
                        1268
                    ],
                    "errorMessage": "expected array of length 5"
                },
                {
                    "pc": [
                        1339
                    ],
                    "errorMessage": "incorrect array value"
                },
                {
                    "pc": [
                        339,
                        348,
                        351,
                        354,
                        738,
                        1102,
                        1119,
                        1175,
                        1625,
                        1644
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        441,
                        490,
                        514,
                        639,
                        701,
                        726,
                        730,
                        800,
                        827,
                        831,
                        835,
                        861,
                        884,
                        901,
                        916,
                        959,
                        1033,
                        1248,
                        1412,
                        1430,
                        1444,
                        1524
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1667
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}