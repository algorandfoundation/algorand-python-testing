#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 8 3 1 0
    bytecblock 0x000000000000000100000000000000020000000000000003
    // tests/artifacts/Arrays/immutable.py:479
    // class ImmutableArrayInitContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@11
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x8434ba2a 0x63aabba0 0xdbaf034e 0xa9d14554 // method "test_immutable_array_init()void", method "test_immutable_array_init_without_type_generic()void", method "test_reference_array_init()void", method "test_reference_array_init_without_type_generic()void"
    txna ApplicationArgs 0
    match test_immutable_array_init test_immutable_array_init_without_type_generic test_reference_array_init test_reference_array_init_without_type_generic
    err

main___algopy_default_create@11:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests.artifacts.Arrays.immutable.ImmutableArrayInitContract.test_immutable_array_init[routing]() -> void:
test_immutable_array_init:
    // tests/artifacts/Arrays/immutable.py:490
    // a3 = ImmutableArray[UInt64](ReferenceArray((UInt64(1), UInt64(2), UInt64(3))))
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    // tests/artifacts/Arrays/immutable.py:480
    // @arc4.abimethod()
    intc_2 // 1
    return


// tests.artifacts.Arrays.immutable.ImmutableArrayInitContract.test_immutable_array_init_without_type_generic[routing]() -> void:
test_immutable_array_init_without_type_generic:
    // tests/artifacts/Arrays/immutable.py:512
    // a3 = ImmutableArray(ReferenceArray((UInt64(1), UInt64(2), UInt64(3))))
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    // tests/artifacts/Arrays/immutable.py:502
    // @arc4.abimethod()
    intc_2 // 1
    return


// tests.artifacts.Arrays.immutable.ImmutableArrayInitContract.test_reference_array_init[routing]() -> void:
test_reference_array_init:
    // tests/artifacts/Arrays/immutable.py:526
    // a1 = ReferenceArray[UInt64]((UInt64(1), UInt64(2), UInt64(3)))
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    // tests/artifacts/Arrays/immutable.py:528
    // a2 = ReferenceArray[UInt64](FixedArray((UInt64(1), UInt64(2), UInt64(3))))
    dup
    pop
    dupn 2
    // tests/artifacts/Arrays/immutable.py:529
    // assert a1.length == a2.length
    len
    intc_0 // 8
    /
    intc_1 // 3
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:530
    // assert a1[0] == a2[0]
    dup
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:531
    // assert a1[1] == a2[1]
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:532
    // assert a1[2] == a2[2]
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:534
    // a3 = ReferenceArray[UInt64](ImmutableArray((UInt64(1), UInt64(2), UInt64(3))))
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    dupn 2
    // tests/artifacts/Arrays/immutable.py:536
    // assert a1[0] == a3[0]
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:537
    // assert a1[1] == a3[1]
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:538
    // assert a1[2] == a3[2]
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:526
    // a1 = ReferenceArray[UInt64]((UInt64(1), UInt64(2), UInt64(3)))
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    // tests/artifacts/Arrays/immutable.py:541
    // assert a1.length == a4.length
    dup
    len
    intc_0 // 8
    /
    intc_1 // 3
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:542
    // assert a1[0] == a4[0]
    dup
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:543
    // assert a1[1] == a4[1]
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:544
    // assert a1[2] == a4[2]
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    // tests/artifacts/Arrays/immutable.py:524
    // @arc4.abimethod()
    return


// tests.artifacts.Arrays.immutable.ImmutableArrayInitContract.test_reference_array_init_without_type_generic[routing]() -> void:
test_reference_array_init_without_type_generic:
    // tests/artifacts/Arrays/immutable.py:548
    // a1 = ReferenceArray((UInt64(1), UInt64(2), UInt64(3)))
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    // tests/artifacts/Arrays/immutable.py:550
    // a2 = ReferenceArray(FixedArray((UInt64(1), UInt64(2), UInt64(3))))
    dup
    pop
    dupn 2
    // tests/artifacts/Arrays/immutable.py:551
    // assert a1.length == a2.length
    len
    intc_0 // 8
    /
    intc_1 // 3
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:552
    // assert a1[0] == a2[0]
    dup
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:553
    // assert a1[1] == a2[1]
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:554
    // assert a1[2] == a2[2]
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:556
    // a3 = ReferenceArray(ImmutableArray((UInt64(1), UInt64(2), UInt64(3))))
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    dupn 2
    // tests/artifacts/Arrays/immutable.py:558
    // assert a1[0] == a3[0]
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:559
    // assert a1[1] == a3[1]
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:560
    // assert a1[2] == a3[2]
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:548
    // a1 = ReferenceArray((UInt64(1), UInt64(2), UInt64(3)))
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    // tests/artifacts/Arrays/immutable.py:563
    // assert a1.length == a4.length
    dup
    len
    intc_0 // 8
    /
    intc_1 // 3
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:564
    // assert a1[0] == a4[0]
    dup
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:565
    // assert a1[1] == a4[1]
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    // tests/artifacts/Arrays/immutable.py:566
    // assert a1[2] == a4[2]
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    // tests/artifacts/Arrays/immutable.py:546
    // @arc4.abimethod()
    return
