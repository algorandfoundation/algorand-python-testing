{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAGA;;AAAA;;;AAAA;AAAA;;;AAAA;;;;AAAA;;;AACK;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AACK;;;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAEe;;;AAA2B;AAA3B;AAAP;AACO;;;AAAA;;AAAA;AAAP;AACO;;;AAAA;;AAAA;AAAP;AACuC;;AAAhC;AAAA;;AAAA;;AAAA;AAAA;AAA0D;AAA1D;;AAAA;;AAAA;AAAP;AACwB;;AAA0B;AAA3C;;AAAA;;AAAA;AAAP;AACgC;;AAAzB;;;AAAA;;AAAA;AAAP;AACO;;;AAAA;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock 0xc0eb5c67"
    },
    "11": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "bz main_bare_routing@6",
      "stack_out": []
    },
    "16": {
      "op": "bytec_0 // method \"validate_g_args(uint64,string)void\""
    },
    "17": {
      "op": "txna ApplicationArgs 0"
    },
    "20": {
      "op": "match main_validate_g_args_route@3"
    },
    "24": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "26": {
      "op": "return"
    },
    "27": {
      "block": "main_validate_g_args_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "29": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "30": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "31": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "33": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "34": {
      "op": "txna ApplicationArgs 1"
    },
    "37": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "40": {
      "callsub": "tests.artifacts.GlobalStateValidator.contract.GlobalStateValidator.validate_g_args",
      "op": "callsub validate_g_args",
      "stack_out": []
    },
    "43": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "44": {
      "op": "return"
    },
    "45": {
      "block": "main_bare_routing@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "47": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "50": {
      "op": "txn ApplicationID"
    },
    "52": {
      "op": "!"
    },
    "53": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "54": {
      "op": "intc_0 // 1"
    },
    "55": {
      "op": "return"
    },
    "56": {
      "subroutine": "tests.artifacts.GlobalStateValidator.contract.GlobalStateValidator.validate_g_args",
      "params": {
        "arg1#0": "bytes",
        "arg2#0": "bytes"
      },
      "block": "validate_g_args",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "59": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "62": {
      "op": "bytec_0 // method \"validate_g_args(uint64,string)void\"",
      "defined_out": [
        "Method(validate_g_args(uint64,string)void)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Method(validate_g_args(uint64,string)void)"
      ]
    },
    "63": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "64": {
      "op": "assert",
      "stack_out": []
    },
    "65": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "68": {
      "op": "frame_dig -2",
      "defined_out": [
        "arg1#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "arg1#0 (copy)"
      ]
    },
    "70": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "71": {
      "op": "assert",
      "stack_out": []
    },
    "72": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "75": {
      "op": "frame_dig -1",
      "defined_out": [
        "arg2#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arg2#0 (copy)"
      ]
    },
    "77": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "78": {
      "op": "assert",
      "stack_out": []
    },
    "79": {
      "op": "txn GroupIndex"
    },
    "81": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "82": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "84": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "appl"
      ]
    },
    "86": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "87": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "88": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "1"
      ]
    },
    "89": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "91": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%6#0",
        "arg1#0 (copy)"
      ]
    },
    "93": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "94": {
      "op": "assert",
      "stack_out": []
    },
    "95": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "97": {
      "op": "intc_0 // 1",
      "stack_out": [
        "gtxn_idx%1#0",
        "1"
      ]
    },
    "98": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "100": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%8#0",
        "arg1#0 (copy)"
      ]
    },
    "102": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "103": {
      "op": "assert",
      "stack_out": []
    },
    "104": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "106": {
      "op": "gtxnsa ApplicationArgs 1",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "109": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%11#0",
        "arg1#0 (copy)"
      ]
    },
    "111": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "112": {
      "op": "assert",
      "stack_out": []
    },
    "113": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "116": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%13#0",
        "arg1#0 (copy)"
      ]
    },
    "118": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "119": {
      "op": "assert",
      "stack_out": []
    },
    "120": {
      "retsub": true,
      "op": "retsub"
    }
  }
}