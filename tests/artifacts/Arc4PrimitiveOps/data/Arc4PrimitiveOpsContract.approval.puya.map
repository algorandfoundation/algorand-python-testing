{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAKA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAsPK;;AAAA;AAAA;AAAA;;AAAA;AAtPL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAsPK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlPL;;;AAAA;;;AAkPK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9OL;;;AAAA;;;AA8OK;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA1OL;;;AA0OK;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtOL;;;AAAA;;;AAsOK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlOL;;;AAAA;;;AAkOK;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA7NL;;;AAAA;;;AA6NK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAzNL;;;AAAA;;;AAyNK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AApNL;;;AAAA;;;AAoNK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA/ML;;;AAAA;;;AA+MK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAzML;;;AAAA;;;AAyMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAnML;;;AAAA;;;AAmMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA7LL;;;AAAA;;;AA6LK;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAvLL;;;AAAA;;;AAuLK;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAjLL;;;AAiLK;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3KL;;;AA2KK;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAvKL;;;AAAA;;;AAuKK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAnKL;;;AAAA;;;AAmKK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA/JL;;;AAAA;;;AA+JK;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA3JL;;;AAAA;;;AA2JK;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAtJL;;;AAAA;;;AAsJK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAjJL;;;AAAA;;;AAiJK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3IL;;;AAAA;;;AAAA;;;AAAA;;;AA2IK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AArIL;;;AAAA;;;AAAA;;;AAAA;;;AAqIK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA/HL;;;AAAA;;;AAAA;;;AAAA;;;AA+HK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAzHL;;;AAAA;;;AAAA;;;AAAA;;;AAyHK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAnHL;;;AAAA;;;AAAA;;;AAAA;;;AAmHK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA7GL;;;AAAA;;;AAAA;;;AAAA;;;AA6GK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAvGL;;;AAAA;;;AAAA;;;AAAA;;;AAuGK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAjGL;;;AAAA;;;AAAA;;;AAAA;;;AAiGK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3FL;;;AAAA;;;AAAA;;;AAAA;;;AA2FK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AArFL;;;AAAA;;;AAAA;;;AAAA;;;AAqFK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA/EL;;;AAAA;;;AAAA;;;AAAA;;;AA+EK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAzEL;;;AAAA;;;AAAA;;;AAAA;;;AAyEK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAnEL;;;AAAA;;;AAAA;;;AAAA;;;AAmEK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA7DL;;;AAAA;;;AAAA;;;AAAA;;;AA6DK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAvDL;;;AAAA;;;AAAA;;;AAAA;;;AAuDK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAjDL;;;AAAA;;;AAAA;;;AAAA;;;AAiDK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA3CL;;;AAAA;;;AAAA;;;AAAA;;;AA2CK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AArCL;;;AAAA;;;AAAA;;;AAAA;;;AAqCK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA/BL;;;AAAA;;;AAAA;;;AAAA;;;AA+BK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAAA;;;AAAA;;;AAAA;;;AAyBK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAnBL;;;AAAA;;;AAAA;;;AAAA;;;AAmBK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAbL;;;AAAA;;;AAAA;;;AAAA;;;AAaK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAPL;;;AAAA;;;AAAA;;;AAAA;;;AAOK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AACK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA3B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA2B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA3B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA3B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA2B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA3B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAyB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAzB;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAzB;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA3B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA2B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA3B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAyB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAzB;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAzB;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA3B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA1B;AAAP;AAER;;;AAIe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA2B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAA3B;AAAP;AAER;;;AAGe;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAER;;;AAGe;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAUR;;;AAEe;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEe;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAP;AA0BR;;;AAIe;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAP;AAER;;;AAIe;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAP;AAER;;;AAE6B;;;;;;;;;AAAA;;AAAA;AAAZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACT;AAER;;;AAEiB;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACT;AAER;;;AAEe;;AAAA;;AAAA;AAAP;AAER;;;AAEiB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACT;AAMR;;;AAEe;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAP;AAUR;;;AAEe;;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAP;AAER;;;AAwBkmBA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 8 64 0"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x00"
    },
    "16": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "18": {
      "op": "bz main_bare_routing@51",
      "stack_out": []
    },
    "21": {
      "op": "pushbytess 0x96f14116 0xed666096 0x2ca0352b 0x85907d40 0x2cbec45b 0x07666fd9 0x370babd3 0x2b6b3ef0 0x339da97c 0x7898ed97 0x1f130cec 0xc748664e 0x7a460cb1 0xdcab1f01 0x97d9064d 0xce06c2a0 0xdcdbcee0 0x77a4b68d 0x4f540626 0x095aed41 0xe3b7e918 0x55337008 0x9bb1cd66 0x81484d9d 0x9a03df10 0xd3f0e44b 0x982db233 0xaffbdf0e 0x288af76e 0x8bd84a04 0x0f1574fe 0xb2cb13be 0xd059eea7 0x4cc4c157 0x3d17ac6e 0xf7f3d5fc 0xf8c8f8d5 0x43f7162a 0x42e09075 0xd956f575 0x6c0160df 0xa890150b 0x0b2f4c3f 0x9db9d327 0xe4d950a1 0xb605e80c // method \"verify_uintn_uintn_eq(byte[],byte[])bool\", method \"verify_biguintn_uintn_eq(byte[],byte[])bool\", method \"verify_uintn_biguintn_eq(byte[],byte[])bool\", method \"verify_biguintn_biguintn_eq(byte[],byte[])bool\", method \"verify_uintn_uintn_ne(byte[],byte[])bool\", method \"verify_biguintn_uintn_ne(byte[],byte[])bool\", method \"verify_uintn_biguintn_ne(byte[],byte[])bool\", method \"verify_biguintn_biguintn_ne(byte[],byte[])bool\", method \"verify_uintn_uintn_lt(byte[],byte[])bool\", method \"verify_biguintn_uintn_lt(byte[],byte[])bool\", method \"verify_uintn_biguintn_lt(byte[],byte[])bool\", method \"verify_biguintn_biguintn_lt(byte[],byte[])bool\", method \"verify_uintn_uintn_le(byte[],byte[])bool\", method \"verify_biguintn_uintn_le(byte[],byte[])bool\", method \"verify_uintn_biguintn_le(byte[],byte[])bool\", method \"verify_biguintn_biguintn_le(byte[],byte[])bool\", method \"verify_uintn_uintn_gt(byte[],byte[])bool\", method \"verify_biguintn_uintn_gt(byte[],byte[])bool\", method \"verify_uintn_biguintn_gt(byte[],byte[])bool\", method \"verify_biguintn_biguintn_gt(byte[],byte[])bool\", method \"verify_uintn_uintn_ge(byte[],byte[])bool\", method \"verify_biguintn_uintn_ge(byte[],byte[])bool\", method \"verify_uintn_biguintn_ge(byte[],byte[])bool\", method \"verify_biguintn_biguintn_ge(byte[],byte[])bool\", method \"verify_uintn_init(byte[])uint32\", method \"verify_biguintn_init(byte[])uint256\", method \"verify_uintn_from_bytes(byte[])uint32\", method \"verify_biguintn_from_bytes(byte[])uint256\", method \"verify_uintn_from_log(byte[])uint32\", method \"verify_biguintn_from_log(byte[])uint256\", method \"verify_ufixednxm_bytes(ufixed32x8)byte[]\", method \"verify_bigufixednxm_bytes(ufixed256x16)byte[]\", method \"verify_ufixednxm_from_bytes(byte[])ufixed32x8\", method \"verify_bigufixednxm_from_bytes(byte[])ufixed256x16\", method \"verify_ufixednxm_from_log(byte[])ufixed32x8\", method \"verify_bigufixednxm_from_log(byte[])ufixed256x16\", method \"verify_string_init(string)string\", method \"verify_string_add(string,string)string\", method \"verify_string_eq(string,string)bool\", method \"verify_string_bytes(string)byte[]\", method \"verify_string_from_bytes(byte[])string\", method \"verify_string_from_log(byte[])string\", method \"verify_bool_bytes(bool)byte[]\", method \"verify_bool_from_bytes(byte[])bool\", method \"verify_bool_from_log(byte[])bool\", method \"verify_emit(string,uint512,uint64,byte[],uint64,bool,byte[],string,uint64,uint256,ufixed32x8,ufixed256x16,bool,byte[],byte[],byte[])void\""
    },
    "253": {
      "op": "txna ApplicationArgs 0"
    },
    "256": {
      "op": "match main_verify_uintn_uintn_eq_route@3 main_verify_biguintn_uintn_eq_route@4 main_verify_uintn_biguintn_eq_route@5 main_verify_biguintn_biguintn_eq_route@6 main_verify_uintn_uintn_ne_route@7 main_verify_biguintn_uintn_ne_route@8 main_verify_uintn_biguintn_ne_route@9 main_verify_biguintn_biguintn_ne_route@10 main_verify_uintn_uintn_lt_route@11 main_verify_biguintn_uintn_lt_route@12 main_verify_uintn_biguintn_lt_route@13 main_verify_biguintn_biguintn_lt_route@14 main_verify_uintn_uintn_le_route@15 main_verify_biguintn_uintn_le_route@16 main_verify_uintn_biguintn_le_route@17 main_verify_biguintn_biguintn_le_route@18 main_verify_uintn_uintn_gt_route@19 main_verify_biguintn_uintn_gt_route@20 main_verify_uintn_biguintn_gt_route@21 main_verify_biguintn_biguintn_gt_route@22 main_verify_uintn_uintn_ge_route@23 main_verify_biguintn_uintn_ge_route@24 main_verify_uintn_biguintn_ge_route@25 main_verify_biguintn_biguintn_ge_route@26 main_verify_uintn_init_route@27 main_verify_biguintn_init_route@28 main_verify_uintn_from_bytes_route@29 main_verify_biguintn_from_bytes_route@30 main_verify_uintn_from_log_route@31 main_verify_biguintn_from_log_route@32 main_verify_ufixednxm_bytes_route@33 main_verify_bigufixednxm_bytes_route@34 main_verify_ufixednxm_from_bytes_route@35 main_verify_bigufixednxm_from_bytes_route@36 main_verify_ufixednxm_from_log_route@37 main_verify_bigufixednxm_from_log_route@38 main_verify_string_init_route@39 main_verify_string_add_route@40 main_verify_string_eq_route@41 main_verify_string_bytes_route@42 main_verify_string_from_bytes_route@43 main_verify_string_from_log_route@44 main_verify_bool_bytes_route@45 main_verify_bool_from_bytes_route@46 main_verify_bool_from_log_route@47 main_verify_emit_route@48"
    },
    "350": {
      "block": "main_after_if_else@55",
      "stack_in": [],
      "op": "intc_3 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "351": {
      "op": "return"
    },
    "352": {
      "block": "main_verify_emit_route@48",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%379#0"
      ],
      "stack_out": [
        "tmp%379#0"
      ]
    },
    "354": {
      "op": "!",
      "defined_out": [
        "tmp%380#0"
      ],
      "stack_out": [
        "tmp%380#0"
      ]
    },
    "355": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "356": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%381#0"
      ],
      "stack_out": [
        "tmp%381#0"
      ]
    },
    "358": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "359": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%383#0"
      ],
      "stack_out": [
        "tmp%383#0"
      ]
    },
    "362": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0"
      ]
    },
    "365": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0"
      ]
    },
    "368": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0"
      ]
    },
    "371": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0"
      ]
    },
    "374": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0"
      ]
    },
    "377": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0"
      ]
    },
    "380": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0"
      ]
    },
    "383": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0"
      ]
    },
    "386": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0"
      ]
    },
    "389": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0"
      ]
    },
    "392": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0"
      ]
    },
    "395": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0"
      ]
    },
    "398": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%396#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%396#0"
      ]
    },
    "401": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0"
      ]
    },
    "404": {
      "op": "txna ApplicationArgs 15"
    },
    "407": {
      "op": "dup"
    },
    "408": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%398#0",
        "tmp%398#0 (copy)"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%398#0",
        "tmp%398#0 (copy)",
        "0"
      ]
    },
    "409": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%398#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%398#0",
        "item_start_offset%0#0"
      ]
    },
    "410": {
      "op": "dig 1",
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%398#0",
        "item_start_offset%0#0",
        "tmp%398#0 (copy)"
      ]
    },
    "412": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%398#0",
        "tmp%398#0 (copy)"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%398#0",
        "item_start_offset%0#0",
        "tmp%398#0 (copy)",
        "2"
      ]
    },
    "414": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%398#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%398#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "415": {
      "op": "substring3",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%399#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%399#0"
      ]
    },
    "416": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0"
      ]
    },
    "419": {
      "op": "txna ApplicationArgs 15"
    },
    "422": {
      "op": "dup"
    },
    "423": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%401#0",
        "tmp%401#0 (copy)"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%401#0",
        "tmp%401#0 (copy)",
        "2"
      ]
    },
    "425": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%1#0",
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%401#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%401#0",
        "item_start_offset%1#0"
      ]
    },
    "426": {
      "op": "dig 1",
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%401#0",
        "item_start_offset%1#0",
        "tmp%401#0 (copy)"
      ]
    },
    "428": {
      "op": "len",
      "defined_out": [
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%401#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%401#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "429": {
      "op": "substring3",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%402#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%402#0"
      ]
    },
    "430": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%403#0"
      ],
      "stack_out": [
        "tmp%383#0",
        "tmp%384#0",
        "tmp%385#0",
        "tmp%386#0",
        "tmp%387#0",
        "tmp%388#0",
        "tmp%389#0",
        "tmp%390#0",
        "tmp%391#0",
        "tmp%392#0",
        "tmp%393#0",
        "tmp%394#0",
        "tmp%395#0",
        "tmp%397#0",
        "tmp%400#0",
        "tmp%403#0"
      ]
    },
    "433": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_emit",
      "op": "callsub verify_emit",
      "stack_out": []
    },
    "436": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "437": {
      "op": "return"
    },
    "438": {
      "block": "main_verify_bool_from_log_route@47",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%371#0"
      ],
      "stack_out": [
        "tmp%371#0"
      ]
    },
    "440": {
      "op": "!",
      "defined_out": [
        "tmp%372#0"
      ],
      "stack_out": [
        "tmp%372#0"
      ]
    },
    "441": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "442": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%373#0"
      ],
      "stack_out": [
        "tmp%373#0"
      ]
    },
    "444": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "445": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%375#0"
      ],
      "stack_out": [
        "tmp%375#0"
      ]
    },
    "448": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%376#0"
      ],
      "stack_out": [
        "tmp%376#0"
      ]
    },
    "451": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_bool_from_log",
      "op": "callsub verify_bool_from_log",
      "defined_out": [
        "tmp%377#0"
      ],
      "stack_out": [
        "tmp%377#0"
      ]
    },
    "454": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%377#0"
      ],
      "stack_out": [
        "tmp%377#0",
        "0x151f7c75"
      ]
    },
    "455": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%377#0"
      ]
    },
    "456": {
      "op": "concat",
      "defined_out": [
        "tmp%378#0"
      ],
      "stack_out": [
        "tmp%378#0"
      ]
    },
    "457": {
      "op": "log",
      "stack_out": []
    },
    "458": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "459": {
      "op": "return"
    },
    "460": {
      "block": "main_verify_bool_from_bytes_route@46",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%363#0"
      ],
      "stack_out": [
        "tmp%363#0"
      ]
    },
    "462": {
      "op": "!",
      "defined_out": [
        "tmp%364#0"
      ],
      "stack_out": [
        "tmp%364#0"
      ]
    },
    "463": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "464": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%365#0"
      ],
      "stack_out": [
        "tmp%365#0"
      ]
    },
    "466": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "467": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%367#0"
      ],
      "stack_out": [
        "tmp%367#0"
      ]
    },
    "470": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "473": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "0x151f7c75"
      ]
    },
    "474": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "a#0"
      ]
    },
    "475": {
      "op": "concat",
      "defined_out": [
        "tmp%370#0"
      ],
      "stack_out": [
        "tmp%370#0"
      ]
    },
    "476": {
      "op": "log",
      "stack_out": []
    },
    "477": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "478": {
      "op": "return"
    },
    "479": {
      "block": "main_verify_bool_bytes_route@45",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%357#0"
      ],
      "stack_out": [
        "tmp%357#0"
      ]
    },
    "481": {
      "op": "!",
      "defined_out": [
        "tmp%358#0"
      ],
      "stack_out": [
        "tmp%358#0"
      ]
    },
    "482": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "483": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%359#0"
      ],
      "stack_out": [
        "tmp%359#0"
      ]
    },
    "485": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "486": {
      "op": "txna ApplicationArgs 1"
    },
    "489": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "490": {
      "op": "len",
      "defined_out": [
        "a#0",
        "length%3#0"
      ],
      "stack_out": [
        "a#0",
        "length%3#0"
      ]
    },
    "491": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "as_bytes%3#0"
      ],
      "stack_out": [
        "a#0",
        "as_bytes%3#0"
      ]
    },
    "492": {
      "op": "extract 6 2",
      "defined_out": [
        "a#0",
        "length_uint16%3#0"
      ],
      "stack_out": [
        "a#0",
        "length_uint16%3#0"
      ]
    },
    "495": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "a#0"
      ]
    },
    "496": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "497": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "498": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "499": {
      "op": "concat",
      "defined_out": [
        "tmp%362#0"
      ],
      "stack_out": [
        "tmp%362#0"
      ]
    },
    "500": {
      "op": "log",
      "stack_out": []
    },
    "501": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "502": {
      "op": "return"
    },
    "503": {
      "block": "main_verify_string_from_log_route@44",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%349#0"
      ],
      "stack_out": [
        "tmp%349#0"
      ]
    },
    "505": {
      "op": "!",
      "defined_out": [
        "tmp%350#0"
      ],
      "stack_out": [
        "tmp%350#0"
      ]
    },
    "506": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "507": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%351#0"
      ],
      "stack_out": [
        "tmp%351#0"
      ]
    },
    "509": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "510": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%353#0"
      ],
      "stack_out": [
        "tmp%353#0"
      ]
    },
    "513": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%354#0"
      ],
      "stack_out": [
        "tmp%354#0"
      ]
    },
    "516": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_string_from_log",
      "op": "callsub verify_string_from_log",
      "defined_out": [
        "tmp%355#0"
      ],
      "stack_out": [
        "tmp%355#0"
      ]
    },
    "519": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%355#0"
      ],
      "stack_out": [
        "tmp%355#0",
        "0x151f7c75"
      ]
    },
    "520": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%355#0"
      ]
    },
    "521": {
      "op": "concat",
      "defined_out": [
        "tmp%356#0"
      ],
      "stack_out": [
        "tmp%356#0"
      ]
    },
    "522": {
      "op": "log",
      "stack_out": []
    },
    "523": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "524": {
      "op": "return"
    },
    "525": {
      "block": "main_verify_string_from_bytes_route@43",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%341#0"
      ],
      "stack_out": [
        "tmp%341#0"
      ]
    },
    "527": {
      "op": "!",
      "defined_out": [
        "tmp%342#0"
      ],
      "stack_out": [
        "tmp%342#0"
      ]
    },
    "528": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "529": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%343#0"
      ],
      "stack_out": [
        "tmp%343#0"
      ]
    },
    "531": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "532": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%345#0"
      ],
      "stack_out": [
        "tmp%345#0"
      ]
    },
    "535": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "538": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "0x151f7c75"
      ]
    },
    "539": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "a#0"
      ]
    },
    "540": {
      "op": "concat",
      "defined_out": [
        "tmp%348#0"
      ],
      "stack_out": [
        "tmp%348#0"
      ]
    },
    "541": {
      "op": "log",
      "stack_out": []
    },
    "542": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "543": {
      "op": "return"
    },
    "544": {
      "block": "main_verify_string_bytes_route@42",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%334#0"
      ],
      "stack_out": [
        "tmp%334#0"
      ]
    },
    "546": {
      "op": "!",
      "defined_out": [
        "tmp%335#0"
      ],
      "stack_out": [
        "tmp%335#0"
      ]
    },
    "547": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "548": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%336#0"
      ],
      "stack_out": [
        "tmp%336#0"
      ]
    },
    "550": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "551": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%338#0"
      ],
      "stack_out": [
        "tmp%338#0"
      ]
    },
    "554": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%339#0"
      ],
      "stack_out": [
        "tmp%339#0"
      ]
    },
    "557": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_string_bytes",
      "op": "callsub verify_string_bytes",
      "defined_out": [
        "to_encode%27#0"
      ],
      "stack_out": [
        "to_encode%27#0"
      ]
    },
    "560": {
      "op": "dup",
      "defined_out": [
        "to_encode%27#0",
        "to_encode%27#0 (copy)"
      ],
      "stack_out": [
        "to_encode%27#0",
        "to_encode%27#0 (copy)"
      ]
    },
    "561": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%27#0"
      ],
      "stack_out": [
        "to_encode%27#0",
        "length%2#0"
      ]
    },
    "562": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%27#0"
      ],
      "stack_out": [
        "to_encode%27#0",
        "as_bytes%2#0"
      ]
    },
    "563": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%27#0"
      ],
      "stack_out": [
        "to_encode%27#0",
        "length_uint16%2#0"
      ]
    },
    "566": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%27#0"
      ]
    },
    "567": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "568": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "569": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "570": {
      "op": "concat",
      "defined_out": [
        "tmp%340#0"
      ],
      "stack_out": [
        "tmp%340#0"
      ]
    },
    "571": {
      "op": "log",
      "stack_out": []
    },
    "572": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "573": {
      "op": "return"
    },
    "574": {
      "block": "main_verify_string_eq_route@41",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%327#0"
      ],
      "stack_out": [
        "tmp%327#0"
      ]
    },
    "576": {
      "op": "!",
      "defined_out": [
        "tmp%328#0"
      ],
      "stack_out": [
        "tmp%328#0"
      ]
    },
    "577": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "578": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%329#0"
      ],
      "stack_out": [
        "tmp%329#0"
      ]
    },
    "580": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "581": {
      "op": "txna ApplicationArgs 1"
    },
    "584": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%331#0",
        "tmp%332#0"
      ],
      "stack_out": [
        "tmp%331#0",
        "tmp%332#0"
      ]
    },
    "587": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_string_eq",
      "op": "callsub verify_string_eq",
      "defined_out": [
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0"
      ]
    },
    "590": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0",
        "0x00"
      ]
    },
    "591": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%26#0"
      ],
      "stack_out": [
        "to_encode%26#0",
        "0x00",
        "0"
      ]
    },
    "592": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%26#0"
      ]
    },
    "594": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%24#0"
      ],
      "stack_out": [
        "encoded_bool%24#0"
      ]
    },
    "595": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%24#0"
      ],
      "stack_out": [
        "encoded_bool%24#0",
        "0x151f7c75"
      ]
    },
    "596": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%24#0"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "tmp%333#0"
      ],
      "stack_out": [
        "tmp%333#0"
      ]
    },
    "598": {
      "op": "log",
      "stack_out": []
    },
    "599": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "600": {
      "op": "return"
    },
    "601": {
      "block": "main_verify_string_add_route@40",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%319#0"
      ],
      "stack_out": [
        "tmp%319#0"
      ]
    },
    "603": {
      "op": "!",
      "defined_out": [
        "tmp%320#0"
      ],
      "stack_out": [
        "tmp%320#0"
      ]
    },
    "604": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "605": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%321#0"
      ],
      "stack_out": [
        "tmp%321#0"
      ]
    },
    "607": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "608": {
      "op": "txna ApplicationArgs 1"
    },
    "611": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%323#0",
        "tmp%324#0"
      ],
      "stack_out": [
        "tmp%323#0",
        "tmp%324#0"
      ]
    },
    "614": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_string_add",
      "op": "callsub verify_string_add",
      "defined_out": [
        "tmp%325#0"
      ],
      "stack_out": [
        "tmp%325#0"
      ]
    },
    "617": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%325#0"
      ],
      "stack_out": [
        "tmp%325#0",
        "0x151f7c75"
      ]
    },
    "618": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%325#0"
      ]
    },
    "619": {
      "op": "concat",
      "defined_out": [
        "tmp%326#0"
      ],
      "stack_out": [
        "tmp%326#0"
      ]
    },
    "620": {
      "op": "log",
      "stack_out": []
    },
    "621": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "622": {
      "op": "return"
    },
    "623": {
      "block": "main_verify_string_init_route@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%311#0"
      ],
      "stack_out": [
        "tmp%311#0"
      ]
    },
    "625": {
      "op": "!",
      "defined_out": [
        "tmp%312#0"
      ],
      "stack_out": [
        "tmp%312#0"
      ]
    },
    "626": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "627": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%313#0"
      ],
      "stack_out": [
        "tmp%313#0"
      ]
    },
    "629": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "630": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%315#0"
      ],
      "stack_out": [
        "tmp%315#0"
      ]
    },
    "633": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%316#0"
      ],
      "stack_out": [
        "tmp%316#0"
      ]
    },
    "636": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_string_init",
      "op": "callsub verify_string_init",
      "defined_out": [
        "tmp%317#0"
      ],
      "stack_out": [
        "tmp%317#0"
      ]
    },
    "639": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%317#0"
      ],
      "stack_out": [
        "tmp%317#0",
        "0x151f7c75"
      ]
    },
    "640": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%317#0"
      ]
    },
    "641": {
      "op": "concat",
      "defined_out": [
        "tmp%318#0"
      ],
      "stack_out": [
        "tmp%318#0"
      ]
    },
    "642": {
      "op": "log",
      "stack_out": []
    },
    "643": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "644": {
      "op": "return"
    },
    "645": {
      "block": "main_verify_bigufixednxm_from_log_route@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%303#0"
      ],
      "stack_out": [
        "tmp%303#0"
      ]
    },
    "647": {
      "op": "!",
      "defined_out": [
        "tmp%304#0"
      ],
      "stack_out": [
        "tmp%304#0"
      ]
    },
    "648": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "649": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%305#0"
      ],
      "stack_out": [
        "tmp%305#0"
      ]
    },
    "651": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "652": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%307#0"
      ],
      "stack_out": [
        "tmp%307#0"
      ]
    },
    "655": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%308#0"
      ],
      "stack_out": [
        "tmp%308#0"
      ]
    },
    "658": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_bigufixednxm_from_log",
      "op": "callsub verify_bigufixednxm_from_log",
      "defined_out": [
        "tmp%309#0"
      ],
      "stack_out": [
        "tmp%309#0"
      ]
    },
    "661": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%309#0"
      ],
      "stack_out": [
        "tmp%309#0",
        "0x151f7c75"
      ]
    },
    "662": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%309#0"
      ]
    },
    "663": {
      "op": "concat",
      "defined_out": [
        "tmp%310#0"
      ],
      "stack_out": [
        "tmp%310#0"
      ]
    },
    "664": {
      "op": "log",
      "stack_out": []
    },
    "665": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "666": {
      "op": "return"
    },
    "667": {
      "block": "main_verify_ufixednxm_from_log_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%295#0"
      ],
      "stack_out": [
        "tmp%295#0"
      ]
    },
    "669": {
      "op": "!",
      "defined_out": [
        "tmp%296#0"
      ],
      "stack_out": [
        "tmp%296#0"
      ]
    },
    "670": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "671": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%297#0"
      ],
      "stack_out": [
        "tmp%297#0"
      ]
    },
    "673": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "674": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%299#0"
      ],
      "stack_out": [
        "tmp%299#0"
      ]
    },
    "677": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%300#0"
      ],
      "stack_out": [
        "tmp%300#0"
      ]
    },
    "680": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_ufixednxm_from_log",
      "op": "callsub verify_ufixednxm_from_log",
      "defined_out": [
        "tmp%301#0"
      ],
      "stack_out": [
        "tmp%301#0"
      ]
    },
    "683": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%301#0"
      ],
      "stack_out": [
        "tmp%301#0",
        "0x151f7c75"
      ]
    },
    "684": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%301#0"
      ]
    },
    "685": {
      "op": "concat",
      "defined_out": [
        "tmp%302#0"
      ],
      "stack_out": [
        "tmp%302#0"
      ]
    },
    "686": {
      "op": "log",
      "stack_out": []
    },
    "687": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "688": {
      "op": "return"
    },
    "689": {
      "block": "main_verify_bigufixednxm_from_bytes_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%287#0"
      ],
      "stack_out": [
        "tmp%287#0"
      ]
    },
    "691": {
      "op": "!",
      "defined_out": [
        "tmp%288#0"
      ],
      "stack_out": [
        "tmp%288#0"
      ]
    },
    "692": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "693": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%289#0"
      ],
      "stack_out": [
        "tmp%289#0"
      ]
    },
    "695": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "696": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%291#0"
      ],
      "stack_out": [
        "tmp%291#0"
      ]
    },
    "699": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "702": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "0x151f7c75"
      ]
    },
    "703": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "a#0"
      ]
    },
    "704": {
      "op": "concat",
      "defined_out": [
        "tmp%294#0"
      ],
      "stack_out": [
        "tmp%294#0"
      ]
    },
    "705": {
      "op": "log",
      "stack_out": []
    },
    "706": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "707": {
      "op": "return"
    },
    "708": {
      "block": "main_verify_ufixednxm_from_bytes_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%279#0"
      ],
      "stack_out": [
        "tmp%279#0"
      ]
    },
    "710": {
      "op": "!",
      "defined_out": [
        "tmp%280#0"
      ],
      "stack_out": [
        "tmp%280#0"
      ]
    },
    "711": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "712": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%281#0"
      ],
      "stack_out": [
        "tmp%281#0"
      ]
    },
    "714": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "715": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%283#0"
      ],
      "stack_out": [
        "tmp%283#0"
      ]
    },
    "718": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "721": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "0x151f7c75"
      ]
    },
    "722": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "a#0"
      ]
    },
    "723": {
      "op": "concat",
      "defined_out": [
        "tmp%286#0"
      ],
      "stack_out": [
        "tmp%286#0"
      ]
    },
    "724": {
      "op": "log",
      "stack_out": []
    },
    "725": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "726": {
      "op": "return"
    },
    "727": {
      "block": "main_verify_bigufixednxm_bytes_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%273#0"
      ],
      "stack_out": [
        "tmp%273#0"
      ]
    },
    "729": {
      "op": "!",
      "defined_out": [
        "tmp%274#0"
      ],
      "stack_out": [
        "tmp%274#0"
      ]
    },
    "730": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "731": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%275#0"
      ],
      "stack_out": [
        "tmp%275#0"
      ]
    },
    "733": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "734": {
      "op": "txna ApplicationArgs 1"
    },
    "737": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "738": {
      "op": "len",
      "defined_out": [
        "a#0",
        "length%1#0"
      ],
      "stack_out": [
        "a#0",
        "length%1#0"
      ]
    },
    "739": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "as_bytes%1#0"
      ],
      "stack_out": [
        "a#0",
        "as_bytes%1#0"
      ]
    },
    "740": {
      "op": "extract 6 2",
      "defined_out": [
        "a#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "a#0",
        "length_uint16%1#0"
      ]
    },
    "743": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "a#0"
      ]
    },
    "744": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "745": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "746": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "747": {
      "op": "concat",
      "defined_out": [
        "tmp%278#0"
      ],
      "stack_out": [
        "tmp%278#0"
      ]
    },
    "748": {
      "op": "log",
      "stack_out": []
    },
    "749": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "750": {
      "op": "return"
    },
    "751": {
      "block": "main_verify_ufixednxm_bytes_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%267#0"
      ],
      "stack_out": [
        "tmp%267#0"
      ]
    },
    "753": {
      "op": "!",
      "defined_out": [
        "tmp%268#0"
      ],
      "stack_out": [
        "tmp%268#0"
      ]
    },
    "754": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "755": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%269#0"
      ],
      "stack_out": [
        "tmp%269#0"
      ]
    },
    "757": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "758": {
      "op": "txna ApplicationArgs 1"
    },
    "761": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "762": {
      "op": "len",
      "defined_out": [
        "a#0",
        "length%0#0"
      ],
      "stack_out": [
        "a#0",
        "length%0#0"
      ]
    },
    "763": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "a#0",
        "as_bytes%0#0"
      ]
    },
    "764": {
      "op": "extract 6 2",
      "defined_out": [
        "a#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "a#0",
        "length_uint16%0#0"
      ]
    },
    "767": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "a#0"
      ]
    },
    "768": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "769": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "770": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "771": {
      "op": "concat",
      "defined_out": [
        "tmp%272#0"
      ],
      "stack_out": [
        "tmp%272#0"
      ]
    },
    "772": {
      "op": "log",
      "stack_out": []
    },
    "773": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "774": {
      "op": "return"
    },
    "775": {
      "block": "main_verify_biguintn_from_log_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%259#0"
      ],
      "stack_out": [
        "tmp%259#0"
      ]
    },
    "777": {
      "op": "!",
      "defined_out": [
        "tmp%260#0"
      ],
      "stack_out": [
        "tmp%260#0"
      ]
    },
    "778": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "779": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%261#0"
      ],
      "stack_out": [
        "tmp%261#0"
      ]
    },
    "781": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "782": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%263#0"
      ],
      "stack_out": [
        "tmp%263#0"
      ]
    },
    "785": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%264#0"
      ],
      "stack_out": [
        "tmp%264#0"
      ]
    },
    "788": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_from_log",
      "op": "callsub verify_biguintn_from_log",
      "defined_out": [
        "tmp%265#0"
      ],
      "stack_out": [
        "tmp%265#0"
      ]
    },
    "791": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%265#0"
      ],
      "stack_out": [
        "tmp%265#0",
        "0x151f7c75"
      ]
    },
    "792": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%265#0"
      ]
    },
    "793": {
      "op": "concat",
      "defined_out": [
        "tmp%266#0"
      ],
      "stack_out": [
        "tmp%266#0"
      ]
    },
    "794": {
      "op": "log",
      "stack_out": []
    },
    "795": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "796": {
      "op": "return"
    },
    "797": {
      "block": "main_verify_uintn_from_log_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%251#0"
      ],
      "stack_out": [
        "tmp%251#0"
      ]
    },
    "799": {
      "op": "!",
      "defined_out": [
        "tmp%252#0"
      ],
      "stack_out": [
        "tmp%252#0"
      ]
    },
    "800": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "801": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%253#0"
      ],
      "stack_out": [
        "tmp%253#0"
      ]
    },
    "803": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "804": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%255#0"
      ],
      "stack_out": [
        "tmp%255#0"
      ]
    },
    "807": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%256#0"
      ],
      "stack_out": [
        "tmp%256#0"
      ]
    },
    "810": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_from_log",
      "op": "callsub verify_uintn_from_log",
      "defined_out": [
        "tmp%257#0"
      ],
      "stack_out": [
        "tmp%257#0"
      ]
    },
    "813": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%257#0"
      ],
      "stack_out": [
        "tmp%257#0",
        "0x151f7c75"
      ]
    },
    "814": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%257#0"
      ]
    },
    "815": {
      "op": "concat",
      "defined_out": [
        "tmp%258#0"
      ],
      "stack_out": [
        "tmp%258#0"
      ]
    },
    "816": {
      "op": "log",
      "stack_out": []
    },
    "817": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "818": {
      "op": "return"
    },
    "819": {
      "block": "main_verify_biguintn_from_bytes_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%243#0"
      ],
      "stack_out": [
        "tmp%243#0"
      ]
    },
    "821": {
      "op": "!",
      "defined_out": [
        "tmp%244#0"
      ],
      "stack_out": [
        "tmp%244#0"
      ]
    },
    "822": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "823": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%245#0"
      ],
      "stack_out": [
        "tmp%245#0"
      ]
    },
    "825": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "826": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%247#0"
      ],
      "stack_out": [
        "tmp%247#0"
      ]
    },
    "829": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "832": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "0x151f7c75"
      ]
    },
    "833": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "a#0"
      ]
    },
    "834": {
      "op": "concat",
      "defined_out": [
        "tmp%250#0"
      ],
      "stack_out": [
        "tmp%250#0"
      ]
    },
    "835": {
      "op": "log",
      "stack_out": []
    },
    "836": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "837": {
      "op": "return"
    },
    "838": {
      "block": "main_verify_uintn_from_bytes_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%235#0"
      ],
      "stack_out": [
        "tmp%235#0"
      ]
    },
    "840": {
      "op": "!",
      "defined_out": [
        "tmp%236#0"
      ],
      "stack_out": [
        "tmp%236#0"
      ]
    },
    "841": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "842": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%237#0"
      ],
      "stack_out": [
        "tmp%237#0"
      ]
    },
    "844": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "845": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%239#0"
      ],
      "stack_out": [
        "tmp%239#0"
      ]
    },
    "848": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "851": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "0x151f7c75"
      ]
    },
    "852": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "a#0"
      ]
    },
    "853": {
      "op": "concat",
      "defined_out": [
        "tmp%242#0"
      ],
      "stack_out": [
        "tmp%242#0"
      ]
    },
    "854": {
      "op": "log",
      "stack_out": []
    },
    "855": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "856": {
      "op": "return"
    },
    "857": {
      "block": "main_verify_biguintn_init_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0"
      ]
    },
    "859": {
      "op": "!",
      "defined_out": [
        "tmp%228#0"
      ],
      "stack_out": [
        "tmp%228#0"
      ]
    },
    "860": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "861": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%229#0"
      ],
      "stack_out": [
        "tmp%229#0"
      ]
    },
    "863": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "864": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%231#0"
      ],
      "stack_out": [
        "tmp%231#0"
      ]
    },
    "867": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%232#0"
      ],
      "stack_out": [
        "tmp%232#0"
      ]
    },
    "870": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_init",
      "op": "callsub verify_biguintn_init",
      "defined_out": [
        "tmp%233#0"
      ],
      "stack_out": [
        "tmp%233#0"
      ]
    },
    "873": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%233#0"
      ],
      "stack_out": [
        "tmp%233#0",
        "0x151f7c75"
      ]
    },
    "874": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%233#0"
      ]
    },
    "875": {
      "op": "concat",
      "defined_out": [
        "tmp%234#0"
      ],
      "stack_out": [
        "tmp%234#0"
      ]
    },
    "876": {
      "op": "log",
      "stack_out": []
    },
    "877": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "878": {
      "op": "return"
    },
    "879": {
      "block": "main_verify_uintn_init_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%219#0"
      ]
    },
    "881": {
      "op": "!",
      "defined_out": [
        "tmp%220#0"
      ],
      "stack_out": [
        "tmp%220#0"
      ]
    },
    "882": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "883": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0"
      ]
    },
    "885": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "886": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%223#0"
      ],
      "stack_out": [
        "tmp%223#0"
      ]
    },
    "889": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%224#0"
      ],
      "stack_out": [
        "tmp%224#0"
      ]
    },
    "892": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_init",
      "op": "callsub verify_uintn_init",
      "defined_out": [
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0"
      ]
    },
    "895": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0",
        "0x151f7c75"
      ]
    },
    "896": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%225#0"
      ]
    },
    "897": {
      "op": "concat",
      "defined_out": [
        "tmp%226#0"
      ],
      "stack_out": [
        "tmp%226#0"
      ]
    },
    "898": {
      "op": "log",
      "stack_out": []
    },
    "899": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "900": {
      "op": "return"
    },
    "901": {
      "block": "main_verify_biguintn_biguintn_ge_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%210#0"
      ],
      "stack_out": [
        "tmp%210#0"
      ]
    },
    "903": {
      "op": "!",
      "defined_out": [
        "tmp%211#0"
      ],
      "stack_out": [
        "tmp%211#0"
      ]
    },
    "904": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "905": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "907": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "908": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%214#0"
      ],
      "stack_out": [
        "tmp%214#0"
      ]
    },
    "911": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%215#0"
      ],
      "stack_out": [
        "tmp%215#0"
      ]
    },
    "914": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%215#0",
        "tmp%216#0"
      ],
      "stack_out": [
        "tmp%215#0",
        "tmp%216#0"
      ]
    },
    "917": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%215#0",
        "tmp%217#0"
      ],
      "stack_out": [
        "tmp%215#0",
        "tmp%217#0"
      ]
    },
    "920": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_ge",
      "op": "callsub verify_biguintn_biguintn_ge",
      "defined_out": [
        "to_encode%23#0"
      ],
      "stack_out": [
        "to_encode%23#0"
      ]
    },
    "923": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%23#0"
      ],
      "stack_out": [
        "to_encode%23#0",
        "0x00"
      ]
    },
    "924": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%23#0"
      ],
      "stack_out": [
        "to_encode%23#0",
        "0x00",
        "0"
      ]
    },
    "925": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%23#0"
      ]
    },
    "927": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%23#0"
      ],
      "stack_out": [
        "encoded_bool%23#0"
      ]
    },
    "928": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%23#0"
      ],
      "stack_out": [
        "encoded_bool%23#0",
        "0x151f7c75"
      ]
    },
    "929": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%23#0"
      ]
    },
    "930": {
      "op": "concat",
      "defined_out": [
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0"
      ]
    },
    "931": {
      "op": "log",
      "stack_out": []
    },
    "932": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "933": {
      "op": "return"
    },
    "934": {
      "block": "main_verify_uintn_biguintn_ge_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "936": {
      "op": "!",
      "defined_out": [
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0"
      ]
    },
    "937": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "938": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "940": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "941": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%205#0"
      ]
    },
    "944": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%206#0"
      ],
      "stack_out": [
        "tmp%206#0"
      ]
    },
    "947": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%206#0",
        "tmp%207#0"
      ],
      "stack_out": [
        "tmp%206#0",
        "tmp%207#0"
      ]
    },
    "950": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%206#0",
        "tmp%208#0"
      ],
      "stack_out": [
        "tmp%206#0",
        "tmp%208#0"
      ]
    },
    "953": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_ge",
      "op": "callsub verify_uintn_biguintn_ge",
      "defined_out": [
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0"
      ]
    },
    "956": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0",
        "0x00"
      ]
    },
    "957": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%22#0"
      ],
      "stack_out": [
        "to_encode%22#0",
        "0x00",
        "0"
      ]
    },
    "958": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%22#0"
      ]
    },
    "960": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%22#0"
      ],
      "stack_out": [
        "encoded_bool%22#0"
      ]
    },
    "961": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%22#0"
      ],
      "stack_out": [
        "encoded_bool%22#0",
        "0x151f7c75"
      ]
    },
    "962": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%22#0"
      ]
    },
    "963": {
      "op": "concat",
      "defined_out": [
        "tmp%209#0"
      ],
      "stack_out": [
        "tmp%209#0"
      ]
    },
    "964": {
      "op": "log",
      "stack_out": []
    },
    "965": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "966": {
      "op": "return"
    },
    "967": {
      "block": "main_verify_biguintn_uintn_ge_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "969": {
      "op": "!",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "970": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "971": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "973": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "974": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "977": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "980": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%197#0",
        "tmp%198#0"
      ],
      "stack_out": [
        "tmp%197#0",
        "tmp%198#0"
      ]
    },
    "983": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%197#0",
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%197#0",
        "tmp%199#0"
      ]
    },
    "986": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_ge",
      "op": "callsub verify_biguintn_uintn_ge",
      "defined_out": [
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0"
      ]
    },
    "989": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0",
        "0x00"
      ]
    },
    "990": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%21#0"
      ],
      "stack_out": [
        "to_encode%21#0",
        "0x00",
        "0"
      ]
    },
    "991": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%21#0"
      ]
    },
    "993": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%21#0"
      ],
      "stack_out": [
        "encoded_bool%21#0"
      ]
    },
    "994": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%21#0"
      ],
      "stack_out": [
        "encoded_bool%21#0",
        "0x151f7c75"
      ]
    },
    "995": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%21#0"
      ]
    },
    "996": {
      "op": "concat",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "997": {
      "op": "log",
      "stack_out": []
    },
    "998": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "999": {
      "op": "return"
    },
    "1000": {
      "block": "main_verify_uintn_uintn_ge_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "1002": {
      "op": "!",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "1003": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1004": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "1006": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1007": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "1010": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "1013": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%188#0",
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "tmp%189#0"
      ]
    },
    "1016": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%188#0",
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "tmp%190#0"
      ]
    },
    "1019": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_ge",
      "op": "callsub verify_uintn_uintn_ge",
      "defined_out": [
        "to_encode%20#0"
      ],
      "stack_out": [
        "to_encode%20#0"
      ]
    },
    "1022": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%20#0"
      ],
      "stack_out": [
        "to_encode%20#0",
        "0x00"
      ]
    },
    "1023": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%20#0"
      ],
      "stack_out": [
        "to_encode%20#0",
        "0x00",
        "0"
      ]
    },
    "1024": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%20#0"
      ]
    },
    "1026": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%20#0"
      ],
      "stack_out": [
        "encoded_bool%20#0"
      ]
    },
    "1027": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%20#0"
      ],
      "stack_out": [
        "encoded_bool%20#0",
        "0x151f7c75"
      ]
    },
    "1028": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%20#0"
      ]
    },
    "1029": {
      "op": "concat",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "1030": {
      "op": "log",
      "stack_out": []
    },
    "1031": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1032": {
      "op": "return"
    },
    "1033": {
      "block": "main_verify_biguintn_biguintn_gt_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "1035": {
      "op": "!",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1036": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1037": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "1039": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1040": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "1043": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "1046": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%179#0",
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%179#0",
        "tmp%180#0"
      ]
    },
    "1049": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%179#0",
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%179#0",
        "tmp%181#0"
      ]
    },
    "1052": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_gt",
      "op": "callsub verify_biguintn_biguintn_gt",
      "defined_out": [
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0"
      ]
    },
    "1055": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0",
        "0x00"
      ]
    },
    "1056": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%19#0"
      ],
      "stack_out": [
        "to_encode%19#0",
        "0x00",
        "0"
      ]
    },
    "1057": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%19#0"
      ]
    },
    "1059": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%19#0"
      ],
      "stack_out": [
        "encoded_bool%19#0"
      ]
    },
    "1060": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%19#0"
      ],
      "stack_out": [
        "encoded_bool%19#0",
        "0x151f7c75"
      ]
    },
    "1061": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%19#0"
      ]
    },
    "1062": {
      "op": "concat",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "1063": {
      "op": "log",
      "stack_out": []
    },
    "1064": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1065": {
      "op": "return"
    },
    "1066": {
      "block": "main_verify_uintn_biguintn_gt_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1068": {
      "op": "!",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "1069": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1070": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "1072": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1073": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "1076": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "1079": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%170#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%170#0",
        "tmp%171#0"
      ]
    },
    "1082": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%170#0",
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%170#0",
        "tmp%172#0"
      ]
    },
    "1085": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_gt",
      "op": "callsub verify_uintn_biguintn_gt",
      "defined_out": [
        "to_encode%18#0"
      ],
      "stack_out": [
        "to_encode%18#0"
      ]
    },
    "1088": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%18#0"
      ],
      "stack_out": [
        "to_encode%18#0",
        "0x00"
      ]
    },
    "1089": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%18#0"
      ],
      "stack_out": [
        "to_encode%18#0",
        "0x00",
        "0"
      ]
    },
    "1090": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%18#0"
      ]
    },
    "1092": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%18#0"
      ],
      "stack_out": [
        "encoded_bool%18#0"
      ]
    },
    "1093": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%18#0"
      ],
      "stack_out": [
        "encoded_bool%18#0",
        "0x151f7c75"
      ]
    },
    "1094": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%18#0"
      ]
    },
    "1095": {
      "op": "concat",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "1096": {
      "op": "log",
      "stack_out": []
    },
    "1097": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1098": {
      "op": "return"
    },
    "1099": {
      "block": "main_verify_biguintn_uintn_gt_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "1101": {
      "op": "!",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "1102": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1103": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "1105": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1106": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "1109": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "1112": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%161#0",
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%162#0"
      ]
    },
    "1115": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0"
      ]
    },
    "1118": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_gt",
      "op": "callsub verify_biguintn_uintn_gt",
      "defined_out": [
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0"
      ]
    },
    "1121": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0",
        "0x00"
      ]
    },
    "1122": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%17#0"
      ],
      "stack_out": [
        "to_encode%17#0",
        "0x00",
        "0"
      ]
    },
    "1123": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%17#0"
      ]
    },
    "1125": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%17#0"
      ],
      "stack_out": [
        "encoded_bool%17#0"
      ]
    },
    "1126": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%17#0"
      ],
      "stack_out": [
        "encoded_bool%17#0",
        "0x151f7c75"
      ]
    },
    "1127": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%17#0"
      ]
    },
    "1128": {
      "op": "concat",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "1129": {
      "op": "log",
      "stack_out": []
    },
    "1130": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1131": {
      "op": "return"
    },
    "1132": {
      "block": "main_verify_uintn_uintn_gt_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1134": {
      "op": "!",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1135": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1136": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "1138": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1139": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "1142": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "1145": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%152#0",
        "tmp%153#0"
      ]
    },
    "1148": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%152#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%152#0",
        "tmp%154#0"
      ]
    },
    "1151": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_gt",
      "op": "callsub verify_uintn_uintn_gt",
      "defined_out": [
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0"
      ]
    },
    "1154": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0",
        "0x00"
      ]
    },
    "1155": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%16#0"
      ],
      "stack_out": [
        "to_encode%16#0",
        "0x00",
        "0"
      ]
    },
    "1156": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%16#0"
      ]
    },
    "1158": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%16#0"
      ],
      "stack_out": [
        "encoded_bool%16#0"
      ]
    },
    "1159": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%16#0"
      ],
      "stack_out": [
        "encoded_bool%16#0",
        "0x151f7c75"
      ]
    },
    "1160": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%16#0"
      ]
    },
    "1161": {
      "op": "concat",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "1162": {
      "op": "log",
      "stack_out": []
    },
    "1163": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1164": {
      "op": "return"
    },
    "1165": {
      "block": "main_verify_biguintn_biguintn_le_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "1167": {
      "op": "!",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "1168": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1169": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1171": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1172": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1175": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "1178": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%143#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "tmp%144#0"
      ]
    },
    "1181": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%143#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "tmp%145#0"
      ]
    },
    "1184": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_le",
      "op": "callsub verify_biguintn_biguintn_le",
      "defined_out": [
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0"
      ]
    },
    "1187": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0",
        "0x00"
      ]
    },
    "1188": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%15#0"
      ],
      "stack_out": [
        "to_encode%15#0",
        "0x00",
        "0"
      ]
    },
    "1189": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%15#0"
      ]
    },
    "1191": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%15#0"
      ],
      "stack_out": [
        "encoded_bool%15#0"
      ]
    },
    "1192": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%15#0"
      ],
      "stack_out": [
        "encoded_bool%15#0",
        "0x151f7c75"
      ]
    },
    "1193": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%15#0"
      ]
    },
    "1194": {
      "op": "concat",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1195": {
      "op": "log",
      "stack_out": []
    },
    "1196": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1197": {
      "op": "return"
    },
    "1198": {
      "block": "main_verify_uintn_biguintn_le_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "1200": {
      "op": "!",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1201": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1202": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1204": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1205": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1208": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1211": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%134#0",
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%134#0",
        "tmp%135#0"
      ]
    },
    "1214": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%134#0",
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%134#0",
        "tmp%136#0"
      ]
    },
    "1217": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_le",
      "op": "callsub verify_uintn_biguintn_le",
      "defined_out": [
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0"
      ]
    },
    "1220": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "0x00"
      ]
    },
    "1221": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%14#0"
      ],
      "stack_out": [
        "to_encode%14#0",
        "0x00",
        "0"
      ]
    },
    "1222": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%14#0"
      ]
    },
    "1224": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%14#0"
      ],
      "stack_out": [
        "encoded_bool%14#0"
      ]
    },
    "1225": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%14#0"
      ],
      "stack_out": [
        "encoded_bool%14#0",
        "0x151f7c75"
      ]
    },
    "1226": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%14#0"
      ]
    },
    "1227": {
      "op": "concat",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "1228": {
      "op": "log",
      "stack_out": []
    },
    "1229": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1230": {
      "op": "return"
    },
    "1231": {
      "block": "main_verify_biguintn_uintn_le_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "1233": {
      "op": "!",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "1234": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1235": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "1237": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1238": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "1241": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1244": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%125#0",
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%125#0",
        "tmp%126#0"
      ]
    },
    "1247": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%125#0",
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%125#0",
        "tmp%127#0"
      ]
    },
    "1250": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_le",
      "op": "callsub verify_biguintn_uintn_le",
      "defined_out": [
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0"
      ]
    },
    "1253": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "0x00"
      ]
    },
    "1254": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%13#0"
      ],
      "stack_out": [
        "to_encode%13#0",
        "0x00",
        "0"
      ]
    },
    "1255": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%13#0"
      ]
    },
    "1257": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%13#0"
      ],
      "stack_out": [
        "encoded_bool%13#0"
      ]
    },
    "1258": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%13#0"
      ],
      "stack_out": [
        "encoded_bool%13#0",
        "0x151f7c75"
      ]
    },
    "1259": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%13#0"
      ]
    },
    "1260": {
      "op": "concat",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1261": {
      "op": "log",
      "stack_out": []
    },
    "1262": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1263": {
      "op": "return"
    },
    "1264": {
      "block": "main_verify_uintn_uintn_le_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "1266": {
      "op": "!",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1267": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1268": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "1270": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1271": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "1274": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1277": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%116#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "tmp%117#0"
      ]
    },
    "1280": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%116#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "tmp%118#0"
      ]
    },
    "1283": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_le",
      "op": "callsub verify_uintn_uintn_le",
      "defined_out": [
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0"
      ]
    },
    "1286": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "0x00"
      ]
    },
    "1287": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%12#0"
      ],
      "stack_out": [
        "to_encode%12#0",
        "0x00",
        "0"
      ]
    },
    "1288": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%12#0"
      ]
    },
    "1290": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%12#0"
      ],
      "stack_out": [
        "encoded_bool%12#0"
      ]
    },
    "1291": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%12#0"
      ],
      "stack_out": [
        "encoded_bool%12#0",
        "0x151f7c75"
      ]
    },
    "1292": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%12#0"
      ]
    },
    "1293": {
      "op": "concat",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "1294": {
      "op": "log",
      "stack_out": []
    },
    "1295": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1296": {
      "op": "return"
    },
    "1297": {
      "block": "main_verify_biguintn_biguintn_lt_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "1299": {
      "op": "!",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "1300": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1301": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "1303": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1304": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "1307": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "1310": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%107#0",
        "tmp%108#0"
      ]
    },
    "1313": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%107#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%107#0",
        "tmp%109#0"
      ]
    },
    "1316": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_lt",
      "op": "callsub verify_biguintn_biguintn_lt",
      "defined_out": [
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0"
      ]
    },
    "1319": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "0x00"
      ]
    },
    "1320": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "0x00",
        "0"
      ]
    },
    "1321": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%11#0"
      ]
    },
    "1323": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%11#0"
      ],
      "stack_out": [
        "encoded_bool%11#0"
      ]
    },
    "1324": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%11#0"
      ],
      "stack_out": [
        "encoded_bool%11#0",
        "0x151f7c75"
      ]
    },
    "1325": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%11#0"
      ]
    },
    "1326": {
      "op": "concat",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "1327": {
      "op": "log",
      "stack_out": []
    },
    "1328": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1329": {
      "op": "return"
    },
    "1330": {
      "block": "main_verify_uintn_biguintn_lt_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "1332": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "1333": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1334": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1336": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1337": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1340": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "1343": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "tmp%99#0"
      ]
    },
    "1346": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%100#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "tmp%100#0"
      ]
    },
    "1349": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_lt",
      "op": "callsub verify_uintn_biguintn_lt",
      "defined_out": [
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0"
      ]
    },
    "1352": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "0x00"
      ]
    },
    "1353": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "0x00",
        "0"
      ]
    },
    "1354": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%10#0"
      ]
    },
    "1356": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%10#0"
      ],
      "stack_out": [
        "encoded_bool%10#0"
      ]
    },
    "1357": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%10#0"
      ],
      "stack_out": [
        "encoded_bool%10#0",
        "0x151f7c75"
      ]
    },
    "1358": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%10#0"
      ]
    },
    "1359": {
      "op": "concat",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "1360": {
      "op": "log",
      "stack_out": []
    },
    "1361": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1362": {
      "op": "return"
    },
    "1363": {
      "block": "main_verify_biguintn_uintn_lt_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "1365": {
      "op": "!",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "1366": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1367": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "1369": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1370": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "1373": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1376": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%89#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%90#0"
      ]
    },
    "1379": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%89#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%91#0"
      ]
    },
    "1382": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_lt",
      "op": "callsub verify_biguintn_uintn_lt",
      "defined_out": [
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0"
      ]
    },
    "1385": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "0x00"
      ]
    },
    "1386": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "0x00",
        "0"
      ]
    },
    "1387": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%9#0"
      ]
    },
    "1389": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%9#0"
      ],
      "stack_out": [
        "encoded_bool%9#0"
      ]
    },
    "1390": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%9#0"
      ],
      "stack_out": [
        "encoded_bool%9#0",
        "0x151f7c75"
      ]
    },
    "1391": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%9#0"
      ]
    },
    "1392": {
      "op": "concat",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "1393": {
      "op": "log",
      "stack_out": []
    },
    "1394": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1395": {
      "op": "return"
    },
    "1396": {
      "block": "main_verify_uintn_uintn_lt_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1398": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "1399": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1400": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1402": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1403": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1406": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1409": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%80#0",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%80#0",
        "tmp%81#0"
      ]
    },
    "1412": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%80#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%80#0",
        "tmp%82#0"
      ]
    },
    "1415": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_lt",
      "op": "callsub verify_uintn_uintn_lt",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "1418": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "0x00"
      ]
    },
    "1419": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "0x00",
        "0"
      ]
    },
    "1420": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%8#0"
      ]
    },
    "1422": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%8#0"
      ],
      "stack_out": [
        "encoded_bool%8#0"
      ]
    },
    "1423": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%8#0"
      ],
      "stack_out": [
        "encoded_bool%8#0",
        "0x151f7c75"
      ]
    },
    "1424": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%8#0"
      ]
    },
    "1425": {
      "op": "concat",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "1426": {
      "op": "log",
      "stack_out": []
    },
    "1427": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1428": {
      "op": "return"
    },
    "1429": {
      "block": "main_verify_biguintn_biguintn_ne_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1431": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1432": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1433": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1435": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1436": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1439": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1442": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%71#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%71#0",
        "tmp%72#0"
      ]
    },
    "1445": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%71#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%71#0",
        "tmp%73#0"
      ]
    },
    "1448": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_ne",
      "op": "callsub verify_biguintn_biguintn_ne",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "1451": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "0x00"
      ]
    },
    "1452": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "0x00",
        "0"
      ]
    },
    "1453": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%7#0"
      ]
    },
    "1455": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%7#0"
      ],
      "stack_out": [
        "encoded_bool%7#0"
      ]
    },
    "1456": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%7#0"
      ],
      "stack_out": [
        "encoded_bool%7#0",
        "0x151f7c75"
      ]
    },
    "1457": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%7#0"
      ]
    },
    "1458": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1459": {
      "op": "log",
      "stack_out": []
    },
    "1460": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1461": {
      "op": "return"
    },
    "1462": {
      "block": "main_verify_uintn_biguintn_ne_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1464": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1465": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1466": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1468": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1469": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1472": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1475": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "tmp%63#0"
      ]
    },
    "1478": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%62#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "tmp%64#0"
      ]
    },
    "1481": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_ne",
      "op": "callsub verify_uintn_biguintn_ne",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "1484": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "0x00"
      ]
    },
    "1485": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "0x00",
        "0"
      ]
    },
    "1486": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%6#0"
      ]
    },
    "1488": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0"
      ]
    },
    "1489": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0",
        "0x151f7c75"
      ]
    },
    "1490": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ]
    },
    "1491": {
      "op": "concat",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1492": {
      "op": "log",
      "stack_out": []
    },
    "1493": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1494": {
      "op": "return"
    },
    "1495": {
      "block": "main_verify_biguintn_uintn_ne_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1497": {
      "op": "!",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1498": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1499": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1501": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1502": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1505": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1508": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%54#0"
      ]
    },
    "1511": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%53#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%55#0"
      ]
    },
    "1514": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_ne",
      "op": "callsub verify_biguintn_uintn_ne",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "1517": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00"
      ]
    },
    "1518": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00",
        "0"
      ]
    },
    "1519": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%5#0"
      ]
    },
    "1521": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0"
      ]
    },
    "1522": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0",
        "0x151f7c75"
      ]
    },
    "1523": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ]
    },
    "1524": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1525": {
      "op": "log",
      "stack_out": []
    },
    "1526": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1527": {
      "op": "return"
    },
    "1528": {
      "block": "main_verify_uintn_uintn_ne_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1530": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1531": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1532": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1534": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1535": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1538": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1541": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "1544": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%44#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%46#0"
      ]
    },
    "1547": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_ne",
      "op": "callsub verify_uintn_uintn_ne",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "1550": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "1551": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "1552": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "1554": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "1555": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "1556": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "1557": {
      "op": "concat",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1558": {
      "op": "log",
      "stack_out": []
    },
    "1559": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1560": {
      "op": "return"
    },
    "1561": {
      "block": "main_verify_biguintn_biguintn_eq_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1563": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1564": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1565": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1567": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1568": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1571": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1574": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "1577": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%35#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%37#0"
      ]
    },
    "1580": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_eq",
      "op": "callsub verify_biguintn_biguintn_eq",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1583": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "1584": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "1585": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "1587": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "1588": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "1589": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "1590": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1591": {
      "op": "log",
      "stack_out": []
    },
    "1592": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1593": {
      "op": "return"
    },
    "1594": {
      "block": "main_verify_uintn_biguintn_eq_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1596": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1597": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1598": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1600": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1601": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1604": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1607": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "1610": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "1613": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_eq",
      "op": "callsub verify_uintn_biguintn_eq",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1616": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "1617": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "1618": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "1620": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "1621": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "1622": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "1623": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1624": {
      "op": "log",
      "stack_out": []
    },
    "1625": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1626": {
      "op": "return"
    },
    "1627": {
      "block": "main_verify_biguintn_uintn_eq_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1629": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1630": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1631": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1633": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1634": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1637": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1640": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1643": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "1646": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_eq",
      "op": "callsub verify_biguintn_uintn_eq",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1649": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "1650": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "1651": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "1653": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "1654": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "1655": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "1656": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1657": {
      "op": "log",
      "stack_out": []
    },
    "1658": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1659": {
      "op": "return"
    },
    "1660": {
      "block": "main_verify_uintn_uintn_eq_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1662": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1663": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1664": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1666": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1667": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1670": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1673": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1676": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "1679": {
      "callsub": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_eq",
      "op": "callsub verify_uintn_uintn_eq",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1682": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "1683": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "1684": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "1686": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "1687": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "1688": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "1689": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1690": {
      "op": "log",
      "stack_out": []
    },
    "1691": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1692": {
      "op": "return"
    },
    "1693": {
      "block": "main_bare_routing@51",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%404#0"
      ],
      "stack_out": [
        "tmp%404#0"
      ]
    },
    "1695": {
      "op": "bnz main_after_if_else@55",
      "stack_out": []
    },
    "1698": {
      "op": "txn ApplicationID"
    },
    "1700": {
      "op": "!"
    },
    "1701": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "1702": {
      "op": "intc_0 // 1"
    },
    "1703": {
      "op": "return"
    },
    "1704": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_eq",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_uintn_eq",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1707": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1709": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1710": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "1711": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1712": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1713": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "1714": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1715": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1717": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "1719": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1720": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1722": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "1723": {
      "op": "intc_1 // 8",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "1724": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "1725": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1726": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1728": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "1730": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1731": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1732": {
      "retsub": true,
      "op": "retsub"
    },
    "1733": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_eq",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_uintn_eq",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1736": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1738": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1739": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "1740": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1741": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1742": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "1743": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1744": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1746": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1747": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1749": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "1750": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "1751": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "1752": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1753": {
      "op": "intc_1 // 8",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "8"
      ]
    },
    "1754": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "1755": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "1757": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1758": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1759": {
      "retsub": true,
      "op": "retsub"
    },
    "1760": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_eq",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_biguintn_eq",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1763": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1765": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1766": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "1767": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1768": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1769": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "1770": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1771": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1773": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1774": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1776": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "1777": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "1778": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "1779": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1780": {
      "op": "intc_2 // 64",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "64"
      ]
    },
    "1781": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "1782": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "1784": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1785": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1786": {
      "retsub": true,
      "op": "retsub"
    },
    "1787": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_eq",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_biguintn_eq",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1790": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1792": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1793": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "1794": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1795": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1796": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "1797": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1798": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1800": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "1802": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1803": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1805": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "1806": {
      "op": "intc_2 // 64",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "1807": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "1808": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1809": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1811": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "1813": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1814": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1815": {
      "retsub": true,
      "op": "retsub"
    },
    "1816": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_ne",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_uintn_ne",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1819": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1821": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1822": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "1823": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1824": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1825": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "1826": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1827": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1829": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "1831": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1832": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1834": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "1835": {
      "op": "intc_1 // 8",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "1836": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "1837": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1838": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1840": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "1842": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1843": {
      "op": "b!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1844": {
      "retsub": true,
      "op": "retsub"
    },
    "1845": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_ne",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_uintn_ne",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1848": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1850": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1851": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "1852": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1853": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1854": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "1855": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1856": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1858": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1859": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1861": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "1862": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "1863": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "1864": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1865": {
      "op": "intc_1 // 8",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "8"
      ]
    },
    "1866": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "1867": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "1869": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1870": {
      "op": "b!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1871": {
      "retsub": true,
      "op": "retsub"
    },
    "1872": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_ne",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_biguintn_ne",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1875": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1877": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1878": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "1879": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1880": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1881": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "1882": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1883": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1885": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1886": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1888": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "1889": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "1890": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "1891": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1892": {
      "op": "intc_2 // 64",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "64"
      ]
    },
    "1893": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "1894": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "1896": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1897": {
      "op": "b!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1898": {
      "retsub": true,
      "op": "retsub"
    },
    "1899": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_ne",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_biguintn_ne",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1902": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1904": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1905": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "1906": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1907": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1908": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "1909": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1910": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1912": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "1914": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1915": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1917": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "1918": {
      "op": "intc_2 // 64",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "1919": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "1920": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1921": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1923": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "1925": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1926": {
      "op": "b!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1927": {
      "retsub": true,
      "op": "retsub"
    },
    "1928": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_lt",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_uintn_lt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1931": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1933": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1934": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "1935": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1936": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1937": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "1938": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1939": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1941": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "1943": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1944": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1946": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "1947": {
      "op": "intc_1 // 8",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "1948": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "1949": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "1950": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1952": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "1954": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1955": {
      "op": "b<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1956": {
      "retsub": true,
      "op": "retsub"
    },
    "1957": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_lt",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_uintn_lt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1960": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1962": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1963": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "1964": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1965": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1966": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "1967": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1968": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1970": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1971": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "1973": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "1974": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "1975": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "1976": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1977": {
      "op": "intc_1 // 8",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "8"
      ]
    },
    "1978": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "1979": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "1981": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "1982": {
      "op": "b<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1983": {
      "retsub": true,
      "op": "retsub"
    },
    "1984": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_lt",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_biguintn_lt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1987": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1989": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "1990": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "1991": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "1992": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "1993": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "1994": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "1995": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "1997": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1998": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2000": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2001": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "2002": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2003": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2004": {
      "op": "intc_2 // 64",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "64"
      ]
    },
    "2005": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "2006": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "2008": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2009": {
      "op": "b<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2010": {
      "retsub": true,
      "op": "retsub"
    },
    "2011": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_lt",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_biguintn_lt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2014": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2016": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2017": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "2018": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2019": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2020": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "2021": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2022": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2024": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "2026": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2027": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2029": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2030": {
      "op": "intc_2 // 64",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "2031": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2032": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2033": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2035": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "2037": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2038": {
      "op": "b<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2039": {
      "retsub": true,
      "op": "retsub"
    },
    "2040": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_le",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_uintn_le",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2043": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2045": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2046": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "2047": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2048": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2049": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "2050": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2051": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2053": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "2055": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2056": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2058": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2059": {
      "op": "intc_1 // 8",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "2060": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2061": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2062": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2064": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "2066": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2067": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2068": {
      "retsub": true,
      "op": "retsub"
    },
    "2069": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_le",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_uintn_le",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2072": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2074": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2075": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "2076": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2077": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2078": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "2079": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2080": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2082": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2083": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2085": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2086": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "2087": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2088": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2089": {
      "op": "intc_1 // 8",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "8"
      ]
    },
    "2090": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "2091": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "2093": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2094": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2095": {
      "retsub": true,
      "op": "retsub"
    },
    "2096": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_le",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_biguintn_le",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2099": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2101": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2102": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "2103": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2104": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2105": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "2106": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2107": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2109": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2110": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2112": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2113": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "2114": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2115": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2116": {
      "op": "intc_2 // 64",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "64"
      ]
    },
    "2117": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "2118": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "2120": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2121": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2122": {
      "retsub": true,
      "op": "retsub"
    },
    "2123": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_le",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_biguintn_le",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2126": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2128": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2129": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "2130": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2131": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2132": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "2133": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2134": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2136": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "2138": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2139": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2141": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2142": {
      "op": "intc_2 // 64",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "2143": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2144": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2145": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2147": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "2149": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2150": {
      "op": "b<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2151": {
      "retsub": true,
      "op": "retsub"
    },
    "2152": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_gt",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_uintn_gt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2155": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2157": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2158": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "2159": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2160": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2161": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "2162": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2163": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2165": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "2167": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2168": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2170": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2171": {
      "op": "intc_1 // 8",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "2172": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2173": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2174": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2176": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "2178": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2179": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2180": {
      "retsub": true,
      "op": "retsub"
    },
    "2181": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_gt",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_uintn_gt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2184": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2186": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2187": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "2188": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2189": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2190": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "2191": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2192": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2194": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2195": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2197": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2198": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "2199": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2200": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2201": {
      "op": "intc_1 // 8",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "8"
      ]
    },
    "2202": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "2203": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "2205": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2206": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2207": {
      "retsub": true,
      "op": "retsub"
    },
    "2208": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_gt",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_biguintn_gt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2211": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2213": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2214": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "2215": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2216": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2217": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "2218": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2219": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2221": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2222": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2224": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2225": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "2226": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2227": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2228": {
      "op": "intc_2 // 64",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "64"
      ]
    },
    "2229": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "2230": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "2232": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2233": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2234": {
      "retsub": true,
      "op": "retsub"
    },
    "2235": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_gt",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_biguintn_gt",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2238": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2240": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2241": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "2242": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2243": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2244": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "2245": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2246": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2248": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "2250": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2251": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2253": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2254": {
      "op": "intc_2 // 64",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "2255": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2256": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2257": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2259": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "2261": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2262": {
      "op": "b>",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2263": {
      "retsub": true,
      "op": "retsub"
    },
    "2264": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_uintn_ge",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_uintn_ge",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2267": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2269": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2270": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "2271": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2272": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2273": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "2274": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2275": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2277": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "2279": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2280": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2282": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2283": {
      "op": "intc_1 // 8",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "2284": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2285": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2286": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2288": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "2290": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2291": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2292": {
      "retsub": true,
      "op": "retsub"
    },
    "2293": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_uintn_ge",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_uintn_ge",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2296": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2298": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2299": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "2300": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2301": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2302": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "2303": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2304": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2306": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2307": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2309": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2310": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "8"
      ]
    },
    "2311": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2312": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2313": {
      "op": "intc_1 // 8",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "8"
      ]
    },
    "2314": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "2315": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "2317": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2318": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2319": {
      "retsub": true,
      "op": "retsub"
    },
    "2320": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_biguintn_ge",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_uintn_biguintn_ge",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2323": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2325": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2326": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "8"
      ]
    },
    "2327": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2328": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2329": {
      "op": "intc_1 // 8",
      "stack_out": [
        "8"
      ]
    },
    "2330": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2331": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2333": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2334": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2336": {
      "op": "len",
      "defined_out": [
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2337": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "2338": {
      "op": "<=",
      "defined_out": [
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2339": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2340": {
      "op": "intc_2 // 64",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "64"
      ]
    },
    "2341": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0"
      ]
    },
    "2342": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b_zeros%1#0",
        "b#0 (copy)"
      ]
    },
    "2344": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2345": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2346": {
      "retsub": true,
      "op": "retsub"
    },
    "2347": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_biguintn_ge",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_biguintn_biguintn_ge",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2350": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2352": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2353": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "64"
      ]
    },
    "2354": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2355": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2356": {
      "op": "intc_2 // 64",
      "stack_out": [
        "64"
      ]
    },
    "2357": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2358": {
      "op": "frame_dig -2",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2360": {
      "op": "dig 1",
      "defined_out": [
        "a#0 (copy)",
        "b_zeros%0#0",
        "b_zeros%0#0 (copy)"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)",
        "b_zeros%0#0 (copy)"
      ]
    },
    "2362": {
      "op": "b|",
      "defined_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2363": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2365": {
      "op": "len",
      "defined_out": [
        "b_zeros%0#0",
        "len_%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0"
      ]
    },
    "2366": {
      "op": "intc_2 // 64",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "len_%1#0",
        "64"
      ]
    },
    "2367": {
      "op": "<=",
      "defined_out": [
        "b_zeros%0#0",
        "no_overflow%1#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "no_overflow%1#0"
      ]
    },
    "2368": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "2369": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "reinterpret_biguint%2#0",
        "b#0 (copy)"
      ]
    },
    "2371": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "b#0 (copy)",
        "b_zeros%0#0"
      ]
    },
    "2373": {
      "op": "b|",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "2374": {
      "op": "b>=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2375": {
      "retsub": true,
      "op": "retsub"
    },
    "2376": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_init",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_uintn_init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2379": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2381": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2382": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "4"
      ]
    },
    "2384": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2385": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2386": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "4"
      ]
    },
    "2388": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2389": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2391": {
      "op": "b|",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2392": {
      "retsub": true,
      "op": "retsub"
    },
    "2393": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_init",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_biguintn_init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2396": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2398": {
      "op": "len",
      "defined_out": [
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0"
      ]
    },
    "2399": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "len_%0#0"
      ],
      "stack_out": [
        "len_%0#0",
        "32"
      ]
    },
    "2401": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0"
      ],
      "stack_out": [
        "no_overflow%0#0"
      ]
    },
    "2402": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "2403": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "32"
      ]
    },
    "2405": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0"
      ],
      "stack_out": [
        "b_zeros%0#0"
      ]
    },
    "2406": {
      "op": "frame_dig -1",
      "stack_out": [
        "b_zeros%0#0",
        "a#0 (copy)"
      ]
    },
    "2408": {
      "op": "b|",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2409": {
      "retsub": true,
      "op": "retsub"
    },
    "2410": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_uintn_from_log",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_uintn_from_log",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2413": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2415": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2418": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2420": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2423": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2424": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2425": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2426": {
      "retsub": true,
      "op": "retsub"
    },
    "2427": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_biguintn_from_log",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_biguintn_from_log",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2430": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2432": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2435": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2437": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2440": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2441": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2442": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2443": {
      "retsub": true,
      "op": "retsub"
    },
    "2444": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_ufixednxm_from_log",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_ufixednxm_from_log",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2447": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2449": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2452": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2454": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2457": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2458": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2459": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2460": {
      "retsub": true,
      "op": "retsub"
    },
    "2461": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_bigufixednxm_from_log",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_bigufixednxm_from_log",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2464": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2466": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2469": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2471": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2474": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2475": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2476": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2477": {
      "retsub": true,
      "op": "retsub"
    },
    "2478": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_string_init",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_string_init",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2481": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "\"Hello, \""
      ]
    },
    "2490": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello, \"",
        "a#0 (copy)"
      ],
      "stack_out": [
        "\"Hello, \"",
        "a#0 (copy)"
      ]
    },
    "2492": {
      "op": "concat",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2493": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2494": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "2495": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "2496": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "2499": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "2500": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2501": {
      "retsub": true,
      "op": "retsub"
    },
    "2502": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_string_add",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_string_add",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2505": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2507": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "2510": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "b#0 (copy)"
      ]
    },
    "2512": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "2515": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "2516": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "2517": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "2518": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "2519": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "2522": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "2523": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2524": {
      "retsub": true,
      "op": "retsub"
    },
    "2525": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_string_eq",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "verify_string_eq",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2528": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2530": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "2532": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2533": {
      "retsub": true,
      "op": "retsub"
    },
    "2534": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_string_bytes",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_string_bytes",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2537": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2539": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "2540": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "2541": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "2544": {
      "op": "frame_dig -1",
      "stack_out": [
        "length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "2546": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2547": {
      "retsub": true,
      "op": "retsub"
    },
    "2548": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_string_from_log",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_string_from_log",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2551": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2553": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2556": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2558": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2561": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2562": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2563": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2564": {
      "retsub": true,
      "op": "retsub"
    },
    "2565": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_bool_from_log",
      "params": {
        "a#0": "bytes"
      },
      "block": "verify_bool_from_log",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2568": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "2570": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2573": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "a#0 (copy)"
      ]
    },
    "2575": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2578": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2579": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2580": {
      "error": "ARC4 prefix is valid",
      "op": "assert // ARC4 prefix is valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2581": {
      "retsub": true,
      "op": "retsub"
    },
    "2582": {
      "subroutine": "tests.artifacts.Arc4PrimitiveOps.contract.Arc4PrimitiveOpsContract.verify_emit",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes",
        "e#0": "bytes",
        "f#0": "bytes",
        "g#0": "bytes",
        "h#0": "bytes",
        "m#0": "bytes",
        "n#0": "bytes",
        "o#0": "bytes",
        "p#0": "bytes",
        "q#0": "bytes",
        "r#0": "bytes",
        "s#0": "bytes",
        "t#0": "bytes"
      },
      "block": "verify_emit",
      "stack_in": [],
      "op": "proto 16 0"
    },
    "2585": {
      "op": "frame_dig -8",
      "defined_out": [
        "m#0 (copy)"
      ],
      "stack_out": [
        "m#0 (copy)"
      ]
    },
    "2587": {
      "op": "frame_dig -7",
      "defined_out": [
        "m#0 (copy)",
        "n#0 (copy)"
      ],
      "stack_out": [
        "m#0 (copy)",
        "n#0 (copy)"
      ]
    },
    "2589": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2590": {
      "op": "frame_dig -6",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "o#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "o#0 (copy)"
      ]
    },
    "2592": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2593": {
      "op": "frame_dig -5",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "p#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "p#0 (copy)"
      ]
    },
    "2595": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2596": {
      "op": "frame_dig -4",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "q#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "q#0 (copy)"
      ]
    },
    "2598": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2599": {
      "op": "frame_dig -3",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "r#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "r#0 (copy)"
      ]
    },
    "2601": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2602": {
      "op": "pushbytes 0x0054",
      "defined_out": [
        "0x0054",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x0054"
      ]
    },
    "2606": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2607": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "s#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "s#0 (copy)"
      ]
    },
    "2609": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "data_length%0#0"
      ]
    },
    "2610": {
      "op": "pushint 84 // 84",
      "defined_out": [
        "84",
        "data_length%0#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "data_length%0#0",
        "84"
      ]
    },
    "2612": {
      "op": "dig 1",
      "defined_out": [
        "84",
        "data_length%0#0",
        "data_length%0#0 (copy)",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "data_length%0#0",
        "84",
        "data_length%0#0 (copy)"
      ]
    },
    "2614": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%0#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "data_length%0#0",
        "current_tail_offset%1#0"
      ]
    },
    "2615": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "data_length%0#0",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "data_length%0#0",
        "as_bytes%1#0"
      ]
    },
    "2616": {
      "op": "extract 6 2",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%7#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "data_length%0#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2619": {
      "op": "uncover 2",
      "stack_out": [
        "data_length%0#0",
        "offset_as_uint16%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2621": {
      "op": "swap",
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%7#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2622": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2623": {
      "op": "frame_dig -2",
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%8#0",
        "s#0 (copy)"
      ]
    },
    "2625": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2626": {
      "op": "frame_dig -1",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%9#0",
        "t#0 (copy)"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%9#0",
        "t#0 (copy)"
      ]
    },
    "2628": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2629": {
      "op": "pushbytes 0x66bb0333 // method \"SwappedArc4(uint64,uint256,ufixed32x8,ufixed256x16,bool,uint8[3],uint16[],(uint32,uint64,string))\"",
      "defined_out": [
        "Method(SwappedArc4(uint64,uint256,ufixed32x8,ufixed256x16,bool,uint8[3],uint16[],(uint32,uint64,string)))",
        "data_length%0#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%10#0",
        "Method(SwappedArc4(uint64,uint256,ufixed32x8,ufixed256x16,bool,uint8[3],uint16[],(uint32,uint64,string)))"
      ]
    },
    "2635": {
      "op": "swap",
      "stack_out": [
        "data_length%0#0",
        "Method(SwappedArc4(uint64,uint256,ufixed32x8,ufixed256x16,bool,uint8[3],uint16[],(uint32,uint64,string)))",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2636": {
      "op": "concat",
      "defined_out": [
        "data_length%0#0",
        "event%0#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "event%0#0"
      ]
    },
    "2637": {
      "op": "log",
      "stack_out": [
        "data_length%0#0"
      ]
    },
    "2638": {
      "op": "frame_dig -16",
      "defined_out": [
        "a#0 (copy)",
        "data_length%0#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "a#0 (copy)"
      ]
    },
    "2640": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "data_length%2#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "data_length%2#0"
      ]
    },
    "2641": {
      "op": "pushint 173 // 173",
      "defined_out": [
        "173",
        "data_length%0#0",
        "data_length%2#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "data_length%2#0",
        "173"
      ]
    },
    "2644": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%4#0",
        "data_length%0#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0"
      ]
    },
    "2645": {
      "op": "pushbytes 0x00ad",
      "defined_out": [
        "0x00ad",
        "current_tail_offset%4#0",
        "data_length%0#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "0x00ad"
      ]
    },
    "2649": {
      "op": "frame_dig -15",
      "defined_out": [
        "0x00ad",
        "b#0 (copy)",
        "current_tail_offset%4#0",
        "data_length%0#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "0x00ad",
        "b#0 (copy)"
      ]
    },
    "2651": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "data_length%0#0",
        "encoded_tuple_buffer%13#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "2652": {
      "op": "frame_dig -14",
      "defined_out": [
        "c#0 (copy)",
        "current_tail_offset%4#0",
        "data_length%0#0",
        "encoded_tuple_buffer%13#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%13#0",
        "c#0 (copy)"
      ]
    },
    "2654": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "data_length%0#0",
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "2655": {
      "op": "dig 1",
      "defined_out": [
        "current_tail_offset%4#0",
        "current_tail_offset%4#0 (copy)",
        "data_length%0#0",
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%14#0",
        "current_tail_offset%4#0 (copy)"
      ]
    },
    "2657": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "current_tail_offset%4#0",
        "data_length%0#0",
        "encoded_tuple_buffer%14#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%14#0",
        "as_bytes%3#0"
      ]
    },
    "2658": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%4#0",
        "data_length%0#0",
        "encoded_tuple_buffer%14#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%14#0",
        "offset_as_uint16%3#0"
      ]
    },
    "2661": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%4#0",
        "data_length%0#0",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2662": {
      "op": "frame_dig -13",
      "defined_out": [
        "current_tail_offset%4#0",
        "d#0 (copy)",
        "data_length%0#0",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%15#0",
        "d#0 (copy)"
      ]
    },
    "2664": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%4#0",
        "data_length%0#0",
        "data_length%3#0",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%15#0",
        "data_length%3#0"
      ]
    },
    "2665": {
      "op": "uncover 2",
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%15#0",
        "data_length%3#0",
        "current_tail_offset%4#0"
      ]
    },
    "2667": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%15#0",
        "current_tail_offset%5#0"
      ]
    },
    "2668": {
      "op": "swap",
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2669": {
      "op": "frame_dig -12",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "e#0 (copy)",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%15#0",
        "e#0 (copy)"
      ]
    },
    "2671": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "2672": {
      "op": "frame_dig -11",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "encoded_tuple_buffer%16#0",
        "f#0 (copy)"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%16#0",
        "f#0 (copy)"
      ]
    },
    "2674": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "encoded_tuple_buffer%17#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "2675": {
      "op": "dig 1",
      "defined_out": [
        "current_tail_offset%5#0",
        "current_tail_offset%5#0 (copy)",
        "data_length%0#0",
        "encoded_tuple_buffer%17#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%17#0",
        "current_tail_offset%5#0 (copy)"
      ]
    },
    "2677": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "current_tail_offset%5#0",
        "data_length%0#0",
        "encoded_tuple_buffer%17#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%17#0",
        "as_bytes%4#0"
      ]
    },
    "2678": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "encoded_tuple_buffer%17#0",
        "offset_as_uint16%4#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%17#0",
        "offset_as_uint16%4#0"
      ]
    },
    "2681": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "2682": {
      "op": "frame_dig -10",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "encoded_tuple_buffer%18#0",
        "g#0 (copy)"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%18#0",
        "g#0 (copy)"
      ]
    },
    "2684": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%5#0",
        "data_length%0#0",
        "data_length%4#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%5#0",
        "encoded_tuple_buffer%18#0",
        "data_length%4#0"
      ]
    },
    "2685": {
      "op": "uncover 2",
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%18#0",
        "data_length%4#0",
        "current_tail_offset%5#0"
      ]
    },
    "2687": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%6#0",
        "data_length%0#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%18#0",
        "current_tail_offset%6#0"
      ]
    },
    "2688": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%6#0",
        "current_tail_offset%6#0 (copy)",
        "data_length%0#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%18#0",
        "current_tail_offset%6#0",
        "current_tail_offset%6#0 (copy)"
      ]
    },
    "2689": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "current_tail_offset%6#0",
        "data_length%0#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%18#0",
        "current_tail_offset%6#0",
        "as_bytes%5#0"
      ]
    },
    "2690": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%6#0",
        "data_length%0#0",
        "encoded_tuple_buffer%18#0",
        "offset_as_uint16%5#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%18#0",
        "current_tail_offset%6#0",
        "offset_as_uint16%5#0"
      ]
    },
    "2693": {
      "op": "uncover 2",
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%6#0",
        "offset_as_uint16%5#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "2695": {
      "op": "swap",
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%6#0",
        "encoded_tuple_buffer%18#0",
        "offset_as_uint16%5#0"
      ]
    },
    "2696": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%6#0",
        "data_length%0#0",
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%6#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "2697": {
      "op": "frame_dig -9",
      "defined_out": [
        "current_tail_offset%6#0",
        "data_length%0#0",
        "encoded_tuple_buffer%19#0",
        "h#0 (copy)"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%6#0",
        "encoded_tuple_buffer%19#0",
        "h#0 (copy)"
      ]
    },
    "2699": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%6#0",
        "data_length%0#0",
        "data_length%5#0",
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%6#0",
        "encoded_tuple_buffer%19#0",
        "data_length%5#0"
      ]
    },
    "2700": {
      "op": "uncover 2",
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%19#0",
        "data_length%5#0",
        "current_tail_offset%6#0"
      ]
    },
    "2702": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%7#0",
        "data_length%0#0",
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%19#0",
        "current_tail_offset%7#0"
      ]
    },
    "2703": {
      "op": "swap",
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "2704": {
      "op": "frame_dig -8",
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%19#0",
        "m#0 (copy)"
      ]
    },
    "2706": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "data_length%0#0",
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "2707": {
      "op": "frame_dig -7",
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%20#0",
        "n#0 (copy)"
      ]
    },
    "2709": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "data_length%0#0",
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "2710": {
      "op": "frame_dig -6",
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%21#0",
        "o#0 (copy)"
      ]
    },
    "2712": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "data_length%0#0",
        "encoded_tuple_buffer%22#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "2713": {
      "op": "frame_dig -5",
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%22#0",
        "p#0 (copy)"
      ]
    },
    "2715": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "data_length%0#0",
        "encoded_tuple_buffer%23#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%23#0"
      ]
    },
    "2716": {
      "op": "frame_dig -4",
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%23#0",
        "q#0 (copy)"
      ]
    },
    "2718": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "data_length%0#0",
        "encoded_tuple_buffer%24#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "2719": {
      "op": "frame_dig -3",
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%24#0",
        "r#0 (copy)"
      ]
    },
    "2721": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "data_length%0#0",
        "encoded_tuple_buffer%25#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%25#0"
      ]
    },
    "2722": {
      "op": "dig 1",
      "defined_out": [
        "current_tail_offset%7#0",
        "current_tail_offset%7#0 (copy)",
        "data_length%0#0",
        "encoded_tuple_buffer%25#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%25#0",
        "current_tail_offset%7#0 (copy)"
      ]
    },
    "2724": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "current_tail_offset%7#0",
        "data_length%0#0",
        "encoded_tuple_buffer%25#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%25#0",
        "as_bytes%6#0"
      ]
    },
    "2725": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%7#0",
        "data_length%0#0",
        "encoded_tuple_buffer%25#0",
        "offset_as_uint16%6#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%25#0",
        "offset_as_uint16%6#0"
      ]
    },
    "2728": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "data_length%0#0",
        "encoded_tuple_buffer%26#0"
      ],
      "stack_out": [
        "data_length%0#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%26#0"
      ]
    },
    "2729": {
      "op": "swap",
      "stack_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%26#0",
        "current_tail_offset%7#0"
      ]
    },
    "2730": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%26#0",
        "current_tail_offset%7#0",
        "data_length%0#0"
      ]
    },
    "2732": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%8#0",
        "encoded_tuple_buffer%26#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%26#0",
        "current_tail_offset%8#0"
      ]
    },
    "2733": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded_tuple_buffer%26#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%26#0",
        "as_bytes%7#0"
      ]
    },
    "2734": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%26#0",
        "offset_as_uint16%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%26#0",
        "offset_as_uint16%7#0"
      ]
    },
    "2737": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%27#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%27#0"
      ]
    },
    "2738": {
      "op": "frame_dig -16",
      "stack_out": [
        "encoded_tuple_buffer%27#0",
        "a#0 (copy)"
      ]
    },
    "2740": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%28#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%28#0"
      ]
    },
    "2741": {
      "op": "frame_dig -13",
      "stack_out": [
        "encoded_tuple_buffer%28#0",
        "d#0 (copy)"
      ]
    },
    "2743": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%29#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%29#0"
      ]
    },
    "2744": {
      "op": "frame_dig -10",
      "stack_out": [
        "encoded_tuple_buffer%29#0",
        "g#0 (copy)"
      ]
    },
    "2746": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%30#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%30#0"
      ]
    },
    "2747": {
      "op": "frame_dig -9",
      "stack_out": [
        "encoded_tuple_buffer%30#0",
        "h#0 (copy)"
      ]
    },
    "2749": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%31#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%31#0"
      ]
    },
    "2750": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%31#0",
        "s#0 (copy)"
      ]
    },
    "2752": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%32#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%32#0"
      ]
    },
    "2753": {
      "op": "frame_dig -1",
      "stack_out": [
        "encoded_tuple_buffer%32#0",
        "t#0 (copy)"
      ]
    },
    "2755": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%33#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%33#0"
      ]
    },
    "2756": {
      "op": "pushbytes 0xec3319bb // method \"Swapped(string,uint512,uint64,byte[],uint64,bool,byte[],string,uint64,uint256,ufixed32x8,ufixed256x16,bool,uint8[3],uint16[],(uint32,uint64,string))\"",
      "defined_out": [
        "Method(Swapped(string,uint512,uint64,byte[],uint64,bool,byte[],string,uint64,uint256,ufixed32x8,ufixed256x16,bool,uint8[3],uint16[],(uint32,uint64,string)))",
        "encoded_tuple_buffer%33#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%33#0",
        "Method(Swapped(string,uint512,uint64,byte[],uint64,bool,byte[],string,uint64,uint256,ufixed32x8,ufixed256x16,bool,uint8[3],uint16[],(uint32,uint64,string)))"
      ]
    },
    "2762": {
      "op": "swap",
      "stack_out": [
        "Method(Swapped(string,uint512,uint64,byte[],uint64,bool,byte[],string,uint64,uint256,ufixed32x8,ufixed256x16,bool,uint8[3],uint16[],(uint32,uint64,string)))",
        "encoded_tuple_buffer%33#0"
      ]
    },
    "2763": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "2764": {
      "op": "dup",
      "defined_out": [
        "event%1#0",
        "event%1#0 (copy)"
      ],
      "stack_out": [
        "event%1#0",
        "event%1#0 (copy)"
      ]
    },
    "2765": {
      "op": "log",
      "stack_out": [
        "event%1#0"
      ]
    },
    "2766": {
      "op": "log",
      "stack_out": []
    },
    "2767": {
      "retsub": true,
      "op": "retsub"
    }
  }
}