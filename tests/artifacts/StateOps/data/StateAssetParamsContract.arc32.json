{
    "hints": {
        "verify_asset_params_get_total(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_decimals(asset)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_default_frozen(asset)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_unit_name(asset)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_name(asset)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_url(asset)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_metadata_hash(asset)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_manager(asset)address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_reserve(asset)address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_freeze(asset)address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_clawback(asset)address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_asset_params_get_creator(asset)address": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StateAssetParamsContract",
        "methods": [
            {
                "name": "verify_asset_params_get_total",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_asset_params_get_decimals",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_asset_params_get_default_frozen",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "verify_asset_params_get_unit_name",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_asset_params_get_name",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_asset_params_get_url",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_asset_params_get_metadata_hash",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_asset_params_get_manager",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "verify_asset_params_get_reserve",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "verify_asset_params_get_freeze",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "verify_asset_params_get_clawback",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "verify_asset_params_get_creator",
                "args": [
                    {
                        "type": "asset",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}