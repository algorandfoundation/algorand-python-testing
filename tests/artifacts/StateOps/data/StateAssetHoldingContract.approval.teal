#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    bytecblock 0x151f7c75
    // tests/artifacts/StateOps/contract.py:162
    // class StateAssetHoldingContract(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@9
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x8f5235b4 0xde7a39f6 // method "verify_asset_holding_get(address,uint64)uint64", method "verify_asset_frozen_get(address,uint64)bool"
    txna ApplicationArgs 0
    match verify_asset_holding_get verify_asset_frozen_get
    err

main___algopy_default_create@9:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests.artifacts.StateOps.contract.StateAssetHoldingContract.verify_asset_holding_get[routing]() -> void:
verify_asset_holding_get:
    // tests/artifacts/StateOps/contract.py:163
    // @arc4.abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/StateOps/contract.py:165
    // balance, _val = op.AssetHoldingGet.asset_balance(a, b)
    asset_holding_get AssetBalance
    pop
    // tests/artifacts/StateOps/contract.py:163
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetHoldingContract.verify_asset_frozen_get[routing]() -> void:
verify_asset_frozen_get:
    // tests/artifacts/StateOps/contract.py:168
    // @arc4.abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/StateOps/contract.py:170
    // frozen, _val = op.AssetHoldingGet.asset_frozen(a, b)
    asset_holding_get AssetFrozen
    pop
    // tests/artifacts/StateOps/contract.py:168
    // @arc4.abimethod()
    pushbytes 0x00
    pushint 0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return
