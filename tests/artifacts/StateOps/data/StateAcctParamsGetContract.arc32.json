{
    "hints": {
        "verify_acct_balance(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_min_balance(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_auth_addr(account)address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_num_uint(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_num_byte_slice(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_extra_app_pages(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_apps_created(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_apps_opted_in(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_assets_created(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_assets(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_boxes(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_box_bytes(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0cy5hcnRpZmFjdHMuU3RhdGVPcHMuY29udHJhY3QuU3RhdGVBY2N0UGFyYW1zR2V0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHRlc3RzL2FydGlmYWN0cy9TdGF0ZU9wcy9jb250cmFjdC5weToyNAogICAgLy8gY2xhc3MgU3RhdGVBY2N0UGFyYW1zR2V0Q29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StateAcctParamsGetContract",
        "methods": [
            {
                "name": "verify_acct_balance",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_min_balance",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_auth_addr",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "verify_acct_total_num_uint",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_num_byte_slice",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_extra_app_pages",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_apps_created",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_apps_opted_in",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_assets_created",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_assets",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_boxes",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_box_bytes",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}