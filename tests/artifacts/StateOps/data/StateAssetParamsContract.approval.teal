#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1
    bytecblock 0x151f7c75
    // tests/artifacts/StateOps/contract.py:174
    // class StateAssetParamsContract(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@19
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xf05da7a4 0xc0e9c315 0xd8528273 0xf4468ad9 0x229d12f7 0xdf534f7b 0xe050b5a9 0x8b2a2d58 0xee15c4f7 0x157544ff 0x10492c07 0x5229fa37 // method "verify_asset_params_get_total(uint64)uint64", method "verify_asset_params_get_decimals(uint64)uint64", method "verify_asset_params_get_default_frozen(uint64)bool", method "verify_asset_params_get_unit_name(uint64)byte[]", method "verify_asset_params_get_name(uint64)byte[]", method "verify_asset_params_get_url(uint64)byte[]", method "verify_asset_params_get_metadata_hash(uint64)byte[]", method "verify_asset_params_get_manager(uint64)address", method "verify_asset_params_get_reserve(uint64)address", method "verify_asset_params_get_freeze(uint64)address", method "verify_asset_params_get_clawback(uint64)address", method "verify_asset_params_get_creator(uint64)address"
    txna ApplicationArgs 0
    match verify_asset_params_get_total verify_asset_params_get_decimals verify_asset_params_get_default_frozen verify_asset_params_get_unit_name verify_asset_params_get_name verify_asset_params_get_url verify_asset_params_get_metadata_hash verify_asset_params_get_manager verify_asset_params_get_reserve verify_asset_params_get_freeze verify_asset_params_get_clawback verify_asset_params_get_creator
    err

main___algopy_default_create@19:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_total[routing]() -> void:
verify_asset_params_get_total:
    // tests/artifacts/StateOps/contract.py:175
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:177
    // value, exists = op.AssetParamsGet.asset_total(a)
    asset_params_get AssetTotal
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:178
    // value_index, exists_index = op.AssetParamsGet.asset_total(_get_1st_ref_index())
    asset_params_get AssetTotal
    // tests/artifacts/StateOps/contract.py:179
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:180
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:175
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_decimals[routing]() -> void:
verify_asset_params_get_decimals:
    // tests/artifacts/StateOps/contract.py:183
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:185
    // value, exists = op.AssetParamsGet.asset_decimals(a)
    asset_params_get AssetDecimals
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:186
    // value_index, exists_index = op.AssetParamsGet.asset_decimals(_get_1st_ref_index())
    asset_params_get AssetDecimals
    // tests/artifacts/StateOps/contract.py:187
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:188
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:183
    // @arc4.abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_default_frozen[routing]() -> void:
verify_asset_params_get_default_frozen:
    // tests/artifacts/StateOps/contract.py:191
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:193
    // value, exists = op.AssetParamsGet.asset_default_frozen(a)
    asset_params_get AssetDefaultFrozen
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:194
    // value_index, exists_index = op.AssetParamsGet.asset_default_frozen(_get_1st_ref_index())
    asset_params_get AssetDefaultFrozen
    // tests/artifacts/StateOps/contract.py:195
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:196
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:191
    // @arc4.abimethod()
    pushbytes 0x00
    pushint 0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_unit_name[routing]() -> void:
verify_asset_params_get_unit_name:
    // tests/artifacts/StateOps/contract.py:199
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:201
    // value, exists = op.AssetParamsGet.asset_unit_name(a)
    asset_params_get AssetUnitName
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:202
    // value_index, exists_index = op.AssetParamsGet.asset_unit_name(_get_1st_ref_index())
    asset_params_get AssetUnitName
    // tests/artifacts/StateOps/contract.py:203
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:204
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:199
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_name[routing]() -> void:
verify_asset_params_get_name:
    // tests/artifacts/StateOps/contract.py:207
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:209
    // value, exists = op.AssetParamsGet.asset_name(a)
    asset_params_get AssetName
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:210
    // value_index, exists_index = op.AssetParamsGet.asset_name(_get_1st_ref_index())
    asset_params_get AssetName
    // tests/artifacts/StateOps/contract.py:211
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:212
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:207
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_url[routing]() -> void:
verify_asset_params_get_url:
    // tests/artifacts/StateOps/contract.py:215
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:217
    // value, exists = op.AssetParamsGet.asset_url(a)
    asset_params_get AssetURL
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:218
    // value_index, exists_index = op.AssetParamsGet.asset_url(_get_1st_ref_index())
    asset_params_get AssetURL
    // tests/artifacts/StateOps/contract.py:219
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:220
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:215
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_metadata_hash[routing]() -> void:
verify_asset_params_get_metadata_hash:
    // tests/artifacts/StateOps/contract.py:223
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:225
    // value, exists = op.AssetParamsGet.asset_metadata_hash(a)
    asset_params_get AssetMetadataHash
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:226
    // value_index, exists_index = op.AssetParamsGet.asset_metadata_hash(_get_1st_ref_index())
    asset_params_get AssetMetadataHash
    // tests/artifacts/StateOps/contract.py:227
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:228
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:223
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_manager[routing]() -> void:
verify_asset_params_get_manager:
    // tests/artifacts/StateOps/contract.py:231
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:233
    // value, exists = op.AssetParamsGet.asset_manager(a)
    asset_params_get AssetManager
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:234
    // value_index, exists_index = op.AssetParamsGet.asset_manager(_get_1st_ref_index())
    asset_params_get AssetManager
    // tests/artifacts/StateOps/contract.py:235
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:236
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:231
    // @arc4.abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_reserve[routing]() -> void:
verify_asset_params_get_reserve:
    // tests/artifacts/StateOps/contract.py:239
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:241
    // value, exists = op.AssetParamsGet.asset_reserve(a)
    asset_params_get AssetReserve
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:242
    // value_index, exists_index = op.AssetParamsGet.asset_reserve(_get_1st_ref_index())
    asset_params_get AssetReserve
    // tests/artifacts/StateOps/contract.py:243
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:244
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:239
    // @arc4.abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_freeze[routing]() -> void:
verify_asset_params_get_freeze:
    // tests/artifacts/StateOps/contract.py:247
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:249
    // value, exists = op.AssetParamsGet.asset_freeze(a)
    asset_params_get AssetFreeze
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:250
    // value_index, exists_index = op.AssetParamsGet.asset_freeze(_get_1st_ref_index())
    asset_params_get AssetFreeze
    // tests/artifacts/StateOps/contract.py:251
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:252
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:247
    // @arc4.abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_clawback[routing]() -> void:
verify_asset_params_get_clawback:
    // tests/artifacts/StateOps/contract.py:255
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:257
    // value, exists = op.AssetParamsGet.asset_clawback(a)
    asset_params_get AssetClawback
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:258
    // value_index, exists_index = op.AssetParamsGet.asset_clawback(_get_1st_ref_index())
    asset_params_get AssetClawback
    // tests/artifacts/StateOps/contract.py:259
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:260
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:255
    // @arc4.abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// tests.artifacts.StateOps.contract.StateAssetParamsContract.verify_asset_params_get_creator[routing]() -> void:
verify_asset_params_get_creator:
    // tests/artifacts/StateOps/contract.py:263
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:265
    // value, exists = op.AssetParamsGet.asset_creator(a)
    asset_params_get AssetCreator
    // tests/artifacts/StateOps/contract.py:21
    // return op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // tests/artifacts/StateOps/contract.py:266
    // value_index, exists_index = op.AssetParamsGet.asset_creator(_get_1st_ref_index())
    asset_params_get AssetCreator
    // tests/artifacts/StateOps/contract.py:267
    // assert value == value_index, "expected value by index to match"
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/StateOps/contract.py:268
    // assert exists == exists_index, "expected exists by index to match"
    ==
    assert // expected exists by index to match
    // tests/artifacts/StateOps/contract.py:263
    // @arc4.abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
